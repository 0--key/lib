
* 2016
** 2016-08 August
*** 2016-08-01 Monday
**** Three things really bothered me:

      1. If I'm not sitting at my desk typing, I'm not working.
      You hired me as a programmer, not as a typist.  You could
      have saved yourself a fortune if all you wanted was a clerk.
      Programming is problem-solving, it's not typing.

      2. Program specifications that specify something completely
	 different than what the client actually wants.
	 (It happens a lot if the client thinks he knows programming
	 and specifies the program in what he thinks are programming
	 terms, not in the terms of his business.
	 I can lean accounting a lot faster than you can get 20 years
	 of programming experience.)

      3. Making "just this little change - it's no work at all, so don't
	 add it to the bill".  If it's no work at all, YOU do it. If I
	 have to spend 3 hours clearing up exactly what you want changed
	 and how you want it changed, that's 3 hours you're going to pay
	 for and nothing's been written yet.  And making one little
	 change may impact other areas, which will also have to be changed.
	 Programmers know the word side-effects - clients don't.
	 ("You can't do just one thing.")  Your "little change" may be 80
	 man-hours of work.  You're not getting that for free.  Read your
	 contract.  ANY changes from the specifications in the contract
	 will be billed additionally.

**** The "dolla dolla bills" argument:
   For internet businesses, website
   performance is super-critical to their bottom line. There are studies
   that show that: 

       "Amazon found every 100ms of latency cost them 1% in sales. Google
       found an extra .5 seconds in search page generation time dropped
       traffic by 20%. A broker could lose $4 million in revenues per
       millisecond if their electronic trading platform is 5 milliseconds
       behind the competition."

   For this reason, there is a lot of investment into
   performance/productivity improvements from the big players. Google
   built the v8 engine that powers Chrome and Node.js. Facebook created
   and open-sourced the React.js framework. Google maintains the
   Angular.js framework.
**** Risk and failure don’t necessarily equate
   You could be a high failure and low risk person.
   Being an entrepreneur in Silicon Valley is way lower
   risk than working at a big company. Your downside scenario is you learn a
   lot, you grow a ton…your worst case scenario at a larger company is you
   get stuck, you might not be growing much, you might be unhappy.
*** 2016-08-02 Tuesday
**** being a good programmer
     keep improving yourself and updating with the current developments
     of languages, tools, libraries, application design trends
*** 2016-08-03 Wednesday
**** information sponge
     An aggressive little yellow one that chases people and data around
*** 2016-08-12 Friday
**** What are the biggest myths software engineers believe?
   1 "There's no existing code that does what I need. I'll have to write
     it from scratch."
   2 "This code I'm inheriting is crap. I'll have to write it from
     scratch."
   3 "This is just a temporary hack - I'll come back and fix it later."
   4 "Just two more weeks."
   5 The solution to any problem (poverty, starvation, drought) is
     technology.
   6 Edit: I originally had 'Open plan is less productive than offices'
     because I'd read old research about it. I now believe Open Plan is
     bad for Engineering.
   7 Half an hour isn't long enough to get in "the zone" and write good
     code.
*** 2016-08-16 Tuesday
**** Code smells
   One of the biggest advantages of following a test-driven development process
   is that the tests that we write are always around to make sure that we don't
   break anything. This gives us a safety net to tinker with the code and make
   sure that it is easy to read, easy to maintain, and well written.
*** 2016-08-17 Wednesday
**** Tests as a safety net 
   Having a solid set of tests is critical before we do refactoring. This is
   because tests give us the confidence that we haven't broken anything
   during the refactoring. We will be running the tests multiple times
   during a refactoring as we proceed from step to step.
*** 2016-08-18 Thursday
**** _single_leading_underscore
   weak "internal use" indicator.  E.g. "from M import *" *does not import*
   objects whose name starts with an underscore.
**** Single Responsibility Principle (SRP)
     Class should have a single, clear, coherent purpose. A class that tries
     to do too many different things is an indicator of a poor design.
*** 2016-08-25 Thursday
**** worth their weight in gold
   To get a GOOD programmer, with that level of experience, passion and
   dedication to their career is very hard to find. When you do find one,
   they're worth their weight in gold.
*** 2016-08-29 Monday
**** Part of healthy self-esteem
   Part of healthy self-esteem is the ability to see both your strengths
   and your weaknesses rationally. Belief in yourself will let you do
   many, many things. It will not let you do anything.
