#+AUTHOR:    Anton S. Kosinov
#+TITLE:     Mental Athlete Diary
#+SUBTITLE:  How to cope with yourself
#+EMAIL:     a.s.kosinov@gmail.com
#+LANGUAGE: en
#+STARTUP: showall

* Knowledge is power Â© 				:True:InitialPostulate:
** it is product of education;        :True:

*** reading;

*** thinking;

*** practicing;

** all knowledges reside in the memory;

*** they require repetition;

*** the spaced repetition is the best approach;
   
** Improve your memory
   Miller's magic number is 7

*** Memory principles
**** Repetition
     - Write it down
     - Repeat it
     - Quiz yourself
**** Exaggeration
**** Chunking
**** Association
**** Pictures
     A picture worth a thousand words.
     Visual information is easier to remember than abstract
     information
    
*** Memory techniques
**** Note-taking techniques
     Taking notes strengthens your memory
**** Using mnemonic devices
     - Read paragraph
     - Highlight key words or phrases
       - highlight
       - make notes in margins
       - underline
       - use an app
**** Using songs, rhymes, and alliteration
     Text is easier to remember as a song
**** The story method
     The human mind is wired to remember stories
**** The link system
**** Memory palaces and the method of loci
**** The similar-sound technique

*** Using the numeric peg system

*** Situational methods

*** Conclusion

** Speed reading fundamentals
*** Three reading habits that slow you down
    1. Fixation
    2. Regression
    3. Subvocalization
*** Using your hand to guide your eyes
    when you are reading book
*** Reading faster on the computer screen
    http://accelareader.com
*** Simple drills you can practice to boost reading speed
    - Read for twenty minutes
    - Mark the place where you stopped
    - Get through that same material in ten minutes or less
*** Reading groups of words
    Each line of text has three parts:
    - Beginning
    - Middle
    - End
*** Using deadlines to improve your reading speed
    - Read one page of text
    - Write down how long it takes
    - Meet or beat this time
    - Repeat the exercise
     
** Learn to teach and collaborate

* Enhance English			        :English:
** Grammar [85%]
   [[http://learnenglish.britishcouncil.org/en/book-english-grammar][British Council]]
*** Pronouns [100%]
**** Personal pronouns
**** it and there
**** you and they
**** possessive pronouns (see possessives:- pronouns)

     | subject | object | pos.adj | pos.pron |
     |---------+--------+---------+----------|
     | I       | me     | my      | mine     |
     |---------+--------+---------+----------|
     | you     | you    | your    | yours    |
     |---------+--------+---------+----------|
     | he      | him    | his     | his      |
     |---------+--------+---------+----------|
     | she     | her    | her     | hers     |
     |---------+--------+---------+----------|
     | we      | us     | our     | ours     |
     |---------+--------+---------+----------|
     | they    | them   | their   | theirs   | 
  
**** this, that, these and those
     What was that you said?
     This chicken tastes very good.
     Hello, this is Sandra speaking, how may I help you?
     These throuses aren't the right size.
     Whose is that silver Mersedes over there?
     I'm John and these are my children Molly and Jake.
     What are those men doing on the roof?
     Do you take this woman to be your lawfully wedded wife?
**** one and ones
     How old are my children? The younger one is four and the older
     one is seven.
     The new mobiles are much lighter than the old ones.
     I don't mind what kind of car it is, I just want one that gets
     me there.
     Which do you prefer? This one, or that one?
     I need some new glasses. The ones I have at the moment are broken.
     I hope this holiday will be one to remember.
**** questions
     What you are afraid of?
     Which train did you come on?
     Who they are playing against?
     Which party are you going to vote for?
     What kind of music do you listen to?
     Who does she remaind you of?
**** reflexive pronouns
     The reflecxive pronouns are:

     | singular | myself - yourself - himself - herself - itself |
     |----------+------------------------------------------------|
     | plural   | ourselves - yourselves - themselves            |

     Most common transitive verbs:
     | amuse     | blame | cut     | dry     | enjoy | help | hurt |
     |-----------+-------+---------+---------+-------+------+------|
     | introduce | kill  | prepare | satisfy | teach | see  | find |

     We do not use a reflexive pronoun after verbs which describe
     things people usually do for themselves, such as wash, shave, dress.

     Mary, you shouldn't blame yourself about the accident.
     Don't worry about us. We can amuse ourselves for an hour or two.
     I never really had lessons, I just taught myself.
     I thought it was a bit rude. She never introduced herself.
     It's long time since they've enjoyed themselves so much.
     It's a very clever machine. It turns itself off.
     He cut himself shaving today.
     Ladies and gentlemen. There's masses of food, so please help yourselves.

**** reciprocal pronouns: each other and one another
     The animals looked at each other.
     Romeo and Juliet loved each other.
     You and Jack didn't talk to each other.
     We gave present to each other.
     My girlfriend and I met one another's parents last night.
     My brother and I used to borrow each other's clothes.
**** indefinite pronouns

     | somebody  | someone  | something  |
     |-----------+----------+------------|
     | anybody   | anyone   | anything   |
     | nobody    | no one   | nothing    |
     | everybody | everyone | everything |

     I went to Baker's house this morning but there was nobody home.
     The fridge is empty. We need to buy something for dinner tonight.
     I don't want to talk with Stewart. I don't have anything to say to him.
     I've left my wallet at home. Can anybody lend me a bit of money?
     Isabelle is a really popular manager. Everybody likes and respects her.
     Hello? Is anybody there?
     Louise is a huge fan of Elvis Prestley. She knows everything about him.
     I've had flue for the past three weeks, and nothing seems to make it
     any better.
     >>
     Everybody is saying that Nadal will win the match, but I'm not so sure.
     If anybody has any questions, they're very welcome to come and ask me.
     Nobody in my family eats meat.
     Somebody stole my wallet yesterday. They took it from my desk.
     Helena sent twenty job applications but nobody replied.
     My home town is the same as it was twenty years ago; nothing has changed.
      
**** relative pronouns
      
     | Subject | Object | Posessive |
     |---------+--------+-----------|
     | who     | who(m) | whose     |
     |---------+--------+-----------|
     | which   | which  | whose     |
     |---------+--------+-----------|
     | that    | that   |           |

     He is the artist whose paintings sell for millions.
     That's a song that reminds me of my youth.
     She's only person who really understands me.
     He tore up the photograph, who upset me.
     They had four children, all of whom went to university.
     She wrote a best-selling book, the name of which I've completely
     forgotten.
     Where's the girl who is selling the ice-cream?
     Isn't that the man, whose brother was a famous pianist?
*** Determiners and quantifiers [100%]
    - Determiners
      #+BEGIN_QUOTE
      D are words wich come at the beginning of the noun phrase.
      They tell use whether the noun is specific or general.
      #+END_QUOTE
      + Specific D:
	- the definite article: the
	- possesives: my, your, his, her, its, our, their, whose
	- demonstratives: this, that, these, those
	- interrogatives: which
      + General D:
	- a, an, any, another, other, what
	  + we use any with a singular noun or an uncount noun when
	    we are talking about all of those people or things
	  + we use another to talk about an additional person or thing
	  + other is the plural form of another
      + With no D:
	- uncount nouns
	- plural nouns
    - Quantifiers
      #+BEGIN_QUOTE
      We use quantifiers when we want to give someone information about
      the number of something: how much or how many.
      #+END_QUOTE
**** interrogative determiners: which and what
     - We use 'which' as a determiner to ask a question about a specific
       group of people or things:
       + Which restaurant did you go to?
       + Which countries in South America have you visited?
     - When we are asking a general question we use 'what' as a determiner:
       + What films do you like?
       + What university did you go to?
**** indefinite article: a and an
     1. We use the indefinite article, a/an, with count nouns when the 
	hearer/reader does not know exactly which one we are referring to:
	- Police are searching for a 14 year-old girl.
     2. We also use it to show the person or thing is one of a group:
	- She is a pupil at London Road School.
     3. We do not use an indefinite article with plural nouns and uncount
	nouns:
	- She was wearing blue shoes. (=plural noun)
	- She has short blonde hair. (=uncount noun)
     4. We use a/an to say what someone is or what job they do:
	- My brother is a doctor.
	- George is a student.
     5. We use a/an with a singular noun to say something about all things
	of that kind:
	- A man needs friends.
	- A dog likes to eat meat.
     Train set:
     - A woman has the right to a career. (5)
     - Pandas eat only one specific type of bamboo. (3)
     - The house was bought by Italian couple. (3)
     - She worked as a waitress to help pay for her course. (4)
     - He's been a Chelsea fan for years. (2)
     - I was talking to a guy about that the other day. (1)
     - He seems to know a lot about wine. (3)

**** definite article: the
     We use the definite article in front of a noun when we believe the
     hearer/reader knows exactly what we are referring to.
     - because there is only one:
       + The Pope is visiting Russia.
       + The Moon is very bright tonight.
       + The Shah of Iran was deposed in 1979.
       + This is why we use the definite article with a superlative
	 adjective:
	 = He is the tallest boy in the class.
	 = It is the oldes building in the town.
     - because there is only one in that place or in those surroundings:
       | We live in a small vilage next to the church  | The church in our village |
       |-----------------------------------------------+---------------------------|
       | Dad, can I borrow the car?                    | The car that belongs to   |
       |                                               | our family                |
       | When we stayed at my grandmother's house we   |                           |
       | went to the beach every day.                  | The beach near my         |
       |                                               | grandmother's house       |
       | Look at the boy in the blue shirt over there. | The boy I am pointing at  |
     - because we have already mentioned it;
       + A woman who fell 10 meters from High Peak was lifted to safety by
	 helicopter. The woman fell while climbing.
       + The rescue is the latest in a series of incidents on High Peak.
	 In January last year two men walking the peak were killed in a fall.
	  
	 We also use the definite article:
	  
     - to say something about all the things referred by a noun:
       + The wolf is not really a dangerous animal (= Wolves are not 
	 really dangerous animals)
       + The kangaroo is found only in Australia (= Kangaroos are found
	 only in Australia)
       + The heart pumps blood around the body. (= Hearts pump blood 
	 around bodies)
     - We use definite article in this way to talk about musical instruments:
       + Joe plays the piano really well. (= Joe can play any piano)
       + She is learning the guitar.(=She is learning to play any guitar)
     - to refer to a system or service:
       + How long does it take on the train?
       + I heard it on the radio.
       + You should tell the police.
     - With adjectives like rich, poor, elderly, unemployed to talk about 
       groups of people:
       + Life can be very hard for the poor.
       + I think the rich should pay more taxes.
       + She works for a group to help the disabled.

	 The definite article with names:
	  
     - We do not normally use the definite article with names:
       + William Shakespeare wrote Hamlet.
       + Paris is the capital of France.
       + Iran is in Asia.
     - But we do use the definite article with:
       + countries whose names include words like kingdom, states or republic:
	 + the United Kingdom, the Kingdom of Nepal, the United States
       + countries which have pluran nouns in their names:
	 - the Netherlands, the Philippines.
       + geographical features, like as mountain ranges, groups of islands
	 rivers, seas, oceans and canals: 
	 + the Himalayas, the Canaries, the Atlantic, the Amazon, the Panama
	   Canal
       + newspapers;
       + well known buildings or works of art;
       + organisations;
       + hotels, pubs and restaurants (we do not use the definite article 
	 in the name of the hotel or restaurant is the name of the owner)
       + families: the Obamas, the Jacksons
	  
**** quantifiers
     #+BEGIN_QUOTE
     We use quantifiers when we want to give someone information about
     the number of something: how much or how many.
     #+END_QUOTE

     Sometimes we use a quantifier in the  place of a determiner:
     - Most children start school at the age of five.
     - We ate some bread and butter.
     - We saw lots of birds.
	
     We use these quantifiers with both count and uncount nouns:
     | all  | any  | enough | less    | a lot of | lots of |
     | more | most | no     | none of | some     |         |

     and some more colloquial forms:
     | plenty of | heaps of | a load of | loads of | tons of | etc |

     some quantifiers can be used only with count nouns:
     | both | each | either | (a) few | fewer | neither | several |

     and some more colloquial forms:
     | a couple of | hundreds of | thousands of | etc |

     some quantifiers can be used only with uncount nouns:
     | a little | (not) much | a bit of | 

     and, particularly with abstract nouns such as time, money, trouble,
     etc:, we often use:
     | a great deal of | a good deal of | 

     Members of groups
      
     You can put a noun after a quantifier when you are talking about
     members of a group in general:
     - Few snakes are dangerous.
     - Both brothers work with their father.
     - I never have enough money.

     ...but if you are talking about a specific group of people or things,
     use of the... as well:
     - Few of the snakes are dangerous.
     - All of the children live at home.
     - He has spent all of his money.

     Note that, if we are talking about two people or things we use
     quantifiers both, either and neither.
     | One supermarket | Two supermarkets     | More than two supermarkets |
     |-----------------+----------------------+----------------------------|
     | The supermarket | Both supermarkets    | All the supermarkets were  |
     | was closed      | were closed.         | closed.                    |
     |-----------------+----------------------+----------------------------|
     | The supermarket | Neither of the       | None of the supermarkets   |
     | wasn't open.    | supermarkets was     | were open.                 |
     |                 | open.                |                            |
     |-----------------+----------------------+----------------------------|
     | I don't think   | I don't think either | I don't think any of the   |
     | the supermarket | of the supermarkets  | supermarkets were open.    |
     | was open.       | was open.            |                            | 

     & Nouns with either and neither have a singular verb.

     Singular quantifiers:

     We use every or each with a singular noun to mean all:
     | There was a party in every street      | = | There were parties in all the streets      |
     |----------------------------------------+---+--------------------------------------------|
     | Every shop was decorated with          |   | All the shops were decorated with          |
     | flowers                                | = | flowers.                                   |
     |----------------------------------------+---+--------------------------------------------|
     | Each child was given a prize.          | = | All the children were given a prize.       |
     |----------------------------------------+---+--------------------------------------------|
     | There was a prize in each competition. | = | There were prizes in all the competitions. |

     We often use every to talk about times like days, weeks and years:
     - When we were children we had holidays at our grandmother's every year.
     - When we stayed at my grandmother's house we went to the beach every day.
     - We visit our daughter every Christmas.

     BUT: We do not use a determiner with every and each. We DO NOT say:
     -- The every shop was decorated with flowers.
     -- The each child was given a prize.

     Activities:

     - Could you dive me some advice?
     - There are only a few players in the world with his skill.
     - Every year I promise myself I will lose some weight.
     - When I got there both the banks had closed.
     - Can you give me a couple of pounds for the bus fare?
     - I went to a great deal of trouble to get those tickets.
     - Either that dog goes or I do!

*** Possessives [100%]
**** nouns
     We use a noun with 's with a singular noun show possession:
     - We are having a party at John's house.
     - Michael drove his friend's car.
	
     We use s' with plural noun ending in -s:
     - This is my parents' house.
     - Those are ladies' shoes.

     But we use 's with other plural nouns:
     - These are men's shoes.
     - Children's clothes are very expensive.

     We can use a possessive instead of a noun phrase to avoid repeating
     words:
     | Is that John's car? | No, it's Mary's [car]. |
     |---------------------+------------------------|
     | Whose coat is this? | It's my wife's [coat]. |   

**** adjectives

     | Subject | Object | Possesive |
     |---------+--------+-----------|
     | I       | me     | my        |
     | You     | you    | your      |
     | He      | him    | his       |
     | She     | her    | her       |
     | It      | it     | its       |
     | We      | us     | our       |
     | They    | them   | their     |

     We use possessive adjectives:
     - to show something belongs to somebody:
       + That's our house.
       + My car is very old.
     - for relations and friends:
       + My mother is a doctor.
       + How old is your sister?
     - for parts of the body:
       + He's broken his arm.
       + She's washing her hair.
       + I need to clean my teeth.

     Examples:
     - She brushes her teeth three times a day.
     - We are checking our luggage in. Can I call you
       back in a five minutes?
     - The dog wagged its tail when it saw the postman.
     - He's almost bald, so he never combs his hair.
     - Did you know cyclists shave their legs?
     - Do you open your eyes under water?
     - I can't touch my toes any more. Time to go to the gym.

**** pronouns
     | Subject | Object | Possessive adj. | Possessive pronouns |
     |---------+--------+-----------------+---------------------|
     | I       | me     | my              | mine                |
     | You     | you    | your            | yours               |
     | He      | him    | his             | his                 |
     | She     | her    | her             | hers                |
     | It      | it     | its             | its                 |
     | We      | us     | our             | ours                |
     | They    | them   | their           | theirs              |

     We can use a possessive pronoun instead of a noun phrase:

     | Is that John's car? |   | No, it's [my car] | > | No, it's mine  |
     |---------------------+---+-------------------+---+----------------|
     | Whose coat is this? |   | It is [your coat] | > | Is it yours?   |
     |---------------------+---+-------------------+---+----------------|
     | Her coat is grey,   |   | Her coat is grey, |   | mine is brown. |
     | [my coat] is brown  |   |                   |   |                | 

     We can use possessive pronouns after of.
     We can say:
     - Susan is one of my friends.
     - Susan is a friend of mine.

     - I am one of Susan's friends.
     - I am a friend of Susan's.

     Exercises:
     - This is your room and that is hers.
     - Shall we watch the match at their house or ours?
     - That's George's car and this is mine.
     - Her birthday is on the 12th and his is on the 13th.
     - Is the party at our place or theirs?
     - My dessert was the ice cream and yours was the mousse.

**** questions
     We use whose to ask questions:
     | Pattern A             | Pattern B             |
     |-----------------------+-----------------------|
     | Whose coat is this?   | Whose is this coat?   |
     | Whose book is that?   | Whose is that book?   |
     | Whose bags are those? | Whose are those bags? | 

**** reciprocal pronouns (Ð¾Ð±Ð¾ÑÐ´Ð½ÑÐ¹)
     - They helped to look after each other's children.
     - We often stayed in one another's houses.
     One another refers to group larger than two members.
*** Adjectives [100%]
    We use adjectives to describe nouns.
    Most adjectives can be used in front of a noun:
    - They have a beautiful house.
    - We saw a very exciting film last night.

    or after a link verb like be, look and feel:
    - Their house is beautiful.
    - That film looks interesting.

    Examples:
    - I saw a really good program me on TV last night.
    - My sister's got two young children.
    - I didn't know your mother was French.
    - Are you OK? You look terrible!
    - I've just bought a new printer.
    - This chicken doesn't smell very good. How old is it?
    - They're building a big factory next to our home.
    - Poland can be a very cold country in the winter.
    - Sorry, can you stop the car? I feel sick.
    - I'd like to see than new Michael Moore film. It sounds
      interesting.
**** adjectives: -ed and -ing
     A lot of adjectives are made from verbs by adding -ing or -ed:
     - ing adjectives:
       the commonest -ing adjectives are:
       + amusing
       + shocking
       + surprising
       + frightening
       + interesting
       + disappointing
	  
     If you call something interesting you mean it interests you.
     If you call something frightening you mean it frightening you.

     Examples:
     - I read very interesting article in the newspaper today.
     - That Dracula film was absolutely terrifying.
	
     -ed adjectives:

     The commonest -ed adjectives are:
     + annoyed
     + bored
     + frightened
     + worried
     + tried

       If something annoys you, you can say you feel annoyed. If something
       interests you, you can say you are interested.

       Example:
       - The children had nothing to do. They are bored.

**** order of adjectives
     Sometimes we use more than one adjective in front of a noun:
     - He was a nice intelligent young man.
     - She had a small round black wooden box.

     Opinion adjectives:

     Some adjectives give a general opinion. we can use these adjectives to
     describe almost any noun:

     | good      | bad       | lovely | strange   | beautiful | nice  |
     |-----------+-----------+--------+-----------+-----------+-------|
     | brilliant | excellent | awful  | important | wonderful | nasty | 

     Some adjectives give a specific opinion. We only use these adjectives
     to describe particular kinds of noun:
     - Food:
       + tasty
       + delicious
     - Furniture, buildings:
       + comfortable
       + uncomfortable
     - People, animals:
       + clever
       + friendly
       + intelligent

     We usually put a general opinion in front of a specific opinion:
     - Nice tasty soup.
     - A nasty uncomfortable armchair.
     - A lovely intelligent animal.

     Usually we put an adjective that gives an opinion in front of an adjective
     that is descriptive:
     - a nice red dress;
     - a silly old man;
     - those horrible yellow curtains

     We often have two adjectives in front of a noun:
     - a handsome young man;
     - a big black car;
     - that horrible big dog

     Sometimes we have three adjectives, but it is unusual:
     - a nice handsome young man;
     - a big black American car;
     - that horrible big fierce dog

     It is very unusual to have more than three adjectives.

     Adjectives usually come in this order:

     | 1       | 2        |    3 |     4 |   5 |      6 |           7 |        8 |
     |---------+----------+------+-------+-----+--------+-------------+----------|
     | General | Specific | Size | Shape | Age | Colour | Nationality | Material |
     | opinion | opinion  |      |       |     |        |             |          |

     We use some adjectives only after a link verb:

     | afraid | alive | alone | asleep | content | glad |
     |--------+-------+-------+--------+---------+------|
     | ill    | ready | sorry | sure   | unable  | well |

     Some of the commonest -ed adjectives are normally used only after a
     link verb:
     - annoyed;
     - finished;
     - bored;
     - pleased;
     - thrilled

     We say:
     - Our teacher was ill.
     - My uncle was very glad when he heard the news.
     - The policeman seemed to be very annoyed.

     A few adjectives are used only in front of a noun:
     | north | northern | countless  | eventful |
     | south | southern | occasional | indoor   |
     | east  | eastern  | lone       | outdoor  |
     | west  | western  |            |          |

     We say:
     - He lives in the eastern district.
     - There were countless problems with the new machinery.

**** comparative and superlative adjectives
     We use comparative adjectives to describe people and things:
     - This car is certainly better but it's much more expensive.
     - I'm feeling happier now.
     - We need a bigger garden.

     We use than when we want to compare one thing with another:
     - She us two years older than me.
     - New York is much bigger than Boston.
     - He is a better player than Ronaldo.
     - France is a bigger country than Britain.

     When we want to describe how something or someone changes we can
     use two comparatives with and:
     - The balloon got bigger and bigger.
     - Everything is getting more and more expensive.
     - Grandfather is looking older and older.

     We often use the with comparative adjectives to show that one
     thing depends on another:
     - When you drive faster it is more dangerous.
       + The faster you drive, the more dangerous it is.
     - When they climbed higher it got colder.
       + The higher they climbed, the colder it got.

     Superlative adjectives:

     We use the with a superlative:
     - It was the happiest day of my life.
     - Everest is the highest mountain in the world.
     - That's the best film I've seen this year.
     - I have three sisters, Jan is the oldest and Angela is the youngest.

**** intensifiers

     We use words like very, really and extremely to make adjectives
     stronger:
     - It's a very interesting story.
     - Everyone was very excited.
     - It's a really interesting story.
     - Everyone was extremely excited.

     We call these words intensifiers. Other intensifiers are:

     | amazingly  | exceptionally | incredibly |
     |------------+---------------+------------|
     | remarkably | particularly  | unusually  |

     We also use enough to say more about an adjective, but enough comes
     after its adjective:
     - If you are seventeen you are old enough to drive a car.
     - I can't wear those shoes. They're not big enough.

     Intensifiers with strong adjectives:

     Strong adjectives are words like:

     | enormous, huge             | very big    |
     |----------------------------+-------------|
     | tiny                       | very small  |
     |----------------------------+-------------|
     | brilliant                  | very clever |
     |----------------------------+-------------|
     | awful, terrible,           |             |
     | disgusting, dreadful       | very bad    |
     |----------------------------+-------------|
     | certain                    | very sure   |
     |----------------------------+-------------|
     | excellent, perfect, ideal, |             |
     | wonderful, splendid        | very good   |
     |----------------------------+-------------|
     | delicious                  | very tasty  |

     We do not use very with these adjectives.
     With strong adjectives, we normally use intensifiers like:

     | absolutely | completely    | totally      | utterly |
     |------------+---------------+--------------+---------|
     | really     | exceptionally | particularly | quite   | 

     - The film was absolutely awful.
     - He was an exceptionally brilliant child.
     - The food smelled really disgusting.

     Advanced:

     Some intensifiers go with particular adjectives depending on
     the meaning of the adjective:

     - Iâm afraid your wife is dangerously ill.
     - He was driving dangerously fast.
     - The car was seriously damaged.
     - Fortunately none of the passengers was seriously hurt.

     Some intensifiers go with particular adjectives. For example we
     use the intensifier highly with the adjectives successful,
     intelligent, likely and unlikely:

     - He was highly intelligent.
     - Sheâs a highly successful businesswoman

     but we do not say:

     - We had a highly tasty meal.
     - That is a highly good idea.

     We use the intensifier bitterly with the adjectives disappointed,
     unhappy and cold:

     - I was bitterly unhappy at school.
     - We were bitterly disappointed to lose the match.
     - It can get bitterly cold in winter.

     Activities:

     - My mother was a highly successful tennis player in her time. She
       won loads of tournaments.
     - The car was so seriously damaged in the  accident that it had to be
       scrapped.
     - Tom was deliriously happy when he heard he'd become a grandfather.
       He can't stop smiling.
     - I was deeply disappointed by my team's performance last night.
       It was terrible.
     - The restaurant was shut down when three people fell gravely ill
       after eating there.
     - Esther's desperately unhappy working at the bank so she's looking
       for a new job.
     - In order to be a successful detective, you need to be keenly
       observant.
     - Have I met Maria's new boyfriend? No, but I've seen him and he's
       drop-dead gorgeous!
     - Professor Jones was a universally popular head of department.
       Everyone was truly sorry to see him retire.
     - The government is firmly committed to reducing public debt, and
       is therefore bitterly opposed to any increases.  

     You need to use your dictionary to find what sort of nouns these
     intensifiers go with.
**** mitigators

     Mitigators are the opposite of intensifiers. When we want to make
     an adjective less strong we use these words:

     | fairly | rather | quite |
     |--------+--------+-------|

     - By the end of the day we were rather tired.
     - The film wasn't great but it was quite exciting.

     and in informal English: pretty

     - We had a pretty good time at the party.

     We call these words mitigators

     | WARNING                                                     |
     |-------------------------------------------------------------|
     | quite                                                       |
     |-------------------------------------------------------------|
     | When we use quite with a strong adjective it means the same |
     | as absolutely:                                              |
     | - The food was quite awful = The food was absolutely awful. |
     | - As a child he was quite brilliant = absolutely brilliant. |

***** Mitigators with comparatives:

      We use these words and phrases as mitigators:

      - a bit
      - just a bit
      - a little
      - a little bit
      - just a little bit
      - rather
      - slightly

      - She's a bit younger than I am.
      - It takes two hours on the train but it is a little bit longer by
	road.
      - This one is rather bigger (then the other one)

      We use a slightly and rather as mitigators with comparative
      adjectives in front of a noun:

      - This is a slightly more expensive model than that one.
      - This is a rather bigger one than the other.

***** Adjectives as intensifiers:

      We use some adjectives as intensifiers:

      - absolute
      - total - complete
      - utter - perfect
      - real

      We say:

      - He's a complete idiot.
      - They were talking utter nonsense.

***** Activities:

      - It was after midnight and the children were rather tired.
      - My first trip by airplane was quite exciting.
      - I enjoy skiing but it can be pretty exhausting.
      - My brother has become a fairly successful businessman.
      - Cinema tickets are a bit more expensive on Saturdays.
      - Julia is just a little older than her twin sister.

**** noun modifiers
     We often use two nouns together to show that one thing is a part
     of something else:

     - the village church
     - the car door
     - the kitchen window
     - the chair leg
     - my coat pocket
     - London residents

     Warning!
     We do not use a possessive form for these things. We do not talk
     about:

     - the car's door
     - the kitchen's window
     - the chair's leg

     We can use noun modifiers to show what something is made of:

     - a gold watch
     - a leather purse
     - a metal box

     We often use noun modifiers with nouns ending in -er and -ing:

     - an office worker
     - a jewelry maker
     - a potato peeler
     - a shopping list
     - a swimming lesson
     - a walking holiday

     We use measurements, age or value as noun modifiers:

     - a thirty kilogram suitcase
     - a two minute rest
     - a five thousand euro platinum watch
     - a fifty kilometer journey

     We often put two nouns together and reader/listener have work out
     what they mean. So:

     - an ice bucket = a bucket to keep ice in
     - an ice cube = a cube made of ice
     - an ice breaker = a ship which breaks ice
     - the ice age = the time when much of the Earth was covered in ice

     Sometimes we find more than two nouns together:

     London office worker; grammar practice exercises

***** Position of noun modifiers
      Noun modifiers come after adjectives

      - The old newspaper seller
      - A tiring fifty kilometer journey

*** Adverbials [100%]
**** Why do we use adverbials
     We use adverbs to give more information about the verb.

     We use adverbials of manner to say how something happens or how
     something is done:

     - The children were playing happily.
     - He was driving as fast as possible.

     We use adverbials of place to say where something happens:

     - I saw him there.
     - We met in London.

     We use adverbials of time to say when or how often something happens:

     - They start work at six thirty.
     - They usually go to work by bus.

     We use adverbials of probability to show how certain we are about
     something:

     - Perhaps the weather will be fine.
     - He is certainly coming to the party.

**** how we make adverbials
      
***** An adverbial can be an adverb:

      - He spoke angrily.
      - They live here.
      - We will be back soon.

***** or an adverb with an intensifier:

      - He spoke really andgry.
      - They live just here.
      - We will go quite soon.
      - We will go as soon as possible.

***** or a phrase with a preposition:

      - He spoke in an angry voice.
      - They live in London.
      - We will go in a few minutes.

***** Activities:

      - They behaved very badly.
      - He went upstairs.
      - They stopped at the end of the street.
      - The water rose extremely quickly.
      - He's on the phone.
      - It opens automatically.

**** where do adverbials go in a sentence
***** We normally put adverbials /after the verb/:

      - He spoke angrily.
      - They live just here.
      - We will go in a few minutes.

***** or after the /object/ or /complement/:

      - He opened the door quietly.
      - She left the money on the table.
      - We saw our friends last night.
      - You are looking tired tonight.

***** But adverbials of /frequency/ (how often) usually come /in front
      of/ the main verb:

      - We usually spent our holidays with our grandparents.
      - I have never seen William at work.

***** But if we want to emphasise an adverbial we can put it at the
      /beginning/ of a clause:

      - Last night we saw our friends.
      - In a few minutes we will go.
      - Very quietly he opened the door.

***** If we want to emphasise an /adverb of manner/ we can put it
      in front of the main verb:

      - He quietly opened the door.
      - She had carefully put the glass on the shelf.

***** Activities

      - The builders are working =really slow=.
	When will they be finished?
      - Liam lived in Paris for a year so he speaks French
	=quite well=.
      - We're good friends with our neighbours.
	We =often invite= them for dinner.
      - =In my coat pocket= you'll find a bottle of tablets.
	Can you go and get them?
      - The minister =angrily refused= to answer any more of the
	journalists' questions.
      - We can still catch the train but we have to leave
	=right now=. Come on!
      - Sorry, I can't see you =this weekend=.
	I'm studying for my exams.
      - I don't =usually watch= football on TV, except
	really important things like the World Cup.
      - There is plenty of food and drink =in the kitchen=.
	Please help yourself.
      - Hillary went into a cafe and =quickly ordered= a cup of coffee.
**** adverbs of manner
     Adverbs of manner are usually formed from adjectives by adding -ly:

     - bad > badly
     - quiet > quietly
     - recent > recently
     - sudden > suddenly

     but there are sometimes changes in spelling:

     - easy > easily
     - gentle > gently

     If adjective ends in -ly we use the phrase in a ... way to
     express manner

     - Silly > He behaved in a silly way.
     - Friendly > She spoke in a friendly way.

     A few adverbs of manner have the same form as the adjective:

     - They all worked hard.
     - She usually arrives late.
     - I hate driving fast.

     *Note:* /hardly/ and /lately/ have different meanings:

     - He could hardly walk = It was /difficult/ for him to walk.
     - I haven't seen John lately = I haven't seen John /recently/.

     We often use phrases with like as adverbials manner:

     - She slept like a baby.
     - He ran like a rabbit.

***** Adverbs of manner and link verbs
      We very often use /adverbials/ with /like/ after link verbs:

      - Her hands felt like ice.
      - It smells like fresh bread.

      But we do not use other adverbials of manner after link verbs.
      We use adjectives instead:

      - They looked +happily+ happy.
      - That bread smells +deliciously+ delicious.

      Activities:

      - Do you have to drive so fast. You're making me nervous.
      - Have you ever eaten frogs' legs? They say it tastes like chicken.
      - I lived in Cairo for more than ten years. I know it like the
	back of my hand.
      - Is Mary angry with me? She didn't say hello in a very friendly way.
      - Let's get the later bus, at 10.45. We don't want to arrive to the
	airport too early.
      - This milk doesn't smell very good. How long has it been in the
	fridge?
      - Why he dancing in that silly way? Is he trying to be funny?
      - You can always tell what Rod is thinking. You can read him like
	a book.
      - You look very bad! What time did you go to bed last night?
      
**** adverbials of place
     
     We use adverbials of place to describe:

***** Location
      We use prepositions to talk about where someone or something is.

      - He was standing by the table
      - You'll find it in the cupboard.
      - Sign your name here - at the bottom of the page.

      We use a noun with 's with a *singular noun* to show possession:

      - We are having a party at John's house.
      - Michael drove his friend's car.

      We use s' with a *plural noun* ending with -s:

      - This is my parents' house.
      - Those are ladies' shoes.

      We use *prepositions* to talk about /where/ someone or something is:

       | above  | among   | at    | behind     | below   | beneath    |
       | beside | between | by    | in         | inside  | in between |
       | near   | next to | on    | opposite   | outside | over       |
       | round  | through | under | underneath |         |            |

       - He was standing /by the table/.
       - She lives in a village /near Glasgow/.
       - You'll find it /in the clipboard/.

       We use /phrases/ with /of/ as a prepositions:

       | at the back of | at the top of   | at the bottom of | at the end of    |
       | on top of      | at the front of | in front of      | in the middle of |

       - There were some flowers /in the middle of the table/.
       - Sign your name here - /at the bottom of the page/.
       - I can't see. You're standing in front of me.

       We can use *right* as an /intensifier/ with some of these prepositions:

       - He was standing right next to the table.
       - There were some flowers right in the middle of the table.
       - There's a wood right behind our house.

       Activities:

       - 'Come and sit here beside me', she said, and patted the seat.
       - Excuse me, is there a post office near here?
       - From the top of the building the people below looked like insects.
       - Hang your jacket behind the door.
       - He pushed through the crowd to get to the front.
       - He was born in Kingston, Jamaica.
       - His surname begins with 'A', so it comes above mine in the list.
       - It's very hot today, so I decided to stay inside.
       - She poured the cream over her dessert.
       - She was chosen for the job among more than 100 applicants.
       - The cinema is just round the corner. You can't miss it.
       - The dog waited patiently outside the room, waiting for the door
	 to open.
       - The town is halfway between London and Cambridge.
       - They sat opposite each other, staring into each others eyes.
       - You can't see the river because it is underneath the city.

       - The changing rooms are at the back of the shop.
       - Their houses on the top of the hill;
	 it's got a wonderful view over the city.
       - Turn right at the end of the street, and you'll see the station
	 in front of you.
       - There's a white line in the middle of the road -
	 you can't overtake.

***** Direction
      We use adverbials to talk about the direction where someone or
      something is moving.

      - Walk past the bank and keep going to the end of the street.
      - The car door is very small so it's difficult to get into.

      We also use prepositional phrases to talk about direction:

      | across | along  | back | back to | down | into    |
      | onto   | out of | past | through | to   | towards | 

      - She ran out of the house.
      - Walk past the bank and keep going to the end of the street.

      We also use adverbs and adverb phrases for place and direction:

      | abroad     | away    | anywhere  | downstairs | downwards |
      | everywhere | here    | indoors   | inside     | nowhere   |
      | outdoors   | outside | somewhere | there      | upstairs  |

      - I would love to see Paris. I've never been there.
      - The bedroom is upstairs.
      - It was so cold that we stayed indoors.

      We often have a preposition at the end of a clause:

      - This is the room we have our meals in.
      - I lifted the carpet and looked underneath.

***** Distance
      We use adverbials to show how far things are:

      - Birmingham is 250 kilometers from London.
      - We were in London. Birmingham was 250 kilometers away.

     Activities:

      - He's going to Germany next week.
      - Please put all bottles in the recycling bin.
      - It's only another two miles to the next petrol station.
      - The plane had to fly through a heavy storm.
      - How fare are we from the mainland?
      - This house is in a very nice part of town.

**** adverbials of time
     We use adverbials of time to say:
***** when something happened:
      - I saw Mary yesterday.
      - She was born in 1978.
      - I will see you later.
      - There was a storm during the night.
****** time and dates
       We use phrases with prepositions a time adverbials:
******* We use /at/ with:
	- clock times:
	  - at seven o'clock
	  - at nine thirty
	  - at fifteen hundred hours
	- and in these phrases:
	  - at night
	  - at the weekend
	  - at Christmas
	  - at Easter
******* We use /in/ with:
	- seasons of the year
	  - in spring/summer/autumn/winter
	  - in the spring/summer/autumn/winter
	- years an centuries:
	  - in 2009
	  - in 1998
	  - in the twentieth century
	- months:
	  - in January/February/March
	- parts of the day:
	  - in the morning
	  - in the afternoon
	  - in the evening
******* We use /on/ with:
	- days:
	  - on Monday/Tuesday/Wednesday etc.
	  - on Christmas day
	  - on my birthday
	- dates:
	  - on the thirty of July
	  - on June 15th
******* We use adverb ago with the past simple to say how long before
	the time of speaking something happened:
	- I saw Jim about three weeks ago.
	- We arrived few minutes ago.
******* We can put time phrases together:
	- We will meet next week at six o'clock on Monday.
	- I heard a funny noise at about eleven o'clock last night.
	- It happened last week at seven o'clock on Monday night.
******* NOTE
******** We say at night when we are talking about all of the night:
	 - When there is no moon it is very dark at night.
	 - He sleeps during the day and works at night.
******** But we say in the night when we are talking about a short
	 time during the night:
	 - He woke up twice in the night.
	 - I heard a funny noise in the night.

***** for how long:
      - We waited all day.
      - They have lived here since 2004.
      - We will be on holiday from July 1st until August 3rd.
****** we use /for/ to say how long:
       - We have been waiting for twenty minutes.
       - They lived in Manchester for fifteen years.
****** we use /since/ with the present perfect or the past perfect
       to say /when something started/
       - I have worked here /since December/.
       - They had been watching /since seven o'clock in the morning/.
****** we use /from ... to(until)/ to say when something /starts/ and
       /finishes/:
       - They stayed with us /from Monday to Friday/.
       - We will be on holiday /from the sixteenth until the twentieth/.

***** how often (frequency):
      - They usually watched television in the evening.
      - We sometimes went to work by car.
****** The commonest adverbials of frequency are:
       | always | never  | normally  | occasionally | often |
       | rarely | seldom | sometimes | usually      |       |
	
****** We usually put adverbials of frequency in /front/of the main verb:

       - We often spend Christmas with friends.
       - I had never enjoyed myself so much.

       but usually come after the verb be:

       - He was always tired in the evening.
       - We are never late for work.
	
****** We use the adverbial /a lot/ to mean /often/ or /frequently/.
       It comes at the end of the clause:

       - We got to the cinema a lot.

       but /before/ another time adverbial:

       - We got to the cinema a lot at the weekend.
	
****** We use /much/ with a /negative/ to mean not often:

       - We don't go out much. (= We don't go out often)

****** We use /how often/ or /ever/ to ask questions about frequency.
       How often comes at the beginning of the clause:

       - How often do you go to the cinema?
       - How often have you been here?
	
****** /ever/ comes *before* the main verb:

       - Do you _ever go_ to the cinema at the weekend?
       - Have you _ever been_ here?
	
****** Longer frequency phrases, like /every year/ or /three times a day/
       usually come at the end of the clause:

       - I have an English lesson twice a week.
       - She goes to see her mother every day.
	
****** Activities:

       - I use my mobile phone a lot.
       - He is usually very punctual.
       - Have you ever seen a shooting star?
       - They go to the theater every week.
       - How often do you clean your car?
       - We seem to eat out a lot these days.
       - I visit my grandmother once a fortnight.
       - It rarely rains in August.
       - She doesn't drink much.

***** We often use a noun phrase as a time adverbial:
      | yesterday | last week/month/year | one day/week/month       | last Saturday      |
      | tomorrow  | next week/month/year | the day after tomorrow   | next Friday        |
      | today     | this week/month/year | the day before yesterday | the other day/week |
      
***** Already, still, yet and no longer
       
****** We use /still/ to show that something *continues up to the time*
       in the past present or future. It goes in the front of the main verb:

       - The children _still enjoyed_ playing games.
       - They are _still living_ next door.
       - We will _still be_ on holiday.

       or *after* the present simple or the past simple or be:

       - Her grandfather _is still_ alive.
       - They _were still_ unhappy.

****** We use /already/ to show that something has happened *sooner* than
       it was expected to happen. Like /still/ it comes before the main verb:

       - The car is OK. I've _already fixed_ it.
       - It was early but they were _already sleeping_.

       or *after* the present simple or past simple of the verb be:

       - It was early but we _were already_ tired.
       - We _are already_ late.

****** We use /yet/ in a negative or interrogative clause, usually with
       perfective aspect (especially in British English), to show that
       something has *not happened* by a particular time. *Yet* comes
       at the end of the sentence.

       - It was late, but they hadn't arrived *yet*.
       - Have you fixed a car *yet*?
       - She won't have sent the email *yet*.

**** adverbials of probability
     We use adverbials of probability to show *how certain we are* about
     something. The most frequent adverbials of probability are:

     | certainly | definitely | maybe   | possibly |
     | clearly   | obviously  | perhaps | probably |

     /maybe/ and /perhaps/ usually come at the *beginning* of the clause:

     - Perhaps the weather will be fine.
     - Maybe it won't rain.

     *Other* adverbs of possibility usually come in *front* of the
     *main verb*:

     - He is _certainly coming_ to the party.
     - Will they _definitely be_ there?
     - We will _possibly come_ to England next year.

     *but* after /am, is, are, was, were/:
     - They _are definitely_ at home.
     - She _was obviously_ very surprised.

     Activities:

     - Perhaps you could talk to him.
     - The accident was clearly my fault.
     - They may possibly cancel the event.
     - Have you definitely decided to quit?
     - They will certainly win the election.
     - Maybe we should start again.
     - He said he would definitely be there.
     - I can't possibly refuse.

**** comparative adverbs
     We can use comparative adverbs to show *change* of to make
     comparisons:

     - I forget things *more often* nowadays.
     - She began to speak *more quickly*.
     - They are working *harder* now.

     We often use /than/ with comparative adverbs:

     - I forget things more often *than* I used to.
     - Girls usually work harder *than* boys.
      
***** Intensifiers
      We use these words and phrases as intensifiers with these
      patterns:

      | much         | far         | a lot      | quite a lot |
      | a great deal | a good deal | a good bit | a fair bit  |

      I forget things *much* more often nowadays.

***** Mitigators
      We use these words and phrases as mitigators:

      | a bit        | just a bit        | a little |
      | a little bit | just a little bit | slightly |

      She began to speak *a bit* more quickly.
      
**** superlative adverbs
     We can use superlative adverbs to make comparisons:

     - His ankles hurt badly, but his knees hurt *worst*.
     - It rains *most often* at the beginning of the year.


***** Intensifiers
      When we intensify a superlative adverb we often use *the* in
      front of the adverb, and we use these words and phrases as
      intensifiers:
      | easily | much   |
      | far    | by far |

      - I buy books most often online now. It's easier.
      - That's by far the worst film I've ever seen!
      - Going by train is much the best option, I think.
      - He's easily the best goalkeeper in the league.
      - Disaster struck when we least expected it.
*** Nouns
**** Count nouns
     Count nouns have two forms: *singular* and *plural*.

     Singular count nouns refer to one person or thing:
     - a /book/
     - a /teacher/
     - a /wish/
     - an /idea/

     Plural count nouns refer to more than one person or thing:
     - /books/
     - /teachers/
     - /wishes/
     - /ideas/

***** Singular count nouns
      Singular count nouns *cannot be used alone*. They must
      have a _determiner_:
      - the book
      - that English teacher
      - a wish
      - my latest idea

***** Plural forms
      We usually add /-s/ to make a plural noun:
      - book > books
      - school > schools
      - friend > friends

      We add /-es/ to nouns ending in /-ss/; /-ch/; /-s/; /-sh/; /-x/
      - class > classes
      - watch > watches
      - gas > gases
      - wish > wishes
      - box > boxes

      When a noun ends in a *consonant* and /-y/ we make the plural
      in /-ies/
      - lady > ladies
      - country > countries
      - party > parties

      _but_ if a noun ends in a *vowel* and /-y/ we simply add /-s/:
      - boy > boys
      - day > days
      - play > plays

      Some common nouns have *irregular plurals*:
      - man > men
      - woman > women
      - child > children
      - foot > feet
      - person > people

      Plural count nouns do *not* have a /determiner/ then they refer
      to people or things as a /group/:
      - Computers are very expensive.
      - Do you sell old books?

***** Activities
      - The fairy told the girl she could make three wishes.
      - I think her children watch far too much television.
      - Look! The monkey has just stolen that man's hat!
      - It's difficult to be a parent these days.
      - Why do buses always come in threes?
      - Does anyone know the way to the station?
      - Women are usually shorter than men.
      - A lot of lorries use this street.
      - He's the sort of person you can trust.
      - I can hear something in the roof. Have you got mice?
      - The house they wanted to buy has been sold.
      - The most interesting countries I have visited are in Asia.

**** Uncount nouns
     Some nouns in English are *uncount* nouns.
     We do use uncount nouns in the plural and we do not use
     them with the indefinite article, a/an.
     - We ate a lot of food.
     - We bought some new furniture.
     - That's useful information.

     We can use *some quantifiers* with uncount nous:
     - He gave me *some useful advice*.
     - They gave us a *lot of information*.

     Uncount nouns often refer to:
     - *Substances*:
       - food;
       - water;
       - wine;
       - salt;
       - bread;
       - iron
     - *Human feelings or qualities*:
       - anger;
       - cruelty;
       - happiness;
       - honesty;
       - pride
     - *Activities*:
       - help;
       - sleep;
       - travel;
       - work
     - *Abstract ideas*:
       - beauty;
       - death;
       - fun;
       - life


***** Common uncount nouns
      There are some common nouns in English, like /accommodation/,
      which are count nouns even though they have plurals in other
      languages:

      | advice    | baggage | equipment | furniture | homework | information |
      | knowledge | luggage | machinery | money     | news     | traffic     |

      - Let me give you *some advice*.
      - *How much luggage* have you got?

      If we want to make these things countable, we use *expressions* like:

      | a piece of... | a pieces of... | a bit of... |
      | bits of...    | an item of...  | items of... |

      - Let me give you *a piece of* advice.
      - That's *a* useful *piece of* equipment.
      - We bought *a few bits* of furniture for the new apartment.
      - She had six separate *items of* luggage.

      *but* we do not use /accommodation/, /money/ and /traffic/ in this way.

***** Activities

      - I'm sorry I'm late. I got stuck in traffic.
      - I like camping, but you have to take a lot of equipment.
      - For further information please contact your local council.
      - Hi didn't make much money, but hi liked the job.
      - The room looks empty; there are only a few pieces of furniture.
      - If you want my advice, I'd sell it as soon as possible.
      - That's the best news I've heard for ages!
      - You can't got outside until your homework is finished.
      - I'm afraid your luggage is over the 20kg limit.
      - Her knowledge in this area is very impressive.

**** Common problems
      
***** Uncount nouns used as count nouns
      Although substanses are usually *uncount* nouns...
      - Would you like some *cheese*?
      - *Coffee* keeps me awake at night.
      - *Wine* makes me sleep.

      ...they can be *also* used as *count* nouns:

      | I'd like a coffe please.              | = | I'd like a [cup of] coffee.                      |
      | May I have a white wine.              | = | May I have a [glass of] wine.                    |
      | They sell a lot of coffees.           | = | They sell a lot of [different kinds of] coffee.  |
      | I prefer white wine to red.           | = | I prefer [different kinds of] white wine to red. |
      | They had over twenty cheeses on sale. | = | They have over twenty [types of] cheese on sale. |
      | This is an excellent soft cheese.     | = | This [kind of] soft cheese is excellent.         |

***** Some nouns have both a count and uncount form:
      - We should always have *hope*.
      - George had *hopes* of promotion.

      - *Travel* is a great teacher.
      - Where did you go on your *travels*?

***** Nouns with two meanings
      Some nouns have *two meanings*, one count and the other non count:
      - His life was in *danger*.
      - There is a serious *danger* of fire.

      - Linguistics is the study of *language*.
      - Is English a difficult *language*?

      - It's made of *paper*.
      - The Times is an excellent *paper*.

      Other words like this are:

      | business | death | industry | marriage | power | property |
      | tax      | time  | victory  | use      | work  |          |

***** Uncount nouns that end in /-s/
      Some uncount nouns end in /-s/ so they like plurals even though
      they are singular nouns.

      These nouns generally refer to:

      | Subjects of study | mathematics, physics, economics |
      | Activities        | gymnastics, athletics           |
      | Games             | cards, darts, billiards         |
      | Diseases          | mumps, measles, rabies          |

      - Economics is a very difficult subject.
      - Billiards is easier than pool or snooker.

***** Group nouns
      Some nouns like /army/, refer to groups of people, animals or
      things, we can use them *either* as singular nouns *or* as
      plural nouns:

      - My family is very dear to me.
      - I have a large family. They are very dear to me.
      - The government is very unpopular.
      - The government are always changing their minds.

      Sometimes we think of the group as a single thing:

      - The audience always enjoys the show.
      - The group consists of two men and three women.

      Sometimes we think of the group as several individuals:

      - The audience clapped their hands.
      - The largest group are the boys.

      The names of many organisations and teams are also group nouns,
      but they are *usually plural* in spoken English:

      - Barcelona are winning 2-0.
      - The _United Oil Company_ are putting prices up by 12%.

***** Two-part nouns
      A few plural nouns, like /binoculars/, refer to things that
      have two parts.

      | glasses  | jeans    | knickers | pincers    | pants  | pliers   |
      | pyjamas  | scissors | shorts   | spectacles | tights | trainers |
      | trousers | tweezers |          |            |        |          |

      - These *binoculars* were very expensive.
      - The trousers are too long.

      To make it clear we are talking about *one* of these items,
      we use /a pair of/...

      - I need *a new pair of spectacles*.
      - I've bought *a pair of* blue jeans.

      If we want to talk about more than one, we use /pairs of/...

      - We've got *three pairs of* scissors, but they are all blunt.
      - I always carry *two pairs of* binoculars.

***** Activities

      - Tea is grown in Sri Lanka.
      - Do you eat cheese before or after your meal?
      - It was a difficult marriage.
      - That's a very interesting property. How much is it?
      - It's not easy to run a business and raise a family.
      - Physics is not my best subject.
      - Can you lend me some scissors?
      - I need to buy some new trousers.

**** Proper nouns
     Names of people, places and organisations are called *proper nouns*.
     We spell proper nouns with a *capital letter*:

     - Mohammed Ali
     - Birmingham
     - China
     - Oxford University
     - the United Nations
	
     We use capital letters for *festivals*:

     - Christmas
     - Deepawali
     - Easter
     - Ramadan
     - Thanksgiving

     We use capital letter for someone's *title*:

     - I was talking to *Doctor* Wilson recently.
     - Everything depends on *President* Obama.

     When we give the names of books, films, plays and paintings we
     use capital letters for the *nouns*, *adjectives* and *verbs* in
     the name:

     - I have been reading 'The Old Man and the Sea'.
     - Beatrix Potter wrote 'The Tail of Peter Rabbit'.
     - You can see the Mona Lisa in the Louvre.

     Sometimes we use a person's name to refer to something they
     have *created*:

     - Recently *a Van Gogh* was sold for fifteen million dollars.
     - We were listening to *Mozart*.
     - I'm reading *an Agatha Christie*.


***** Activities:

      - In which month does Ramadan fall this year?
      - She studied engineering at Imperial College.
      - He served in the United Nations Peacekeeping Force.
      - Is it true you can see the Great Wall from space?
      - There are some wonderful Goyas in the Prado.
      - Have you ever read 'The Tale of Two Cities'?

*** Verbs [50%]
    Verbs in English have four basic parts:

    | Base form | -ing form | Past tense | Past participle |
    |-----------+-----------+------------+-----------------|
    | work      | working   | worked     | worked          |
    | play      | playing   | played     | played          |
    | listen    | listening | listened   | listened        |


    Most verbs have past tense and past participle in /-ed/ (worked,
    played, listened). But many of the most frequent verbs are irregular.

**** Irregular verbs
     Most verbs have past tense and past participle in /-ed/ (worked,
    played, listened). But many of the most frequent verbs are irregular.

    | Base form  | Past tense | Past participle |
    |------------+------------+-----------------|
    | be         | was/were   | been            |
    | begin      | began      | begun           |
    | break      | broke      | broken          |
    | bring      | brought    | brought         |
    | build      | built      | built           |
    | buy        | bought     | bought          |
    | choose     | chose      | chosen          |
    | come       | came       | come            |
    | cost       | cost       | cost            |
    | cut        | cut        | cut             |
    | do         | did        | done            |
    | draw       | drew       | drawn           |
    | drive      | drove      | driven          |
    | eat        | ate        | eaten           |
    | feel       | felt       | felt            |
    | find       | found      | found           |
    | get        | got        | got             |
    | go         | went       | gone            |
    | have       | had        | had             |
    | hear       | heard      | heard           |
    | hold       | held       | held            |
    | keep       | kept       | kept            |
    | know       | knew       | known           |
    | leave      | left       | left            |
    | lead       | led        | led             |
    | let        | let        | let             |
    | lie        | lay        | lain            |
    | lose       | lost       | lost            |
    | make       | made       | made            |
    | mean       | meant      | meant           |
    | meet       | met        | met             |
    | pay        | paid       | paid            |
    | put        | put        | put             |
    | say        | said       | said            |
    | see        | saw        | seen            |
    | sell       | sold       | sold            |
    | send       | sent       | sent            |
    | set        | set        | set             |
    | sit        | sat        | sat             |
    | speak      | spoke      | spoken          |
    | spend      | spent      | spent           |
    | stand      | stood      | stood           |
    | take       | took       | taken           |
    | teach      | taught     | taught          |
    | tell       | told       | told            |
    | think      | thought    | thought         |
    | understand | understood | understood      |
    | wear       | wore       | worn            |
    | win        | won        | won             |
    | write      | wrote      | written         |
     

**** Question forms
     We make questions by:

***** moving an auxiliary to the front of the clause:
      | Everybody /is/ watching                | >> | /Is/ everybody watching?                |
      | They /had/ worked hard                 | >> | /Had/ they worked hard?                 |
      | He'/s/ finished work                   | >> | /Has/ he finished work?                 |
      | Everybody /had/ been working hard      | >> | /Had/ everybody been working hard?      |
      | He /has/ been singing                  | >> | /Has/ he been singing?                  |
      | English /is/ spoken all over the world | >> | /Is/ English spoken all over the world? |
      | The windows /have/ been cleaned        | >> | /Have/ the windows been cleaned?        |

***** by moving a modal to the front of the clause:
      | They /will/ come                 | >> | /Will/ they come?                 |
      | He /might/ come                  | >> | /Might/ he come?                  |
      | They /will/ have arrived by now  | >> | /Will/ they have arrived by now?  |
      | She /would/ have been listening  | >> | /Would/ she have been listening?  |
      | The work /will/ be finished soon | >> | /Will/ the work be finished soon? |
      | They /might/ been invited to the |    | /Might/ they been invited to the  |
      | party                            | >> | party?                            |

***** The *present simple* and the *past simple* have *no* auxiliary. We
      make questions by *adding* the auxiliary _do//does_ to the present
      simple or _did_ for the past simple:
      | They live here    | >> | /Do/ they live here?   |
      | John live/s/ here | >> | /Does/ John live here? |
      | Everybody laughed | >> | /Did/ everybody laugh? |

***** Activities
      - Was she expecting you?
      - Have you finished your meal?
      - Are you waiting for someone?
      - Has he been working?
      - Is everyone having a good time?
      - Do you need a hand?
      - Had you spoken to him?
      - Does she mind?
      - Will you hold this for me?
      - Would they have gone?
      - Did they suspect anything?
      - Could we have done anything?


**** Verb phrases
     The verb phrase in English has the following forms:

***** a main verb
      | We        | are     | here.         |
      | I         | like    | it.           |
      | Everybody | saw     | the accident. |
      | We        | laughed |               | 

      The verb may be in the present tense /(are, like)/ or the past tenses
      /(saw, laughed)/. A verb phrase with only a main verb expresses
      *simple aspect*
       
***** an *auxiliary verb ("be")* and a main verb in /-ing/ form
      | Everybody | is   | watching |
      | We        | were | laughing |

      A verb phrase with "be" and /-ing/ expresses *continuous aspect*.

***** an *auxiliary verb ("have")* and a *main verb with past participle*
      | They      | have | enjoyed  | themselves. |
      | Everybody | has  | worked   | hard.       |
      | He        | had  | finished | work.       |

      A verb with "have" and the past participle expresses *perfect aspect*.
      A verb with /have//has/ expresses *present perfect*, and a verb with
      /had/ expresses *past perfect*.

***** an *auxiliary verb ("have" + "been")* and a *main verb in the /-ing/ form*
      | Everybody | has been | working  | hard. |
      | He        | had been | singing. |       |

      A verb with "have" and "been" and the present participle expresses
      *perfect continuous aspect*. A verb with /have//has/ expresses
      *present perfect continuous*, and a verb with /had/ expresses
      *past perfect continuous*.

***** a *modal verb* (can, could, may, might, must, shall, should, will, would)
      and a *main verb*
      | They | will  | come. |
      | He   | might | come. |

***** We can use *modal verbs* with the auxiliaries *"be"*, *"have"* and
      *"have been"*
      | They | will  | be        | listening. |
      | He   | might | have      | arrived.   |
      | She  | must  | have been | listening. |

***** Activities
      - He has been working very hard lately.
      - You should have gone to the doctor.
      - I may see you on Thursday.
      - We will be thinking about you.
      - I have seen you somewhere before.
      - It is raining again.


**** Present tense
     There are two tenses in English - past and present.
     The present tenses in English are used:
     - to talk about the *present*
     - to talk about the *future*
     - to talk about the *past* when we are telling a story in *spoken*
       English or when we are summarizing a book, film, play etc.

       There are *four* present tense forms in English:

       | Tense                      | Form                |
       |----------------------------+---------------------|
       | Present simple             | I work              |
       | Present continuous         | I am working        |
       | Present perfect            | I have worked       |
       | Present perfect continuous | I have been working | 

     We use these forms:
     - to talk about the *present*:
       + He works at McDonald's. He *has worked* there for three months now.
       + He is working in McDonald's. He *has been working* there for three months now.
       + London *is* the capital of Britain.
     - to talk about the *future*:
       - The next train *leaves* this evening at 1700 hours.
       - I'll phone you when I *get* home.
       - He's *meeting* Peter in town this afternoon.
       - I'll come home as soon as I *have finished* work.
       - You will be tired out after you *have been working* all night.
     - We can use the present tenses to talk about the *past*...

     I have to go. The flight to Singapore leaves at 2.30.
     Are we going out this evening?
     So I say to him, 'What's your game, son?'
     He's having problems with the car again.
     Brando plays an ex-boxer standing up to corrupt bosses.
     I'm having a party at the weekend. Would you like to come?
     I'd like to see her face when she gets the news.
     McEwan handles the characters with his customary skill.
     When I have finished this job, we can celebrate.
     You look sad. Anything the matter?

***** present simple
      The present tense is the *base form* of the verb: I *work* in London.
      But the third person (she\he\it) adds an /-s/: She *work_s_* in London.

      *Use*
      We use present tense to talk about:

****** something that is true in the present:
       - I'*m* nineteen years old.
       - He *lives* in London.
       - I'*m* a student.

****** something that happens again and again in the present:
       - I *play* football every weekend.
       We use words like:
       *sometimes*
       *often*
       *always*
       *never* (adverbs of frequency)
       with the present tense:
       - I *sometimes* go to the cinema.
       - She *never* plays football.

****** something that is fixed in the future:
       - The school term *starts* next week.
       - The train *leaves* at 1945 this evening.
       - We *fly* to Paris next week.

****** Questions and negatives
       Look at these questions:

       - Do you play the piano?
       - Where do you live?
       - Does Jack play football?
       - Where does he come from?
       - Do Rita and Angela live in Manchester?
       - Where do they work?

       With the present tense, we use *do* and *does* to make questions.
       We use *does* for the third person (she/he/it) and we use *do* for
       others.

       We use *do* and *does* with question words like *where*, *what* and
       *why*:

       But look at these questions with who:

       - Who lives in London?
       - Who plays football at the weekend?
       - Who works at Liverpool City Hospital?

       Look at these sentences:

       - I like tennis, but I don't like football.
       - I don't live in London now.
       - I don't play the piano, but I play the guitar.
       - They don't work at the weekend.
       - John doesn't live in Manchester.
       - Angela doesn't drive to work. She goes by bus.

       With the present tense we use *do* and *does* to make negatives.
       We use /does not/ (*doesn't*) for the third person (she/he/it) and
       we use /do not/ (*don't*) for the others.

****** Activities

       - I do yoga twice a week.
       - The gates closes at 1015.
       - They usually pay the bills on time.
       - Swallows fly south for the winter.
       - The school holidays start on June 21st.
       - He's still a teenager.
       - The sun is 93 million miles from the Earth.
       - She's a lawyer.
       - The President speaks to the nation at 4p.m.
       - He never drinks beer.
       - They work in Liverpool
       - Water boils at 100

***** present continuous
      The present continuous tense is formed from the present tense of
      the verb *be* and the present participle (/-ing/ form) of a verb:

      *Use*
****** We use the present continuous tense to talk about the present:
******* for something that is happening *at the moment of speaking*:

	- I'm *just leaving* work. I'll be home in an hour.
	- Please be quiet. The children *are sleeping*.
******* for something which is happening before and after a given *time*:

	- At eight o'clock we *are usually having* breakfast.
	- When I get home the children *are doing* their homework.
******* for something which *we think is temporary*:

	- Michael is at university. He'*s studying* history.
	- I'*m working* in London for the next two weeks.
******* to show something is changing, growing or *developing*:

	- The children are *growing* quickly.
	- The climate is *changing* rapidly.
	- Your English is *improving*.
******* for something which happens *again and again*:

	- It's *always raining* in London.
	- They *are always arguing*.
	- George is great. He'*s always laughing*.

	*Note*: We normally use /always/ in this use.
****** We use the present continuous tense to talk about the *future*:
******* for something which has been *arranged* or *planned*:

	- Mary is *going* to a new school _next term_.
	- What are *you doing* _next week_?
****** We can use the present continuous to talk about the *past*:
******* When we are telling a *story*.
******* When we are summarizing the story from a book, film or play etc.
****** Activities

       - She's buying a new laptop on Thursday.
       - The summer are getting warmer.
       - He's doing a Master's in Glasgow.
       - ...and he's wondering what to do next when a man...
       - I see they're digging up the road again.
       - He's always making fun of me.
       - At quarter to nine I'm still sitting in traffic.
       - What kind of car is the ethical motorist driving these days?


***** present perfect
      The *present perfect* is formed from the present tense of the verb
      /have/ and the *past participle* of a verb.

      The present perfect *continuous* is formed with /have/has/ /been/
      and the /-ing/ form of the verb.

      *Use*
      We use the present perfect tense:
       
****** for something that started in the *past* and *continuous* in the
       *present*:
       - They'*ve been married* _for nearly fifty years_.
       - She *has lived* in Liverpool _all her life_.

       *Note*: We normally use the present perfect continuous for this:
       - She *has been living* in Liverpool all her life.
       - It's *been raining* for hours.

****** for something we have done *several times* in the *past* and
       *continue* to do:
       - I'*ve played* the guitar since I was a teenager.
       - He *has been written* three books and he is working on another one.
       - I'*ve been watching* that programme every week.

       We often use a clause with */since/* to show *when* something
       *started* in the *past*:
       - They'*ve been staying* with us _since last week_.
       - I *have worked* here _since I left school_.
       - I'*ve been watching* that programme every week _since it started_.

****** when we are talking about our *experience up to the present*:
       *Note*: We often use the adverb /ever/ to talk about experience
       up to the present:
       - My last birthday was the worst day I *have ever had*.

       *Note*: and we use /never/ for the negative form:
       - *Have you ever met* George?
       - Yes, but I'*ve never met* his wife.

****** for something that happened in the past but is important at
       the time of speaking:
       - I can't get in the house. I'*ve lost* my keys.
       - Teresa isn't at home. I think *she has gone* shopping.
       - I'm tired out. I'*ve been working* all day.

****** Particular usage

******* We use the present perfect of /be/ when someone has *gone* to a
	place and *returned*:
	A: Where *have you been*?
	B: I've *just been out to the supermarket*.

	A: *Have you ever been to* San Francisco?
	B: No, but *I've been* to Los Angeles.

******* But when someone *has not returned* we use */have/has/ gone*:
	A: Where is Maria? I haven't seen her for a weeks.
	B: *She's gone to* Paris for a week. _She'll back tomorrow_.

******* We often use the present perfect with *time adverbials* which
	refer to the *recent past*: /just, only just, recently/:
	- Scientists *have recently discovered* a new breed of monkey.
	- We *have just got* back from our holidays.

******* or adverbials which *include the present*:
	/ever/ (in questions);
	/so far, until now, up to now, yet/ (in questions and negatives)
	- *Have you* _ever_ *seen* a ghost?
	- *Where have you been* _up to now_?
	- *Have you finished* your homework _yet_?
	- No, _so far_ I'*ve* only *done* my history.

******* *WARNING*
	We do *not* use the present perfect with an *adverbial* which
	refers to *past time* which is *finished*:
	- I have seen that film +yesterday+.
	- We have just bought a new car +last week+.
	- +When we were children+ we have been to California.

	But we can use it to refer to a time which is *not* yet *finished*:
	- Have you seen Helen _today_?
	- We have bought a new car _this week_?


******* Activities
	- She's been married three times.
	- I don't think I've ever seen an eclipse.
	- I think he's broken his leg. We'd better phone for an ambulance.
	- You'll never guess who I've just met.
	- He's been working for the company since he graduated.
	- We haven't had any complaints so far.


**** Past tense
     There are two tenses in English - past and present.
     The past tense in English is used:
     - to talk about the *past*
     - to talk about *hypotheses* - things that are imagined rather
       than true
     - for *politeness*

     There are *four* past tense forms in English:

     | Tense                   | Form               |
     |-------------------------+--------------------|
     | Past simple             | I worked           |
     | Past continuous         | I was working      |
     | Past perfect            | I had worked       |
     | Past perfect continuous | I had been working | 

     We use these forms:
     - to talk about the *past*:
       + He *worked* at McDonald's. He *had worked* there since July.
       + He *was working* at McDonald's. He *had been working* since July.
     - to refer to the *present* or *future* in *conditions*:
       - He could get a new job if he really *tried*.
       - If Jack *was playing* they would probably win.
     - and *hypotheses*:
       - It might be dangerous. Suppose they *got* lost.
       - I would always help someone who really *needed* help.
     - and *wishes*:
       - I wish it *wasn't* so cold.
     - In *conditions, hypotheses* and *wishes*, if we talk about the *past*,
       we always use the *past perfect*:
       - I would have helped him if he *had asked*.
       - It was very dangerous. What if you *had get* lost?
       - I wish I *hadn't spent* so much money last month.
     - We can use the past forms to talk about the *present* in a few
       *polite expressions*:
       - Excuse me, I *was wondering* if this *was* the train for York.
       - I just *hoped* you *would* be able to help me.


     - Activities:
       + If David was here, he'd know what to do.
       + I was hoping you could lend me some money.
       + The volcanic ash closed several airports.
       + He was away that week so he missed the meeting.
       + If she could see him now, she'd be so proud.
       + What if I didn't like it?
       + If you moved abroad, you might never see them again.
       + I wondered if you could take a look at this.

***** past simple

      *Forms*

      With most verbs the past tense formed by adding /-ed/:

      call>>called; like>>liked; want>>wanted; work>>worked

      But there are a lot of irregular past tenses in English. Here are
      the most common irregular verbs in English, with their past tenses:

      | infinite   | irregular past |
      |------------+----------------|
      | be         | was/were       |
      | begin      | begun          |
      | break      | broke          |
      | bring      | brought        |
      | build      | built          |
      | choose     | chose          |
      | come       | came           |
      | cost       | cost           |
      | cut        | cut            |
      | do         | did            |
      | draw       | drew           |
      | drive      | drove          |
      | eat        | ate            |
      | feel       | felt           |
      | find       | found          |
      | get        | got            |
      | give       | gave           |
      | go         | went           |
      | have       | had            |
      | hear       | heard          |
      | hold       | held           |
      | keep       | kept           |
      | know       | knew           |
      | leave      | left           |
      | lead       | led            |
      | let        | let            |
      | lie        | lay            |
      | lose       | lost           |
      | make       | made           |
      | mean       | meant          |
      | meet       | met            |
      | pay        | paid           |
      | put        | put            |
      | run        | ran            |
      | say        | said           |
      | sell       | sold           |
      | send       | sent           |
      | set        | set            |
      | sit        | sat            |
      | speak      | spoke          |
      | spend      | spent          |
      | stand      | stood          |
      | take       | took           |
      | teach      | taught         |
      | tell       | told           |
      | think      | thought        |
      | understand | understood     |
      | wear       | wore           |
      | win        | won            |
      | write      | wrote          |

      *Use*

      We use the past tense to talk about:

****** something that happened *once in the past*:
       - I *met* my wife in 1983.
       - We *went* to Spain for our holidays.
       - They *got* home very late last night.

****** something that happened *again and again in the past*:
       - When I was a boy I *walked* a mile to school every day.
       - We *swam* a lot while we were on holiday.
       - They always *enjoyed* visiting their friends.

****** something that was *true for some time* in the past:
       - I *lived* abroad for ten years.
       - He *enjoyed* being a student.
       - She *played* a lot of tennis when she was younger.

****** we often use phrases with /ago/ with the past tense:
       - I _met_ my wife a long time *ago*.

****** *Questions and negatives*
       We use /did/ to make questions with the past tense:
       - When *did you meet* your wife?
       - Where *did you go* for your holidays?
       - *Did she play* tennis when she was younger?
       - *Did you live* abroad?

       But look at these questions:
       - Who discovered penicillin?
       - Who wrote Don Quixote?

       We use *didn't* (did not) to make *negatives* with the past tense:
       - They *didn't go* to Spain this year.
       - We *didn't get* home until very late last night.
       - I *didn't see* you yesterday.


****** Activities
       + He took out his wallet and paid the bill.
       + When she went to the interview, she wore her best outfit.
       + They left the motorway and drove for an hour on quiet
	 country roads.
       + I thought I understood this theory but now I'm not so sure.
       + As soon as I met her, I knew she was the woman I was going
	 to marry.
       + He wrote fourteen novels, but not one of them won a prize.
       + They built their own house, so it cost them much less.
       + When I heard you were coming, I gave the staff the rest of
	 the day off.
       + The nurse held the patient's hand and spoke softly to him.


***** past continuous
      The past continuous is formed from the past tense of /be/ with
      the /-ing/ form of the verb.
      We use the past continuous to talk about the *past*:

****** for something which continued *before* and *after* another *action*:
       - The children *were doing their homework* when _I got home_.
	 Compare:
	 I got home. The children did their homework.
	 and
	 The children did their homework when I got home.
       - As I watching television the telephone rang.

       This use of the past continuous is very common at the beginning
       of a story:
       - The other day *I was waiting* for a bus when ...
       - Last week *as I was driving* to work ...

****** for something that happened *before* and *after* a *particular time*:
       - It was eight o'clock. I was writing a letter.
	 Compare:
	 At eight o'clock I wrote some letters.
       - In July she was working in McDonald's.

****** to show that something *continued for some time*:
       - My head *was aching*.
       - Everyone *was shouting*.

****** for something that was happening *again and again*:
       - I *was practicing* every day, three times a day.
       - They *were meeting* secretely after school.
       - They *were always quarrelling*.

****** with verbs which show *change or growth*:
       - The children *were growing up* quickly.
       - Her English *was improving*.
       - My hair *was going* gray.
       - The town *was changing* quickly.


****** Activities:
       - The other day while I was sitting on the train ...
       - New buildings were going up everywhere.
       - Just as I was falling asleep, I heard a strange noise.
       - He was taking money from the till when no-one was looking.
       - What were you doing at the time of the incident?
       - It was raining.
	

***** past perfect
      We use the verb /had/ and the *past participle* for the *past perfect*:
      - I *had finished* the work.
      - She *had gone*.

      The past perfect *continuous* is formed with /had been/ and /-ing/
      form of the verb:
      - I *had been* finish/ing/ the work.
      - *She had been* go/ing/.

      The past perfect is used in the same way as the present perfect,
      but it refers to a time in the past, not the present.

      We use the past perfect tense:
       
****** for something that started in the past and continued up to a
       given time in the past:
       - When George died he and Anne *had been married* for nearly
	 fifty years.
       - She didn't want to move. She *had lived* in Liverpool all
	 her life.

       We normally use the past perfect *continuous* for this:
       - She didn't want to move. She *had been living* in Liverpool
	 all her life.
       - Everything was wet. It *had been raining* for hours.


****** for something we had done *several times* up to the point in the
       past and *continued* to do after this point:
       - He was a wonderful guitarist. He *had been playing* ever since
	 he was a teenager.
       - He *had written three* books and he was working on another one.
       - I *had been watching* the programme every week, but I missed
	 the last episode.

       We often use clause with /since/ to show when something started
       in the past:
       - They had been staying with us *since* _the previous week_.
       - I was sorry when the factory closed. I had worked there *since*
	 _I left school_.
       - I *had been watching* that programme every week *since* _it started_,
	 but I missed the last episode.


****** when we are reporting our experience and including up to the
       (then) present:
       - My eighteenth birthday wast the worst day I had ever had.
       - I was pleased to meet George. I hadn't met him before, even though
	 I had met his wife several times.


****** for something that happened in the past but is important at the
       time of reporting:
       - I couldn't get into my house. I *had lost* my keys.
       - Teresa wasn't at home. She *had gone* shopping.


****** we use the past perfect to talk about the past in *conditions*,
       *hypotheses* and *wishes*:J
       - I would have helped him _if_ *he had* asked.
       - It was very dangerous. _What if_ you *had got* lost?
       - _I wish_ I *hadn't spent* so much money last month.


****** Activities:
       - She'd been married three times before she met George.
       - I don't thing I'd ever seen an eclipse until yesterday.
       - We thought he'd broken his leg, so we phoned for an ambulance.
       - If I'd known, I probably would never have come.
       - He'd been working for the company since he graduated.
       - I wish you'd told me earlier.


**** Perfective aspect

***** We use the *present perfect* to show that something has continued
      up to the present:
      - They'*ve been* married for nearly fifty years.
      - She *has lived* in Liverpool all her life.


***** ...or is important in the present:
      - I'*ve lost* my keys. I can't get into the house.
      - Teresa isn't at home. I thing she *has gone* shopping.


***** We use *present perfect continuous* to show that something has
      been continuing up to the present:
      - It'*s been raining* for hours.
      - We'*ve been waiting* her since six o'clock this morning.


***** We use *past perfect* to show something continued up to a time
      *in the past*:
      - Wen George died he and Anne *had been* married for nearly fifty years.


***** ...or was important at that time *in the past*:
      - I couldn't get into the house. I *had lost* my keys.
      - Teresa wasn't at home. She had gone shopping.


***** We use *past perfect continuous* to show that something had been
      continuing up to a time in the past or was important at that time
      in the past:
      - Everything was wet. It *had been raining* for hours.
      - He was a wonderful guitarist. He *had been playing* ever since
	he was a teenager.


***** We use /will/ with the perfect to show that something will be complete
      at some time *in the future*:
      - In a few years they *will have discovered* a cure for the common cold.
      - I can come out tonight. I'*ll have finished* my homework by then.


***** We use /would/ with the perfect to refer to something that *did not happen*
      in the past but would have happened *if the conditions had been right*:
      + If you had asked me I *would have helped* you.
      + I *would helped* you, _but_ you _didn't_ ask me.
      + You _didn't_ ask me _or_ I *would have helped* you.


***** We use *other modals* with perfective aspect when we are *looking back*
      from a point in time when something might have happened, should have
      happened or would have happened.

****** The point of time might me in the future:
       - We'll meet again next week. We *might have finished* the work by then.
       - I will phone you at six o'clock. He *should have got* home by then.


****** the present:
       - It's getting late. They *should have arrived* by now.
       - He's still not here. He *must have missed* his train.


****** or the past:
       - I wasn't feeling well. I *must have eaten* something bad.
       - I checked my cell phone. She *could have left* a message.


**** Continuous aspect
     Both tenses have a continuous form. These continuous tenses are formed
     with the verb /be/ and the /-ing/ form of the verb:

     We use continuous aspect:

***** for something happening *before and after* a given time.
      - He's getting on the train. /[before and after the moment of speaking]/
      - It was quarter past ten. We *were watching* the news on TV.


***** for something continuing *before and after* another action.
      - Mother *will be cooking* the dinner when we get home.
      - We *were waiting* for the bus when it started to rain.


***** for something continuing *for some time*.
      - Everybody *will be waiting* for us.
      - They *had been working* hard all day.


***** for something happening *again and again*.
      - They'*ve been doing* that every day this week.
      - The children *were always shouting*.
      - He *will be practicing* the piano every night.


***** for something *temporary*.
      - We *were renting* an apartment until our house is ready.
      - He *was working* in a garage during the vacation.


***** for something *new*.
      - We have moved from Birmingham. We'*re living* in Manchester now.
      - He had left university and *was working* in his father's business.


***** to describe something *changing* or *developing*.
      - Everything *has been getting* more difficult.
      - He *was growing* more bad-tempered every day.


***** Activities
      - He was watching the match when the doorbell rang.
      - She's been getting more and more depressed.
      - He was picking grapes in France last summer.
      - I was wondering where you'd got to.
      - I'm always loosing my glasses.
      - He's driving me mad.
      - She's going out with that friend of Mike's now.


**** Active and passive voice
     *Transitive verbs* have both *active* and *passive* forms:

     | active                          | passive                       |
     |---------------------------------+-------------------------------|
     | The hunter killed the lion      | The lion was killed by hunter |
     | Someone has cleaned the windows | The windows have been cleaned |

     The passive forms are made up of the verb /be/ with a *past participle*:

     |             | /be/            | past participle |                    |
     |-------------+-----------------+-----------------+--------------------|
     | English     | is              | spoken          | all over the world |
     | The windows | have been       | cleaned         |                    |
     | Lunch       | was being       | served          |                    |
     | The work    | will be         | finished        | soon               |
     | They        | might have been | invited         | to the party       |

     We sometimes use verb /get/ to form the passive:
     - Be careful with the glass. It might *get* broken.
     - Peter *got* hurt in a crush.

     If we want to show the person or thing doing the action we use *by*:
     - She was attacked by a dangerous dog.
     - The money was stolen by her husband.

     We can use the *indirect object* as the subject of a passive verb:

     | active                             | passive                              |
     |------------------------------------+--------------------------------------|
     | I gave him a book for his birthday | He was given a book for his birthday |
     | Someone sent her a cheque for a    | She was sent a cheque for a          |
     | thousand euros                     | thousand euros                       |

     We can use *phrasal verbs* in the passive:

     | active                                | passive                                   |
     |---------------------------------------+-------------------------------------------|
     | They *called off* the meeting         | The meeting *was called off*.             |
     | His grandmother *looked after* him    | He *was looked after* by his grandmother. |
     | They *will send* him *away* to school | He *will be sent away* to school.         |

     Some verbs very *frequently used in the passive* are followed by the
     *to-infinitive*:

     | be supposed to  | be expected to | be asked to |
     | be scheduled to | be allowed to  | be told to  |

     - John *has been asked to* make a speech at the meeting.
     - You *are supposed to* wear a uniform.
     - The meeting *is scheduled to* start at seven.


***** Activities
      - The decorations are currently being refurbished.
      - Job applicants are expected to arrive fifteen minutes before the
	start of the test.
      - The actor had already been offered twice before.
      - After his parents died, hi was brought up by an aunt in New Zealand.
      - I'm afraid that particular product has been discounted.
      - Patients should always be told of the severity of their condition.
      - The lifeboatman  was awarded a medal for bravery.
      - Examination candidates will be informed of the result of the interview
	on Wednesday.
      - All members of staff will be taken down at the end of the month.


**** to +infinitive
     We use the /to/-infinitive:

***** to express *purpose* (to answer "Why...?"):
      - He bought some flowers *to give* to his wife.
      - He locked the door *to keep* everyone out.

      We sometimes say /in order to/ or /in order not to/:
      - We set off early *in order to* avoid the traffic.
      - They spoke quietly *in order not to* wake the children.

      ...or we can say *so as to* or *so as not to*:
      - We set off early *so as to* avoid the traffic.
      - They spoke quietly *so as not to* wake the children.


***** after *certain verbs*, particularly verbs of *thinking* and *feeling*:

      | choose     | decide     | expect | forget | hate   | hope     | intend |
      | learn      | like       | love   | mean   | prefer | remember | want   |
      | would like | would love |        |        |        |          |        |

      ...and verbs of *saying*:

      /agree, promise, refuse/
      - They decided to start business together.
      - Remember to turn the lights out.

      Some verbs are followed by a *direct object* and the infinitive:

      | advise | ask        | encourage | invite | order  | persuade     |
      | remind | tell       | warn      | expect | intend | would prefer |
      | want   | would like |           |        |        |              |

      - She *reminded* _me_ *to* turn lights out.
      - He *encouraged* _his friends_ *to vote* for him.


***** after certain *adjectives*
      sometimes the /to/-infinitive gives a *reason* for the adjective:

      | disappointed | glad  | sad | happy | anxious | pleased |
      | surprised    | proud | unhappy |       |         |         |

      - We were *happy to come* to the end of our journey.
      - John was *surprised to see* me.

      Other adjectives with the /to/-infinitive are:
       
      | able     | unable    | due      | eager |
      | keen     | likely    | unlikely | ready |
      | prepared | unwilling | willing  |       |

      - Unfortunately I was *unable to work* for over a week.
      - I am really tired. I'm *ready to go* to bed.

      We often use the /to/-infinitive with these adjectives after it
      to *give opinions*:

      | difficult | easy   | possible | impossible |
      | hard      | right  | wrong    | kind       |
      | nice      | clever | silly    | foolish    |

      - It's *easy to play* the piano, but it's very *difficult to play* well.
      - He spoke so quickly it was *impossible to understand* him.

      We use the preposition /for/ to show who these adjectives refer to:

      | difficult | easy | possible | impossible | hard |
       
      - It was *difficult* _for us_ *to hear* what she was saying.
      - It is *easy* _for you_ *to criticize* other people.

      We use preposition /of/ with other adjectives:
      - It's *kind of you* to help.
      - It would be *silly of him* to spend all his money.


***** As a *postmodifier* after abstract nouns like:

      | ability   | desire  | need        | wish   |
      | attempt   | failure | opportunity | chance |
      | intention |         |             |        | 

      - I have no desire *to be rich*.
      - They gave him an opportunity *to escape*.
      - She was annoyed by her failure *to answer the question correctly*.


***** We often use a /to/-infinitive as a postmodifier after an indefinite
      pronoun
      - When I am travelling I always take *something* _to read_.
      - I was alone. I had *no one* _to talk to_.
      - There is hardly *anything* _to do_ in most of these small towns.


***** Activities
      - I went to the cash machine to take out some money.
      - We got there early in order to get a good seat.
      - I always put wine in the fridge so as to have a chilled bottle ready.
      - I don't think we should talk about it in order not to upset them.
      - She stood on his shoulders to get a better view.
      - He closed the door so as not to be disturbed.
      - I was disappointed to hear you hadn't passed.
      - They were glad to have made their acquaintance.
      - Were you surprised to see her again so soon?
      - I am not willing to work all these extra hours without pay.
      - She was unable to go to the wedding because of illness.
      - I am keen to hear all your latest news.


**** -ing forms
     We can use the /-ing/ form of the verb:
      
***** as a *noun*:
      - I love *swimming*.
      - *Swimming* is very good for your health.
      - You can get fit by *swimming* regularly.

      /-ing/ nouns are nearly always *uncount* nouns

****** The /-ing/ noun can be used:

******* as the subject of a verb:
	- *Learning English* is not easy.

******* as the object of a verb:
	- We enjoy *learning English*.

	Common verbs followed by an /-ing/ object are:

	| admit   | like  | hate    | start | avoid  |
	| suggest | enjoy | dislike | begin | finish | 

******* as the object of a preposition
	- Some people are not interested *in learning* English.



***** as an *adjective*:
      - The main problem today is *rising* prices.
      - That programme was really *boring*.
      - He saw a woman *lying* on the floor.

****** The /-ing/ adjective can come:

******* in front of a noun:
	- I read an *interesting* article in the newspaper today.
	- I saw a really *exciting* match on Sunday.

	The commonest /-ing/ adjectives used in front of the noun are

	| amusing  | interesting   | worrying   | shocking    |
	| boring   | disappointing | surprising | frightening |
	| exciting | terrifying    | tiring     | annoying    |

******* after a noun:
	- Who is that *man standing* over there?
	- The *boy talking* to Angela is her younger brother.

******* and especially after verbs like *see, watch, hear, smell* etc.
	- I *heard* someone *playing* the piano.
	- I can *smell* something *burning*.


***** Because the /-ing/ noun or adjective is formed from a *verb* it can
      have any of the patterns which follow a verb, for example:

****** ...an *object*:
       - I like *playing* tennis.
       - I saw a dog *chasing* a cat.


****** ...or an *adverbial*:
       - You can earn a lot of money *by working hard*.
       - There were several people *waiting for the bus*.


****** ...or a *clause*:
       - I heard someone *saying that*.


***** Activities
      - He made a rather surprising remark.
      - I've had a very tiring day.
      - I just saw a boy stealing a radio.
      - Waiting for buses is not much fun.
      - That woman reading the paper is my boss.
      - She can predict the future by reading your palm.
      - We look forward to meeting him tomorrow.
      - Being responsible for 200 people is not easy.
      - I love watching my son play football.
      - It was a terrifying experience.


**** Talking about the present

***** We use present simple:

****** to talk about something happening *regularly* in the present:
       - The children *come* home from school about four.
       - We often *see* your brother at work.


****** to talk about something happening *continually* in the present:
       - They *live* next door to us.
       - He *works* for the Post Office.


****** to talk about things which are *generally true*:
       - Water *boils* at 100 degrees Celsius.
       - The Nile *is* the longest river in Africa.


***** We use present continuous:

****** to show that something in the present is *temporary*:
       + We *are living* in the rented flat at present.
       + My wife usually goes in to the office, but she *is working* at home today.


****** for something happening *regularly* in the present *before* and
       *after* a *given time*:
       - I'*m usually getting* ready for work at eight o'clock.
       - When I see George *he's always reading* his newspaper.


****** for something happening *before* and *after* the *moment of speaking*:
       - I can't hear you. I'*m listening* to my iPod.
       - Be quiet. The children *are sleeping*.


***** We use modal verbs
      to talk about the present when we are not sure of something:
      - I don't know where Henry is. He *might be playing* tennis.
      - Who's knocking at the door? I don't know. It *could be* the police.


**** Talking about the past
      
***** Talking about past events and situations:

****** We use *past simple*:

******* when we are talking about an event that happened at a
	*particular time in the past*:
	- We *arrived* home before dark.
	- The film *started* at seven thirty.


******* when we are talking about something that
	*continued for some time in the past*:
	- Everybody *worked* hard through the winter.
	- We *stayed* with our friends in London.

	
******* When we are talking about something that happened *several*
	*times in the past* we use
	
******** the past simple:
	 - Most evenings we *stayed* at home and watched DVDs.
	 - Sometimes they *went* out for a meal.


******** ...or *used to*
	 - Most evenings we *used to* stay at home and watch DVDs.
	 - We *used to* to for a swim every morning.


******** ...or *would*
	 - Most evenings he *would take* the dog for a walk.
	 - They *would* often visit friends in Europe.

	 *WARNING* We do *not* normally use /would/ with *stative verbs*.


****** We use the *past continuous*:

******* when we are talking about something which happened *before* and
	*after* given *time in the past*:
	- It was just after ten. I *was watching* the news on TV.
	- At half-time we *were losing* 1-0.


******* when we are talking about something which happened *before* and
	*after* another *action* in the past:
	- He broke his leg when he *was playing* rugby.
	- She saw Jim as he *was driving* away.


***** The past in the past
      When we are *looking back* from a point in the past to something
      *earlier in the past* we use the *past perfect*:
      - Helen suddenly remembered she *had left* her keys in the car.
      - When we *had done* all our shopping we caught the bus home.
      - They wanted to buy a new computer, but they *hadn't saved* enough money.
      - They would bought a new computer if they *had saved* enough money.


***** The past and the present:
      We use the *present perfect*:

****** when we are talking about the *effects in the present* of something
       that *happened in the past*:
       - I can't open the door. I'*ve left* my keys in the car.
       - Jenny *has found* a new job. She works in a supermarket now.


****** when we are talking about something that *started* in the past and
       *still* goes on:
       - We *have lived* here since 2007. (and we still live here)
       - I *have been working* in the university for over ten years.


***** The future in the past
      When we talk about the *future* from a time in the *past* we use:

****** /would/ as the past tense of will
       - He thought he *would buy* one the next day.
       - Everyone was excited. The party *would be* fun.


****** /was/were/ going to
       - John *was going to drive* and Mary *was going to follow* on her bicycle.
       - It was Friday. We *were going to set off* the next day.


****** the *past continuous*
       - It was September. Mary *was starting* school the _next week_.
       - We were very busy. The shop *was opening* _in two weeks time_.


***** Activities
      - The computer crashed while he was saving the document.
      - After I had eaten a full breakfast, I went for a walk along the beach.
      - She closed the door and locked it behind her.
      - They left without saying a word.
      - I remember it clearly. It was midnight and I was watching the late movie.
      - We had never seen anything so extraordinary in our lives.
      - I'm sure she would have told you if she had known.
      - They find it difficult to forget; they suffered tremendous hardship
	in the war.


**** Talking about the future

***** When we *know* about the *future* we normally use the *present tense*.

****** We use the *present simple* for something *scheduled* or arranged:
       - *We have* a lesson _next Monday_.
       - The *train arrives* at _6.30 in the morning_.
       - The *holidays start* _next week_.
       - It *is my birthday* _tomorrow_.


****** We can use the *present continuous* for *plans* or arrangements:
       - *I'm playing football* tomorrow.
       - *They are coming* to see us tomorrow.
       - *We're having* a party at Christmas.


***** We use *will* to talk about the future:

****** When we make *predictions*:
       - *It will be* a nice day tomorrow.
       - I think *Brazil will win* the World Cup.
       - I'm sure *you will enjoy* the film.


****** To mean *want to* or *be willing to*:
       - I hope *you will come* to my party.
       - George says *he will help* us.


****** To make offers and promises:
       - *I'll see* you tomorrow.
       - *We'll send* you an email.


****** To talk about *offers* and *promises*:
       - *Tim will be* at the meeting.
       - *Mary will help* with the cooking.


***** We use *(be) going to*:

****** To talk about *plans* and *intentions*:
       - *I'm going to drive* to work today.
       - *They are going to move* to Manchester.


****** When we can *see* that something is *likely to happen*:
       - Be careful! *You are going to fall*.
       - Look at these black clouds. I think *it's going to rain*.


***** We often use verbs like:
      | would like | plan | want   |
      | mean       | hope | expect | 
      to talk about the future:
      - What are you going to do next year? *I'd like to go* to University.
      - *We plan to go* to France for our holidays.
      - George *wants to buy* a new car.


***** We use *modals* /may/, /might/, and /could/ when we are *not sure*
      about the future:
      - *I might stay* at home tonight, or *I might go* to the cinema.
      - *We could see* Mari at the meeting. She sometimes goes.


***** We can use /should/ if we think something is *likely to happen*:
      - *We should be* home in time for tea.
      - *The game should be* over by eight o'clock.


***** Clauses with *time words*.
      In clauses with time words like /when/, /after/, and /until/ we often
      use a *present tense* form to talk abut the future:
      - I'll come home *when I finish* work.
      - You must wait here *until your father comes*.
      - They are coming *after they have had* dinner.


***** Clauses with /if/.
      In clauses with /if/ we often use a *present tense* form to talk about
      the future:
      - We won't be able to go out *if it rains*.
      - *If Barcelona win* tomorrow they will be champions.

      *WARNING*: We do not normally use /will/ in clauses with /if/ or with
      /time words/:
      - I'll come home *when I* +will+ *finish work*.
      - We won't be able to go out *if it* +will rain+ *rains.

      *But* we can use /will/ if it means a promise or offer:
      - I will be very happy *if you will come* to my party.
      - We should finish the job early *if George will help* us.


***** We can use the *future continuous* instead of the present continuous
      or going to *for emphasis* when we are talking about plans,
      arrangements and intentions:
      - *They'll be coming* to see us next week.
      - *I will be driving* to work tomorrow.


***** Activities
      - The last train leaves at twenty past one.
      - I am having lunch with Gill today. We've got some things to discuss.
      - I think everyone is coming to the dinner on Saturday.
      - The concert starts at eight, so I'll meet you outside at quarter to.
      - What's Paul going to do when he finishes college?
      - I'd love to come, but I am watching game tonight.


**** Verbs in time clauses and if clauses

***** Verbs in *time clauses* and *conditionals* follow the same patterns
      as in other clauses
      *except*:

****** In clauses with time words like /when/, /after/, /until/ we often
       use the *present tense* forms to talk about the future:
       - I'll come home *when* I *finish* work.
       - You must wait here *until your father comes*.
       - They are coming *after they have had* dinner.


****** In conditional clauses with /if/ or /unless/ we often use the
       *present tense* forms to talk about the future:
       - We won't be able to go out *if it is raining*.
       - *If Barcelona win* tomorrow they will be champions.
       - I will come tomorrow *unless I have to look after* the children.


****** We do *not* normally use /will/ in clauses with /if/ or with *time words*:
       - I'll go home when I +will+ *finish* work.
       - We won't be able to go out if it *rains*.
       - I will be nice to see Peter when he *gets home*.
       - You must wait here until your father *comes*.


****** but we can use /will/ if it means a *promise* or *offer*:
       - I will be very happy if you *will* come to my party.
       - We should finish the job early if George *will* help us.


***** *IF* clauses and hypotheses
      Some clauses with /if/ are like hypotheses so we use *past tense* forms
      to talk about the present and future.

      We use the past tense forms to talk about the *present* in clauses
      with /if/:

****** for something that *has not happened* or *is not happening*:
       | He could get a new job if he really *tried*.   | = | He cannot get a job because he has not tried.       |
       | If Jack *was* playing they would probably win. | = | Jack is not playing so they will probably not win.  |
       | If I *had* his address I could write to him.   | = | I do not have his address so I cannot write to him. | 


****** We use the past tense forms to talk about the *future* in clauses with /if/.

******* for something that we believe or know *will not happen*:
	| We would go by train if it *wasn't* so expensive. | = | We won't go by train because it is too expensive. |
	| I would look after the children for you at the    |   |                                                   |
	| weekend if I was at home.                         | = | I can't look after the children because I will    |
	|                                                   |   | not be at home.                                   | 

******* to make suggestions about *what might happen*:
	- If he *came* tomorrow we could borrow his car.
	- If we *invited* John, Mary would bring Angela.


****** When we are talking about something which did *not* happen in the
       *past* we use the *past perfect* in the /if/ clause and a *modal*
       verb in the main clause:
       | If you had seen him you could have spoken to him | = | You did not see him so you could not speak to him.   |
       | You could have stayed with us if you had         | = | You couldn't stay with us because you didn't         |
       | come to London.                                  |   | come to London.                                      |
       | If we hadn't spent all our money we could        | = | We have spent all our money so we can't take a       |
       | take a holiday.                                  |   | holiday.                                             |
       | If I had got the job we would live in Paris.     | = | I did not get the job so we are not living in Paris. |

       If the *main clause* is about the *past* we use a *modal* with /have/:
       | If you had seen him you could *have* spoken to him. | = | You did not see him so you could not speak to him. |
       | You could *have* stayed with us if you had          | = | You couldn't stay with us because you didn't       |
       | come to London.                                     |   | come to London.                                    |
       | If you had invited me I might *have* come.          | = | You didn't invite me so I didn't come.             |

       If the *main clause* is about the *present* we use a present tense form
       or a *modal without have*:
       | If I had got the job we *would be living* in Paris | = | I did not get the job so we are not living in Paris now. |
       | now.                                               |   |                                                          |
       | If you had done your homework you would know the   | = | You did not do your homework so you do not know the      |
       | answer.                                            |   | answer.                                                  |


***** Activities
      - I will talk to him about it when we meet.
      - After the performance is over, come backstage and meet the cast.
      - I refuse to go there unless you come with me.
      - I will call you immediately when I arrive.
      - When you read this letter, I will be gone.
      - If I sell my house, I will take a long holiday.
      - The show is not over until the fat lady sings.
      - You should read the contract carefully before you sign it.
      - I'll speak to him about it when I see him.
      - I won't go there unless you are there with me.
      - Whenever I feel a bit down, I think of Paris.
      - If I loose my job, I will go traveling for a while.
      - We are going to open tomorrow night whether you like it or not!
      - By the time you get this email, I will have left.
      - I will ring you as soon as I reach the house.


**** Wishes and hypotheses

***** Wishes
      We use *past tense forms* to talk about wishes:
      
****** We use past tense modals /would/ and /could/ to talk about wishes for the future:
       - I don't like my work. *I wish I could* get a better job.
       - That's a dreadful noise. *I wish it would* stop.
       - I always have to get home early. *I wish my parents would* let me stay out later.


****** We use *past tense* forms to talk about wishes for the *present*:
       - I don't like this place. *I wish I lived* in somewhere more interesting.
       - These seats are very uncomfortable. *I wish we were traveling* first class.
       - *Everyone wishes they had* more time.
       - *John wishes he wasn't* so busy.
       - *I wish it wasn't* so cold.


****** We use the *past perfect* to talk about wishes for the *past*:
       - *I wish I had worked* harder when I was at school.
       - *Mary wishes she had listened* to what her mother told her.
       - *I wish I hadn't spent* so much money last month.


***** Hypotheses (things that we imagine)
      When we are talking about hypotheses:

****** We use *present tense forms* after phrases like
       /what if/, /in case/ and /suppose/ to talk about the *future*
       if we think it is *likely to happen*:
       - Those steps are dangerous. *Suppose someone has* an accident.
       - We should leave home early *in case we are* late.


****** We use a *past tense* form to talk about the *future* after
       /suppose/ and /what if/ to suggest something is *not likely* to happen:
       - It might be dangerous. *Suppose they got* lost.
       - *What if he lost* his job. What would happen then?


****** We use modals /would/, /could/ for a hypotheses about the *future*:
       - We can't all stay in a hotel. *It would be* very expensive.
       - Drive carefully. *You could have* an accident.


****** We use /would/ in the main clause and the /past/ in a subordinate
       clause to talk about the *imagined future*:
       - *I would always help* someone who really *needed* help.
       - *I wold always help* someone *if they really needed* it.


****** We use modals with /have/ to talk about something that
       *did _not_ happen in the past*:
       - I did not see Mary, or *I might have spoken* to her.
       - It's a pity Jack wasn't at the party. *He would have enjoyed* this party.
       - Why didn't you ask me. *I could have told* you the answer.


***** Activities
      - I wish I hadn't do that!
      - I wish you were
      - I wish the neighbors would
      - Do you ever wish you
      - I sometimes wish I'd
      - I do wish you wouldn't
      - I think he wishes he hadn't come.
      - I wish I was slightly taller.
      - This club is very small. Suppose
      - I didn't know we lived so close. We could have shared taxi.
      - We can't leave all at the same time. It wouldn't look good.
      - Are you sure you want the party outside? What if it rains?
      - We should take the underground in case there's a lot of traffic.


**** The verb *be*
     The verb *be* has the following forms:
     | Present simple:      | Affirmative:   | I am                   | We are              |
     |                      |                | You are                | You are             |
     |                      |                | He/she/it is           | They are            |
     |----------------------+----------------+------------------------+---------------------|
     |                      | Question form: | Am I?                  | Are we?             |
     |                      |                | Are you?               | Are you?            |
     |                      |                | Is he/she/it?          | Are they?           |
     |----------------------+----------------+------------------------+---------------------|
     |                      | Negative:      | I am not/I'm not       | We are not/aren't   |
     |                      |                | You are not/aren't     | You are not/aren't  |
     |                      |                | He/she/it is not/isn't | They are not/aren't |
     |----------------------+----------------+------------------------+---------------------|
     | Past simple:         |                | I was                  | We were             |
     |                      |                | You were               | You were            |
     |                      |                | He/she/it was          | They were           |
     |----------------------+----------------+------------------------+---------------------|
     | The past participle: |                | been                   |                     |
     |----------------------+----------------+------------------------+---------------------|
     | Present perfect:     |                | has/have been          |                     |
     |----------------------+----------------+------------------------+---------------------|
     | Past perfect:        |                | had been               |                     |

     The verb /be/ is used in the following patterns:

***** with a *noun*:
      - My mother *is* a teacher.
      - Bill Clinton *was* the president of US.


***** With an *adjective*:
      - This soup *is* very tasty.
      - The children *were* good.


****** with the /-ing/ form to make *the continuous* aspect
       - We *were walking* down the street.
       - Everything was wet. It *had been raining* for hours.


****** with the /-ed/ form to make *the passive voice*
       - The house *was built* in 1890.
       - The street *is called* Montagu Street.
       - This care *was made* in Japan.


***** with a *prepositional phrase*:
      - John and his wife *are from Manchester*.
      - The flowers *are on the table*.


**** Link verbs
     Some verbs are followed by either a noun or an adjective:
     | She was a good friend | = | N + V + N   |
     |-----------------------+---+-------------|
     | She was very happy    | = | N + V + Adj |
     |-----------------------+---+-------------|
     | He became headmaster  | = | N + V + N   |
     |-----------------------+---+-------------|
     | He became angry       | = | N + V + Adj |

     These verbs are called *link verbs*. Common verbs like this are:
     | be   | become | appear | feel  |
     |------+--------+--------+-------|
     | look | remain | seem   | sound |

     - She *seemed* _an intelligent woman_.
     - She *seemed* _intelligent_.
     - He *looked* _hungry_.
     - He *looked* _a good player_.

     After /appear/ and /seem/ we often use /to be/:
     - She *appeared to be* _an intelligent woman_.
     - He *seemed to be* _angry_.

     Some link verbs are followed by an *adjective*. Common verbs like this are:
     | get   | go    | grow |
     |-------+-------+------|
     | taste | smell |      |

     - *He got* _hungry_ in the evening.
     - *She grew* _stronger_ every day.


***** Activities
      - I wrote for an hour non-stop in the exam and now my arm feels sore.
      - It's a very easy vegetable to cultivate - it grows anywhere.
      - Wearing trousers like that seems to be fashion these days.
      - You have to be careful with meat in this climate - it goes bad very quickly.
      - That looks good. Did you make it all by yourself?
      - What's that noise? It sounds like someone needs help.
      - It appears to be the remains of a dinosaur.
      - It isn't chicken, but it tastes like chicken.
      - Bring a jumper. It gets very chilly at night.
      - It remains to be decided who will be the next Prime Minister.
      - He is very proud of his children.


**** Delexical verbs like have, take, make, go, do and give
     We often use common verbs like *have* and *take* with nouns like
     /a shower/, /a drink/:
     - I *took* /a shower/. = I showered.
     - She *had* /a drink/. = She drank something.

     We call these *delexical verbs* because the important part of the meaning
     is taken *out* of the *verb* and put *into* the *noun*.
     We often put *adjectives* in front of the noun:
     - I took a *cold* shower.
     - She had a *nice*, *refreshing* drink.


***** have
      We use *have* with:
      - *Food and drink*: a meal, breakfast, lunch, a snack, a cup of tea
      - *Talking*: a chat, a conversation, a discussion, a talk
      - *Washing*: a bath, a shower, a wash, a scrub
      - *Resting*: a break, a holiday, a rest
      - *Disagreeing*: an argument, a dispute, a figth, a quarell

      For example:
      - I *had a good breakfast* before I left home.
      - I *had a long talk* about the problem.
      - The kids should *have a bath* before they go to bed.
      - She generally *had a short holiday* in July or August.
      - They *had a serious quarell* about their father's will.

      We also use /have/ with *nouns formed from verbs*:
      - I think you should *have a look* at this.
      - She *had a bite* of the cake.
      - I'm thirsty. I'm going to *have a drink* of water.
      - I *had a listen* to that new CD in the car.
      - They are going to *have a swim*.

****** Activities:
       - Can you phone back in half an hour? We're just having dinner.
       - I met up with an old friend last night and we had a nice chat
	 about our school days.
       - In the morning I like to go for a long run and then
	 have a shower.
       - I don't usually have a holiday in the summer. It's our busiest
	 time at work.
       - "How was the party?" "It was fun. Rob and Greg had an argument
	 about football, as usual!"
       - We took some great photos in Egypt. Would you like to have a look?


***** take
      We use *take* with:

      *Washing*: a bath, a shower, a wash
      *Resting*: a break, a holiday, a rest

      - I always *take a cold shower* in the morning.
      - You look tired. You need to *take a break*.


      and with *these words*:
      | care    | a turn | trouble     | a chance | a decision   |
      |---------+--------+-------------+----------+--------------|
      | care of | turns  | the trouble | a risk   | a photograph | 


      - We *took hundreds of photographs* on holiday.
      - Jane always *takes a lot of trouble* with her homework.


      We also use *take* with some nouns formed from verbs:
      - I think you should *take a look* at this.
      - Let's *take a walk*.
      - They are going to *take a swim*.


****** Activities:
       - Sometimes I like to take a hot bath at the end of the day.
	 The hot water helps me relax.
       - OK, let's take a break. We'll start again in half an hour.
       - I'm going to the bathroom. Can you take care of my bags for
	 a moment?
       - If you want to succeed in business you have to be ready
	 to take risks.
       - Going to work in another country was a difficult decision to take.
       - We took some great photos in Egypt. Would you like to have a look?


***** give
      We use *give* with:

      *Noises*: a cry, a laugh, a scream, a shout, a whistle
      *Facial expressions*: a smile, a grin, a look, a glance
      *Hitting*: a kick, a punch, a slap, a push, a knock, a blow
      *Affectionate actions*: a hug, a kiss, a stroke
      *Talking*: some advice, an answer, some information, an interview,
      a lecture, some news, a report, a speech, a talk, a warning

      - She *gave a loud laugh*.
      - John *gave a happy smile*.
      - He *gave* me *a nasty kick* on the leg.
      - She *gave* the children a *goodnight kiss* and put them to bed.
      - I have to *give a speech* at the meeting tomorrow.


****** Activities:
       - "Don't look so sad," said the photographer. "Give me a smile!"
       - "I's lovely to see you again," my grandmother said. "Give me a hug!"
       - I know it's not really my business, but do you mind if I give you
	 some advice?
       - My car won't start. Will you give me a push?
       - That's an extremely good question. I'll give you an answer in the
	 next lesson.
       - When she saw the spider, she gave a scream and ran from the room.


***** make
      We use *make* with:

      *Talking and sounds*: a comment, an enquiry, a noise, a point, 
      a promise, a sound, a speech, a suggestion
      *Plans*: arrangements, a choice, a decision, a plan, an appointment,
      a date

      - Try not to *make a noise*.
      - They *made arrangements* to meet the next day.


****** Activities:
       - Shh! Don't make a sound. The baby's asleep.
       - "Can't we visit mum tomorrow?"
	 "No. We made a promise to call on her today."
       - My brother asked me to made a speech at this wedding.
	 I'm terrified!
       - Can I make a suggestion?
	 Why don't we ask Phil if he can help us?
       - Sorry, I can't meet you this weekend.
	 I've alreasy made plans.
       - Hello, I'd like to make an appointment to see the doctor, please.
       


***** go and do
      We also use *go* and *do* as delexical verbs:
      - Shall we *go swimming* this afternoon?
	Or shall we *go for a walk*?
      - It's your turn to *do the cooking*.
      - I'll have to *do my hair* before the party.


****** go
       We use *go* with /-ing/ *verbs for common activities*:
       - We usually *go walking* at the weekend.
       - He *goes running* every evening after supper.
       - Mum's out. She's *gone shopping*.

       We use *go for a* with *verbs to do with moving*:

       | a jog | a ride   | a swim |
       |-------+----------+--------|
       | a run | a stroll | a walk |

       - I want to get out of here. Let's *go for a walk*.
       - He's *gone for a ride* on his bike.


******* Activities:
	- Did you know that Alan has a horse?
	  He goes riding every weekend.
	- I'm meeting Ivana later. We're going shopping for clothes.
	- It's nice morning. I think I'll go for joga.
	- Vic isn't here right now. He's gone for a swim  in the sea.
	- We usually go dancing on Friday night.
	- We need a break. Let's go for a stroll in the park.


****** do
       We use *do with* the /-ing/ *nouns to do with work*,
       especially work in the house:
       - It's your turn to *do with cooking*.
       - You *do the washing up* and I'll *do the drying*.

       And with other nouns to do with work:
       - I need to *do a few jobs* around the house.
       - I can't come out this evening.
	 I have a lot of *work to do*.

       We use /do/ with nouns when it is obvious what the action is:
       - I'll have to *do my hair* before we go out. = I'll have to brush my hair.
       - Have you *done your teeth*? = Have you cleaned your teeth?

       A question like: - Have you *done the car*?
       Could mean:
       - Have you *washed the car*?
       - Have you *mended the car*?
       - Have you *put petrol in the car*?
       Depending on context.

******* Activities:
	- Go to your room and do your homework.
	  You've got a test next week, remember.
	- In my family, my mum had a full-time job
	  and my dad did most of the housework.
	- Whenever we have a big family dinner,
	  my mum cooks and my dad does the dishes afterwards.
	- "Where's my red T-shirt?"
	  " It's in the washing machine. You know I always
	  do the laundry on Wednesdays!"
	- If you wash the dishes, I'll do the drying and put them away.
	- I don't have any shirts to wear. They're all clean but
	  I didn't have time to do the ironing.


**** Modal verbs
     The modal verbs are:

     | can    | could | may   | might | shall |
     |--------+-------+-------+-------+-------|
     | should | will  | would | must  |       |

     We use modal verbs to show if we believe something is certain,
     probable or possible (or not). We also use modals to do things like
     talking about ability, asking permission making request and offers,
     and so on.

***** certain, probable or possible

****** Possibility:
       We use the modals /could/, /might/ or /may/ to show that soemthing
       is possible in the future but not certain:
       - They *might come* later. (=Perhaps/maybe they will come later)
       - They *may come* by car. (=Perhaps/maybe they will come by car)
       - If we don't be hurry we *could be* late. (=Perhaps/maybe we will be late)

       We use /could have/, /might have/ and /may have/ to show that something
       was possible *now* or at some time in the *past*:

       - It's ten o'clock. They *might have* arrived now.
       - They *could have* arrived hours ago.

       We use the modal *can* to make *general statements* about what is possible:

       - It *can be* very cold in winter. (= Sometimes it was very cold in winter)
       - You *can* easily *loose* your way in the dark. (= People often loose their way in the dark)

       We use the modal *could* as the *past* tense of /can/:

       - It *could be* very cold in winter. (= sometimes it was very cold in winter)
       - You *could lose* your way in the dark. (= People often lost their way in the dark)


****** Impossibility:
       We use the negative *can't* or *cannot* to show that something is impossible:

       - That *can't be* true.
       - You *cannot be* serious.

       We use *couldn't/could not* to talk about the *past*:

       - I knew it *could not* be true.
       - He was obviously joking. He *could not* be serious.


****** Probability:
       We use the modal *must* to show *we are sure* something to be true and
       we have reasons for our belief:
       - It's getting dark. I *must be* quite late.
       - You haven't eaten all day. You *must be* hungry.

       We use *must have* for the *past*:
       - They hadn't eaten all day. They *must have been* hungry.
       - You look happy. You *must have heard* the good news.

       We use the modal /should/ to *suggest* that something is true or will be
       true in the future, and to show you have reasons for you suggestion:
       - Ask Miranda. She *should know*.
       - It's nearly six o'clock. They *should arrive* soon.

       We use */should have/* to talk about the *past*:
       - It's nearly eleven o'clock. They *should have arrived* by now.


****** Activities:
       - I've got another meeting at 11 am, I might be late.
       - It's -15 outside. You must be frosen.
       - Talk to Mariam in Human Resources. She should be help.
       - He works every weekend, you know. That can't be healthy.
       - Mark's starting a new school on Monday. It can be very difficult at first.
       - I am thinking again about what Alison said. She may be right.

***** ability, permission, requests and advice
      The modal verbs are:

      | can | could | may | might | shall | should | will | would |

      The modals are used to do things like talking about ability, asking
      permission making requests, and so on.

****** Ability:
       We use /can/ to talk about someone's skill or general abilities:
       - She *can speak* several languages.
       - He *can swim* like a fish.
       - They *can't dance* very well.

       We use /can/ to talk about the ability to do something at a given
       time in the *present* or *future*:
       - You *can make* a lot of money if you are lucky.
       - Help. I *can't breathe*.
       - They *can run*, but they *can't hide*.

       We use /could/ to talk about *past* time:
       - She *could speak* several languages.
       - They *couldn't dance* very well.

       We use /could have/ to say that someone had the ability/opportunity
       to do something, but did *not* do it:
       - She *could have learned* Swahili, but she didn't have time.
       - I *could have danced* all night [but didn't].


****** Permissions:
       We use /can/ to ask for permission to do something.
       - Can I ask a question, please?
       - Can we go home now?

       /Could/ is more formal and *polite* than can:
       - Could I ask a question, please?
       - Could we go home now?

       /May/ is another *more formal* and polite way of asking for permission:
       - May I ask a question, please?
       - May we go home now?

       We use /can/ to *give* permission:
       - *You can go* home now if you like.
       - *You can borrow* my pen if you like.

       /May/ is a *more formal* and polite way of *giving* permission:
       - *You may go* home now, if you like.

       We use /can/ to say that *someone has permission* to do something:
       - *We can go out* whenever we want.
       - Students *can travel* free.

       /May/ is a *more formal* and polite way of saying that *someone*
       *has permission*:
       - Students *may travel* free.


****** Instructuions and requests:
       We use /could you/ and /would you/ as polite ways of telling or
       asking someone to *do something*:
       - *Could you take* a message please?
       - *Would you carry* this for me please?
       - *Could I have* my bill please?

       /Can/ and /will/ are less polite:
       - *Can you take* a message please?
       - *Will you carry* this for me please?


****** Suggestions and advice:
       We use /should/ to make suggestions and give advice:
       - You *should send* an email.
       - We *should go* by train.

       We use /could/ to make suggestions:
       - We *could meet* at the weekend.
       - You *could eat out* tonight.

       We use *conditionals* to give advice:
       - Dan *will help* you _if you ask_ him.

       *Past tenses* are more *polite*:
       - Dan *would help* you if *you asked* him.


****** Offers and invitations:
       We use /can I.../ and to make offers:
       - *Can I help* you?
       - *Can I do* that for you?

       We can also use /shall I.../
       - *Shall I help* you with that?
       - *Shall I call* you on your mobile?

       We sometime say /I can.../ or /I could.../ or /I'll(I will).../
       to make an *offer*:
       - *I can do* that for you if you like.
       - *I can give* you a lift to the station.
       - *I'll do* that for you if you like.
       - *I'll give* you a lift to the station.

       We use /would you like (to).../ for *invitations*:
       - *Would you like* to come round tomorrow?
       - *Would you like* another drink?

       We use /you must/ or /we must/ for a *very polite invitation*:
       - *You must come* round to see us.
       - *We must meet* again soon.


****** Obligation and necessity:
       We use /must/ to say that it is necessary to do something:
       - You *must stop* at a red light.
       - Everyone *must bring* something to eat.
       - You can wear what you like, but you *must look* neat and tidy.
       - I'm sorry, but you *mustn't make* a noise in here.

       We use /had to/ for this if we are talking about the past:
       - Everyone *had to bring* something to eat.
       - We could wear what we liked, but we *had to look* neat and tidy.

***** modals + have
      We use a modal verb with have and the past participle:

      | Subject       | Modal | Have | Past Participle |          |
      |---------------+-------+------+-----------------+----------|
      | They          | will  | have | arrived         | by now   |
      | You           | might | have | seen            | the film |
      | Jack and Jill | would | have | been            | late     |

      We use a *modal verb* with /have/ to refer back:
      - from point of the time in the *past*:
	+ We were very worried. Someone *might have taken* the car.
      - from the *present*
	+ It is nearly eight o'clock. They *will have arrived* by now.
      - or from the *future*:
	+ We won't eat unitl they arrive. They *might not have had* supper.
      - or to refer to *past* time:
	+ You *should have helped* her when she asked.
	+ They *might have got* lost. Nobody knows where they are.


***** can, could and could have
      We make *questions* by putting the subject after *can/could*:

      *Can I...? Can you...? Could I...? Could you...?* and so on.

      The *negative* form is /can't/ in spoken English and /cannot/ in
      written English. We sometimes say /cannot/, but it is very /empatic/.

****** We use /can/ and /can't/:

******* To talk about *ability*:
	- Maria *can speak* four languages.
	- I *can't swim*, but *my sister can*. 


******* To say that something is *possible* or *impossible*:
	- Learning English *can be* difficult. [= Learning English is sometimes difficult]
	- Children *can be* very naughty. [= Children are sometimes very naughty]
	- It's still light. *It can't be* bedtime.


******* For *requests* and *refusals* of requests
	- *Can I go* home now?
	- *You can go* whenever you like.
	- You *can borrow* the car today, but *you can't have* it tomorrow.


******* To *offer* to help someone:
	- *Can I help* you?
	- *Can I carry* that bag for you?

****** We use /could/ and /couldn't/ as the past tense of _can/can't_

******* To talk about *ability*:
	- I could run very fast when I was younger.
	- She couldn't get a job anywhere.


******* To say that something was *possible* or *impossible*:
	- Our teacher *could be* very strict when we were at school.
	- People *could starve* in those days.
	- You *couldn't use* computers in the nineteenth century.


******* To make a *polite* request:
	- *Could you go* now please?
	- *Could you lend* me a dictionary please?


******* To make a *polite* offer:
	- *Could I give* you a lift?
	- *I could carry* that for you.

****** We use *could have*:

******* To show that something is possible *now* or was possible at
	some time in the *past*:
	- It's ten o'clock. They *could have arrived* now.
	- They *could have arrived* hours ago.

****** Activities:
       - That can't be right.
       - Can you lend me a pen?
       - He can run very fast.
       - Can I get your bags?
       - Children can be difficult sometimes.
       - You can't watch any more TV.
       - I couldn't see the road.
       - Could I have your autograph.
       - The post could sometimes take weeks.
       - Could I get you anything else?


***** may, might, may have and might have
      Questions and negatives:
      We make *questions* by putting the subject after may/might:

      *May I...? Could I...? Might I...?* etc.

      The *negative* forms are *may not* and *might not*.


****** We use may:

******* When we are not sure about something:
	- Jack *may be coming* to see us tomorrow.
	- Oh dear! It's half past ten. We may *be late* for the meeting.
	- There *may not be* very many people there.


******* To make *polite requests*:
	- *May I borrow* the car tomorrow?
	- *May we come* a bit later?


******* When we use *may not* for a refusal it is /emphatic/:
	- You *may not*!
	- You *may not* borrow the car until you can be more careful with it.


****** We use might:

******* When we are not sure about something:
	- I *might see* you tomorrow.
	- It looks nice, but it *might be* very expensive.
	- It's quite bright. It *might not* rain today.


******* As the *past tense of may* for requests:
	- He asked if he *might borrow* the car.
	- They wanted to know if they *might come* later.


******* For *very polite* requests:
	- *Might I ask* you a question?
	- *Might we just interrupt* for a moment?


****** We use *may have* and *might have* to show
       that something has possibly happened now or happened at some time
       in the past:
       - It's ten o'clock. They *might have arrived now*
       - They *may have arrived* hours ago.


****** Activities:
       - You may not use my mobile phone!
       - May I have a word in private?
       - I may see you at the weekend.
       - She wondered if she might borrow some money.
       - They may have forgotten all about it.
       - May I have your attention, please?

***** can or could
      We use the modal /can/ to make general statements about what is
      possible:
      - It *can be* very cold in winter. (/= It sometimes very cold in
        winter/)
      - You /can/ easily /lose/ your way in the dark. (/= People often
        lose their way in the dark)

      We use /could/ as the past tense of /can/:
      - It *could be* very cold in winter.
      - You *could loose* your way in the dark.

      We use /could/ to show that something is possible in the future,
      but not certain:
      - If we don't hurry we *could be* late. (/=Perhaps/Maybe we will
        late/)

      We use /could have/ to show that something is/was possible now
      or at some time in the past:
      - It's ten o'clock. They *could have arrived* now.
      - They *could have arrived* hours ago.


****** Impossibility:
       We use the negative /can't/ or /cannot/ to show that something
       is impossible:
       - That *can't be* true.
       - You *cannot be* serious.

       We use /couldn't or could not/ to talk about the past:
       - We knew it *could not be* true.
       - He was obviously joking. He *could not be* serious.


****** Ability:
       We use *can* to talk about someone's skill or general abilities:
       - She *can speak* several languages.
       - He *can swim* like a fish.
       - They *can't dance* very well.

       We use *can* to talk about the ability to do something at a
       given time in the *present* or *future*:
       - You *can* make a lot of money if you are lucky.
       - Help. I *can't breathe*.
       - They *can run* but they *can't hide*.

       We use *could* to talk about *past* time:
       - She *could speak* several languages.
       - They *couldn't dance* very well.


****** Permission:
       We use /can/ to ask for permission to do something:
       - *Can I ask* a question, please?
       - *Can we go* home now?

       /Could/ is more *formal and polite* than /can/:
       - *Could I ask* a question, please?
       - *Could we go* home now?

       We use /can/ to *give* permission:
       - *You can go* home now if you like.
       - *You can borrow* my pen if you like.

       We use /can/ to say that someone *has* permission to do
       something:
       - *We can go* out whenever we want.
       - *Students can travel* free.


****** Instructions and requests:
       We use /could you/ and as a *polite* way of telling or asking
       someone to do something:
       - *Could you take* a message, please?
       - *Could I have* my bill please?

       /can/ is less polite:
       - *Can you take* a message please?


****** Offers and invitations:
       We use /can I .../ to make offers:
       - *Can I help* you?
       - *Can I do* that for you?

       We sometimes say /I can .../ or /I could .../ to make an offer:
       - *I can do* that for you if you like.
       - *I can give* you a lift to the station.


****** Activities:
       - I could see them in the distance.
       - It could rain. Take an umbrella.
       - She can't hear. There's too much noise.
       - Could we have a break, please?
       - We can leave at any time.

***** will or would
      We use /will/:
      - to talk about the future - to say what we believe will happen
      - to talk about what people want to do or are willing to do
      - to make promises and offers

      *would* is the /past tense/ form of *will*. Because it is a past
      tense it is used:
      - to talk about the past
      - to talk about hypotheses - things that are imagined rather
        than true
      - for politeness


****** Beliefs
       We use *will*

******* to say what we believe will happen in the future:
	- We'*ll be* late.
	- We *will have to* take the train.

	We use *would as the past tense of *will*:

******* to say what we believed would happen:
	- I thought I *would be* late ... so I *would have to*
	  take the train.


****** Offers and promises
       We use /I will/ or /We will/ to make offers and promises:
       - *I'll give* you a lift home after the party.
       - *We will* come and see you next week.


****** Willingness

******* to talk about what people want to do or are willing to do:
	- We*'ll see* you tomorrow.
	- Perhaps dad *will lend* me the car.

	We use /would/ as the past tense of /will/:

******* to talk about what people wanted to do or were willing to do:
	- We had a terrible night. The baby *wouldn't go* to sleep.
	  He kept waking up and crying.
	- Dad *wouldn't lend* me the car, so we had to take the train.


******* to talk about something that we did often in the past because
	we wanted to do it:
	- When they were children they used to spend their holidays at
          their grandmother's at seaside. They *would get up* early
          every morning and they'*d have* a quick breakfast then they
          *would run* across the road to the beach.


****** Conditionals
       We use /will/ in conditionals with /if/ and /unless/ to say
       what we think will happen in the future or present:
       - I'*ll give* her a call if I can find her number.
       - You *won't get in* unless you have a ticket.

       We use /would/ to talk about hypotheses, about something which
       is possible but not real:

******* to talk about the result or effect of a possible situation:
	- It /would be/ very expensive to stay in a hotel.


******* in conditionals with words like /if/ and /what if/
	In these sentences the main verb is usually in the _past tense_:
	- I /would give/ her a call if I /could/ find her number.
	- If I _had_ the money I'*d buy* a new car.
	- You /would loose/ weight if you _took_ more exercise.
	- If he _got_ a new job he /would probably make/ more money.
	- What if he _lost_ his job. What /would happen/ then?


******* we use conditionals to give advice:
	- Dan /will help/ you if you ask him.

	*Past* tenses are *more polite*
	- Dan /would help/ you if you *asked* him.


****** Phrases with would:

******* Would you..., would you mind (not) -ing, for requests:
	- Would you carry this for me please?
	- Would you mind carrying this?
	- Would you mind not telling him that?


******* Would you like..., would you like to..., for offers and invitations:
	- Would you like to come round tomorrow?
	- Would you like another drink?


******* I would like..., I'd like ... (you)(to) ..., to say
	what we want or what we want to do:
	- I'd like that one please.
	- I'd like to go home now.


******* I'd rather ... (I would rather) to say what we prefer:
	- I'd rather have that one.
	- I'd rather go home now.


******* I would think, I would imagine, I'd guess, to give an opinion
	when we are not sure or when want to be polite:
	- It's very difficult I would imagine.
	- I would think that's the right answer.


****** Activities
       - Would you mind closing the door?
       - Maybe I will speak to her.
       - We will see what happens tomorrow.
       - What would you like to eat?
       - If I see her I will let her know.
       - She wouldn't speak to me, she was so upset.
       - I promise I won't tell anyone.
       - She thought she would be late, so she took a taxi.
       - When I was in the army, we would get up at 5.30 a.m.
       - Come on. You won't need much, just a change of clothes.


***** will have or would have
      We use the perfective *will have* when we are looking back
      from when something will have happended.

      - By the end of the decade scientists *will have discovered*
	a cure for influenza.
      - I will phone at six o'clock. He *will have got* home
	by then.

      or looking /back/ from the *present*:

      - Look at the time. The match *will have started*.
      - It's half past five. Dad *will have finished* work.

      We use *would have* as the *past* tense from of will have:

      - I phoned at six o'clock. I knew he *would have got* home
	by then.
      - It wast half past five. Dad *would have finished* work.

      We use *would have* in *past* conditionals to talk about
      something that did *not happen*:

      - /If/ it had been a little warmer we *would have gone* for
	a swim.
      - He *would have been* very angry /if/ he had seen you.



**** Double object verbs
     
***** Some verbsl have *two objects* -
      an indirect object and a direct object:

      | Subject | Verb    | Indirect object | Direct object    |
      |---------+---------+-----------------+------------------|
      | My wife | sent    | me              | an email         |
      | He      | brought | his mother      | some flowers     |
      | He      | cooked  | all his friends | a delicious meal | 

      These clauses have the structure:
      ~V + N(indirect object) + N(direct object)~

***** We can use a *prepositional phrase*
      with /to/ or /for/ with an indirect object:

      | Subject | Verb    | Direct Object    | Prepositional Phrase |
      |---------+---------+------------------+----------------------|
      | My wife | sent    | an email         | to me                |
      | He      | brought | some flowers     | for his mother       |
      | He      | cooked  | a delicious meal | for all his friends  |

      These clauses have the structure:
      ~V + N(direct object) + Prepositional phrase (indirect object)~

***** Common verbs with /for/ and an indirect object are:

      | book  | buy  | get  | cook | keep |
      | bring | make | pour | save | find |

      - He =booked= a table *for me* at the restaurant.
      - We =made= toys *for all the children*.


***** Common verbs with /to/ and indirect object are:

      | give | lend | offer | pass | post    |
      | read | sell | send  | show | promise |
      | tell |      |       |      |         | 

      - He =gave= his program *to the man* sitting next to him.
      - They =sent= Christmas cards *to all their customers*.


***** If the /indirect/ object is a /long phrase/ we normally use
      *to* or *for*:

      - He =showed= his ticket *to the policeman standing by the door*.
      - We =kept= something to eat and drink *for all the people who arrived late*.


***** If the /indirect object/ is a /pronoun/ we normally use
      the N + V + N + N pattern:

      - I =poured= /him/ =another drink=.
      - Their mother =read= /them/ =another story=.


***** Activities:
      - He bought some flowers for his grandmother.
      - If you need a jacket, I can lend one to you.
      - He read the article to me and asked my opinion.
      - Can you get some bread for me if you are going to the shop?
      - The man passed the money to him across the counter.
      - I'll keep the chicken in the oven for you until you get home.
      - Would you like to pour some drinks for the guests?
      - I sold my car to her for $700.
      - I've promised the ring to my daughter after I'm gone.
      - Don't tell me now. Save it for later.


**** Phrasal verbs
     Some verbs are *two part* verbs (see Clauses, Sentences and
     Phrases). They consist of a *verb* and a *particle*:
      - grow + up
	>> The children are growing up.

      Often this gives the verb a *new meaning*:
      - take + after
	>> She takes after her mother.
	= She looks like her mother, or she behaves like her mother.
      - count + on
	>> I know I can count on you.
	= I know I can trust you, or I know I can believe you.

      Some *transitive* two part verbs (see Clauses, Sentences and
      Phrases) have *only one* pattern:

      *N(subject) + V + p + N(object)*

      | N(subject) | Verb      | Particle | N(object)  |
      |------------+-----------+----------+------------|
      | She        | takes     | after    | her mother |
      | I          | can count | on       | you        |
      | My father  | comes     | from     | Madrid     |

      Some transitive two part verbs are *phrasal verbs*. Phrasal
      verbs have *two different patterns*:

      - The usual pattern is: *N + V + N + p*
	| N(subject) | Verb            | N(object)   | Particle |
	|------------+-----------------+-------------+----------|
	| She        | gave            | the money   | back     |
	| He         | knocked         | the glass   | over     |
	| We         | will be leaving | our friends | behind   |

      - But sometimes these verbs have the pattern:
	*N + V + p + N*
	| N(subject) | Verb            | Particle | N(Object)   |
	|------------+-----------------+----------+-------------|
	| She        | gave            | back     | the money   |
	| He         | knocked         | over     | glass       |
	| We         | will be leaving | behind   | our friends |

      When the object is a *personal pronoun*, these verbs have the pattern:
      *N + V + N + p*:
      - +She gave back it+
	>> She gave it back
      - +He knocked over it+
	>> He knocked it over
      - +We will be leaving behind them+
	>>We will be leaving them behind

      Phrasal verbs are nearly always made up of a *transitive verb*
      and a *particle*. *Common verbs* with their frequent particles
      are:

      | bring: | about, along, back, forward, in, off, out, round, up             |
      | buy:   | out, up                                                          |
      | call:  | off, up                                                          |
      | carry: | off, out                                                         |
      | cut:   | back, down, off, out, up                                         |
      | give:  | away, back, off                                                  |
      | hand:  | back, down, in, on out, over, round                              |
      | knock: | down, out, over                                                  |
      | leave: | behind, out                                                      |
      | let:   | down, in, off, out                                               |
      | pass:  | down, over, round                                                |
      | point: | out                                                              |
      | push:  | about, around, over                                              |
      | put:   | across, away, down, forward, off, on, out, through, together, up |
      | read:  | out                                                              |
      | set:   | apart, aside, back, down                                         |
      | shut:  | away, int, off, out                                              |
      | take:  | apart, away, back, down, in, on, up, over                        |
      | think: | over, through, up                                                |

***** Activities
      - They have decided to call off the strike and return to work.
      - When are you going to take down those decorations?
	The wedding was two weeks ago!
      - We want to bring about real change in this country.
      - They had to put off the match until next week because of the snow.
      - She let out a tremendous sigh of relief.
      - They decided to carry out some research to see what people
	really thought.
      - Why don't you think over my proposal and tell me tomorrow?
      - Mother can come and live with us. I don't want her shut away
	in some institution.
      - They're going to knock down the old bank and build some flats
	there instead.
      - The walkers got cut off by the advancing tide.
      - Hand over the gun, son. You don't want anyone to get hurt.
      - And now I shall read out the names of the lucky winners!
      

**** Reflexive and ergative verbs

***** Reflexive verbs
      The reflexive pronouns (see pronouns) are:
      | singular: | myself, yourself, himself, herself, itself |
      |-----------+--------------------------------------------|
      | plural:   | ourselves, yourselves, themselves          | 

      We use a *reflexive pronoun* after a *transitive verb*
      when the *direct object* is the same as the *subject of the verb*:

      - I am teaching *myself* to play the piano.
      - Be careful with that knife. *You* might cut *yourself*.

      These are the verbs most often found with reflexive pronouns:

      | cut       | dry  | enjoy   | hurt  |
      |-----------+------+---------+-------|
      | introduce | kill | prepare | teach | 

      Some verbse *change their meaning* slightly *when* they have a
      reflexive pronoun as direct object:

      | amuse | apply    | busy    | content | behave |
      |-------+----------+---------+---------+--------|
      | blame | distance | express | find    | help   |
      | see   |          |         |         |        | 

      | Would you like to help yourself   | = | Would you like to take   |
      | to another drink                  |   | another drink.           |
      |-----------------------------------+---+--------------------------|
      | I wish the children would behave  | = | I wish the children      |
      | themselves.                       |   | would behave well.       |
      |-----------------------------------+---+--------------------------|
      | He found himself lying by the     | = | He was surprised when he |
      | side of the road.                 |   | realised that he was at  |
      |                                   |   | the side of the road.    |
      |-----------------------------------+---+--------------------------|
      | I saw myself as a famous actor.   | = | I imagined that I was a  |
      |                                   |   | famous actor.            |
      |-----------------------------------+---+--------------------------|
      | She applied herself to the job of | = | She worked very hard to  |
      | mending the lights.               |   | mend the lights.         |
      |-----------------------------------+---+--------------------------|
      | He busied himself in the kitchen. | = | He worked busily in the  |
      |                                   |   | kitchen.                 |
      |-----------------------------------+---+--------------------------|
      | I had to content myself with a    | = | I had to be satisfied    |
      | few Euros.                        |   | with a few Euros.        | 

      The verb /enjoy/ *always* has an object:

      - We all *enjoyed* _the party_.
      - I really *enjoyed* _my lunch_.

      +They all enjoyed+ They all *enjoyed* _themselves_.
      +I really enjoyed+ I really *enjoyed* _myself_.

      *Note*: We do *not* use a reflexive pronoun after verb which
      describe things people /usually/ do for themselves:

      - He *washed* in cold water.
      - He always *shaved* before going out in the evening.
      - Michael *dressed* and got ready for the party.

      We only use *reflexives* with these verbs for _emphasis_:

      - He *dressed himself* _in spite of his injures_.
      - _She's old enough_ to *wash herself*.


***** Ergative verbs
      Ergative verbs are *both* transitive and intransitive:

      | Peter closed the door   |   | Transitive: N + V + N |
      |-------------------------+---+-----------------------|
      | The door closed         |   | Intransitive: N + V   |
      |-------------------------+---+-----------------------|
      | I boiled a pan of water |   | Transitive: N + V + N |
      |-------------------------+---+-----------------------|
      | The pan boiled          |   | Intransitive: N + V   | 


      Common ergative verbs are:

      | begin  | break | change  | close    | drop | crack | dry   | end   |
      | finish | grow  | improve | increase | move | open  | shake | start |
      | stop   | tear  | turn    |          |      |       |       |       |

      + I *broke* the glass.
      + I dropped the glass and it broke.

      + The referee blew his whistle and started the match.
      + The march started at 2.30.

      + We grew some tasty potatoes.
      + The potatoes were growing well.

      + The wind shook the trees.
      + The trees shook in the wind.


      Many verbs to do with *cooking* are ergative verbs:

      | bake   | boil | cook  | defrost |
      |--------+------+-------+---------|
      | freeze | melt | roast |         | 

      - You should roast the meat at 200 degrees centigrade.
      - The meat was roasting in a hot oven.

      - I always defrost meat before I cook it.
      - I am waiting for the meas to defrost.

      - Melt the chocolate and pour it over the ice cream.
      - The chocolate was melting in a pan.

      Verbs to do with vehicles are often ergative:

      | back | crash | drive | fly  | reverse |
      |------+-------+-------+------+---------|
      | run  | sail  | start | stop |         | 

      - I'm learning to fly a plane.
      - The plain flew at twice the speed of sound.

      - He crashed his car into a tree.
      - His car crashed into a tree.


      We use some ergative verbs with only a few nouns:

      | catch | dress, coat, clothes, trousers etc.   |
      |-------+---------------------------------------|
      | fire  | gun, pistol, rifle, rocket            |
      |-------+---------------------------------------|
      | play  | guitar, music, piano, violin, CD, DVD |
      |-------+---------------------------------------|
      | ring  | bell, alarm                           | 

      - She caught her dress on a nail.
      - Her dress caught on a nail.

      - He fired a pistol to start the race.
      - The pistol fired to start the race.


**** Verbs followed by /to/ + infinitive

***** Some verbs are followed by the /to-infinitive/:

      - I decided to go home as soon as possible.
      - We all wanted to have more English classes.


      Common verbs followed by the /to-infinitive/ are:

      Verbs of thinking and feeling:
      | choose     | decide | expect | forget   | hate       |
      |------------+--------+--------+----------+------------|
      | hope       | intend | learn  | like     | love       |
      |------------+--------+--------+----------+------------|
      | mean       | plan   | prefer | remember | would like |
      |------------+--------+--------+----------+------------|
      | would love |        |        |          |            | 

      Verbs of saying:
      | agree | promise | refuse |

      Other common verbs are:
      | arrange | attempt | fail | help |
      |---------+---------+------+------|
      | manage  | tend    | try  | want |

***** Some verbs are followed by a noun and the to-infinitive:

      - She asked him to send her a text message.
      - He wanted all his friends to come to his party.


      Common verbs with this pattern are:

      Verbs of saying:
      | advise   | ask    | encourage | invite | order |
      |----------+--------+-----------+--------+-------|
      | persuade | remind | tell      | warn   |       |


      *Note*: The verb /warn/ is normally used with *not*

      - The police warned everyone not to drive too fast.


      Verbs of wanting or liking:
      | expect | intend | would      |
      |--------+--------+------------|
      | prefer | would  | would like |

      Other verbs with this pattern are:
      | allow | enable | force |
      |-------+--------+-------|
      | get   | touch  |       | 

***** Passive infinitive
      Many of these verbs are sometimes followed by a passive
      infinitive (to be + past participle):

      - I expected to be met when I arrived at the station.
      - They wanted to be told if anything happened.
      - I don't like driving myself. I prefer to be driven.


***** Activities
      - My bicycle's been stolen! I forgot to lock it when I went 
	into the shop.
      - Have a good holiday and I hope to hear all about it when 
	you get back.
      - I'm learning to swim. I never did when I was a kid.
      - Her mother's ill. I meant to send her some flowers.
      - I didn't know you wrote poetry. I'd love to read some of it.
      - It was an awful experience. I prefer not to talk about it.
      - I wanted to explain, but she refused to listen.
      - After the divorce, I helped him to get his life back 
	together again.


      - Having failled to get into college, he got a well-paid job 
	instead.
      - I'm meeting John in town and we've arranged to have a dinner.
      - She invited me out but I managed to think up an excuse.
      - You will remember to put the cat out, won't you?
      - The phone call sounded genuinue so I advised him to contact 
	the police.
      - My art teacher was the one who encouraged me to regard 
	photography as a serious career.
      - After several hours of talking, they persuaded her to come 
	down off the roof.
      - Now Annie, stop crying, I want you to tell me exactly what 
	happened.



      - Doing a martial art has taught me to have much more confidence 
	in myself.
      - The state of the economy forced the government to take drastic 
	measures.
      - Wow! I didn't expected the music to be so loud!
      - They warned us not to walk in certain areas after dark.
      - Can I remind you to return all your library books before the 
	end of term.
      - They have invited me to go to their wedding.
      - They ordered him to lie flat on the floor with his hand 
	behind his back.
      - I don't like receiving bad news in an email, I prefer to be 
	told in person.


**** DONE Verbs followed by /-ing/ clauses

***** Common verbs followed by /-ing/ nouns are:

      | detest | dislike | enjoy | hate |
      | fancy  | like    | love  |      |


      - I love swimming but I hate jogging.
      - They always enjoyed visiting their friends.
      - A: do you fancy going for a walk?
      - B: I wouldn't mind.


***** Phrases with mind:

      - wouldn't mind (= would like)
      - don't mind (= I am willing to)
      - would you mind (= will you please...?)


      + I wouldn't mind having some fish and chips.
      + I don't mind waiting for a few minures.
      + Would you mind holding this for me?


***** Verbs of sayind and thinking:

      | admit   | consider | deny    |
      | imagine | remember | suggest |


      - Our guide suggested waiting until the storm was over.
      - Everyone denied seeing the accident.


***** Other common verbs are:

      | avoid    | begin | finish | keep | miss |
      | practice | risk  | start  | stop |      |


      - I haven't finished writing this letter.
      - Let's practise speaking English.


***** Passive form of /-ing/
      Many of these verbs are sometimes followed by the passive form
      of /-ing/: *being* + past participle:

      - I don't like being interrupted.
      - Our dog lives being stroked under the chin.


***** Noun + /-ing/ clause
      Some verbs are followed by a noun and an /-ing/ clause:

****** Verbs to do with the senses:

       | see   | watch  | hear |
       | smell | listen | etc. |

       - We saw everybody running away.
       - I could hear someone singing.


****** Other common verbs:

       | catch | find    | imagine |
       | leave | prevent | stop    |


       - I caught someone trying to break my house.
       - We couldn't prevent them getting away.


***** Activities

      - You say you want to rent. Have you cosidered buying?
      - Later in court, he admitted stealing antiques worth
	many thousands of pounds.
      - Even when everything was going wrong I kept telling
	myself it would be all right.
      - When the company went bust, he risked losing everything.
      - Now the kids have left home, I miss having people around.
      - She's so bossy! She needs to stop ordering people around.
      - Weren't houses small in these days. Imagine living in
	one of these.
      - If I catch you doing that again, there will be trouble!


**** TODO Verbs followed by /that/ clause

*** TODO Clause, phrase and sentence

** Pronounce
*** Reading aloud at the regular base                          :reading:list:
**** Adventures of Hucklberry Finn                                      :AHF:
**** My Family and Other Animals                                       :MFOA:
**** How to Read a Book                                                 :HRB:
**** Moonwalking with Einstein                                          :MwE:
**** The Time Machine					:TTM:
**** Python Talk to Me podcast
**** [[Version Control with Git][Version Control with Git]]
**** [[TDPD][Test-Driven Python Development]]
** Vocabulary [50%]
*** Vocabla repetition
*** Quora reading
**** TODO Quotations about life sense
     #+BEGIN_QUOTE
     One easy way to create a unique skill is to combine two
     seemingly unrelated skills into one skill.  Being the best
     computer scientist in the world is really hard.  Being the
     person who knows the most about dolphins is really hard.
     But being the person who best knows about the intersection
     of software and dolphins is accomplishable.

     But if you and I have a debate and we argue two sides, and
     you are proven wrong, that doesn't make me right.  I could
     be just as wrong as you.
     #+END_QUOTE
**** Software Engineering maroon
     #+BEGIN_QUOTE
     Decorators are convenient for factoring out common prologue,
     epilogue, and/or exception-handling code in similar functions
     (much like context managers and the "with" statement), such
     as:
     - Acquiring and releasing locks (e.g. a "@with_lock(x)" decorator);
     - Entering a database transaction (and committing if successful, 
       or rolling back upon encountering an unhandled exception);
     - Asserting pre- or post-conditions (e.g. "@returns(int)");
     - Parsing arguments or enforcing authentication (especially in web 
       application servers like Pylons where there's a global request 
       and/or cookies object that might accompany formal parameters 
       to a function);
     - Instrumentation, timing or logging, e.g. tracing every time a 
       function runs;
     - They are also used as shorthand to define class methods 
       (@classmethod) and static methods (@staticmethod) in Python 
       classes.
     #+END_QUOTE
     
*** TODO Exercises
    http://merriam-webster.com/dictionary/worth

** Communication
   Learn how to:
*** Speak clearly

*** Ask proper questions

*** Listen carefully

*** Pay attention to details

* Jargon & definition 		                :corpora:
** PP4E
*** Letâs step back for a moment and consider how far âve come.

**** 

*** If youâve already studied Python in any sort of depth,
    you probably already know that this is where its OOP support begins
    to become attractive:

    Structure
    With OOP,  can naturally associate processing logic with record dataâclasses
    provide both a program unit that combines logic and data in a single package and
    a hierarchy that allows code to be easily factored to avoid redundancy.

    Encapsulation
    With OOP,  can also wrap up details such as name processing and pay increases
    behind method functionsâi.e.,  are free to change method implementations
    without breaking their users.

    Customization
    And with OOP,  have a natural growth path. Classes can be extended and cus-
    tomized by coding n subclasses, without changing or breaking already working
    code.

** PfDA
*** Munge/Munging/Wrangling
    Describes the overall process of manipulating unstructured and/or messy data
    into a structured or clean form. The word has snuck its way into the jargon
    of many modern day data hackers. Munge rhymes with âlungeâ.

*** Interacting with the outside world
    Reading and writing with a variety of file formats and databases.

*** Preparation
    Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis.

*** Transformation
    Applying mathematical and statistical operations to groups of data sets to
    derive new data sets. For example, aggregating a large table by group variables.

*** Modeling and computation
    Connecting your data to statistical models, machine learning algorithms, or other
    computational tools

*** Presentation
    Creating interactive or static graphical visualizations or textual summaries

** Python Beyond
   A read-eval-print loop (REPL)
** OrgMode
*** Curious thought
    #+BEGIN_QUOTE
        Let us change our traditional attitude to the construction of
	programs: Instead of imagining that our main task is to instruct
	a computer what to do, let us concentrate rather on explaining
	to human beings what we want a computer to do.

	The practitioner of literate programming can be regarded as an
	essayist, whose main concern is with exposition and excellence of
	style. Such an author, with thesaurus in hand, chooses the names
	of variables carefully and explains what each variable means.
	He or she strives for a program that is comprehensible because
	its concepts have been introduced in an order that is best for
	human understanding, using a mixture of formal and informal
	methods that reinforce each other.

    â Donald Knuth
    #+END_QUOTE
*** Getting Things Done is a time-management method
    described in a book of the same title by productivity consultant
    David Allen. It is often referred to as GTD. The GTD method rests
    on the idea of moving planned tasks and projects out of the mind
    by recording them externally and then breaking them into
    actionable work items. This allows one to focus attention on
    taking action on tasks, instead of on recalling them.
** Cracking Interview
*** A hiring committee typically wants to see one interviewer
    who is an "enthusiastic endorser"
*** Be ready to code on a whiteboard and make sure all of your
    thoughts are clearly communicated
*** Well, I may be embellishing a little, but hear me out.
*** I am not exaggerating to say that I did not understand
    a single answer she gave during the interview p.16
*** One of the most important messages that you, as a candidate,
    can convey in your intervi is hiring me will make your lives
    easier
*** It was a real mess; we'd inherited a nasty ball of spaghetti,
    and we needed people who could jump in, figure things out,
    and be part of the solution.
*** Sometimes, I donât have a very good attention to detail.
    While thatâs good because it lets me execute quickly, it also
    means that I sometimes make careless mistakes. Because of that, I
    make sure to always have someone else double check my work.
*** Table 1
*** Table 2
*** I can go into more details if youâd like
*** I asked him open-ended questionson how he felt it was going,
    and which components he was excited about tackling.
*** Handling Technical Questions
**** So when you get a hard question, donât panic.
     Just start talking aloud about how you would solve it.
*** Five Algorithm Approaches
**** I: EXAMPLIFY
**** II: PATTERN MATCHING
**** III: SIMPLIFY & GENERALIZE
**** IV: BASE CASE AND BUILD
**** V: DATA STRUCTURE BRAINSTORM
*** If what you want is to stay an engineer for life, then there is
    absolutely nothing wrong with that.
*** Top Ten Mistakes Candidates Make
    #+BEGIN_QUOTE
    Quality beats quantity
    #+END_QUOTE
    When asked a question, break your answer into three parts
    (Situation / Action / Response, Issue 1 / Issue 2 / Issue 3, etc)
    and speak for just a couple sentences about each. If I want more
    details, Iâll ask!
       
** Writing Idiomatic Python

*** Oftentimes,
    functions need to accept an arbitrary list of positional parameters
    and/or keyword parameters , use a subset of them, and forward the rest to
    another function.
*** Though this is explicitly mentioned in the Python tutorial,
    it nevertheless surprises even experienced developers.
*** Oftentimes, functions need to accept an arbitrary list of positional
    parameters and/or keyword parameters , use a subset of them, and forward
    the rest to another function. Using *args and **kwargs as parameters
    allows a function to accept an arbitrary list of positional and keyword
    arguments, respectively.
*** 
** Effective Python

*** Python3

**** bytes
     raw 8-bit values
**** str
     Unicode characters
*** Python2

**** str
     raw 8-bit values
**** Unicode
     Unicode characters
** Tutorial
   If you still don't understand how methods work, a look at the
   implementation can perhaps clarify matters.
   

* Enlarge Emacs toolbox 	                :Emacs:

** Sacha [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][config]]
** Elpy                                                                :elpy:
   [[http://elpy.readthedocs.org/en/latest/ide.html#documentation][Elpy]]
** Update Emacs version up to 24.5	        :24.5:
   #+NAME: Emacs24.5
   - Package `emacs-24.4' is unavailable
   - Download from http://ftp.gnu.org/gnu/emacs/
   - tar -xf emacs*
   - sudo apt-get remove emacs
      remove old version
   - cd emacs* && ./configure && make
     or ./configure --with-x-toolkit=no
     --with-xpm=no --with-gif=no --with-tiff=no
   - sudo checkinstall -D
      create .deb package
   - sudo apt-mark hold emacs
     to prevent unneccessary update with 14.04 core
** OrgBullets
   https://github.com/sabof/org-bullets
** YaSnippet
   [[http://capitaomorte.github.io/yasnippet/][YaSnippet]]
*** predefined snippets for PyMode
    ~/.emacs.d/elpa/elpy-1.10.0/snippets/python-mode/
** OrgMode					:OrgMode:
   [[http://orgmode.org/orgcard.pdf][refCard]] <2016-01-18 Mon>
*** Reveal OrgMode BaBel <2016-03-01 Tue>	:babel:
**** Intro
     http://orgmode.org/worg/org-contrib/babel/intro.html
**** Tutorial
     http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
**** Configure languages
     http://orgmode.org/worg/org-contrib/babel/languages.html#configure
**** Supported languages
     http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
**** shortcuts					:shortcuts:
     |----------+---------------------|
     | Sequence | Expands to          |
     |----------+---------------------|
     | <s       | #+BEGIN_SRC         |
     | <e       | #+BEGIN_EXAMPLE     |
     | <q       | #+BEGIN_QUOTE       |
     | <v       | #+BEGIN_VERSE       |
     | <V       | #+BEGIN_VERBATIM    |
     | <c       | #+BEGIN_CENTER      |
     | <l       | #+BEGIN_LaTeX       |
     | <L       | #+LaTeX             |
     | <h       | #+BEGIN_EXPORT html |
     | <H       | #+HTML              |
     | <a       | #+BEGIN_ASCII       |
     | <A       | #+ASCII:            |
     | <i       | #+INDEX:            |
     | <I       | #+INCLUDE:          |
     |----------+---------------------|

*** Literate programming			:literate:programming:
    #+BEGIN_QUOTE
    Literate programming is what you need to rise above the ordinary level
    of achievement. But I donât believe in forcing ideas on anybody.
    If literate programming isnât your style, please forget it and do what
    you like. If nobody likes it but me, let it die.
    [[http://www.informit.com/articles/article.aspx?p%253D1193856][Donald Knuth]]
    #+END_QUOTE

**** Full-fledged sample
     #+NAME: illustration
     [[http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html][The brilliant illustration]]
**** Python 
     Demands to install Org recent version 
***** This is the first and successful attempt	:CODE:
      #+begin_src python :results output
	import sys
	print(sys.version)
	print("Hello, world!")
	print("This is a test")
	for i in range(4):
	    print(i)
      #+end_src python

      #+RESULTS:
      : 3.4.3 (default, Oct 14 2015, 20:33:09) 
      : [GCC 4.8.4]
      : Hello, world!
      : This is a test
      : 0
      : 1
      : 2
      : 3
***** Lets try to embed code snippet from outside
      #+BEGIN_SRC python
	print(sys.version)
          
      #+END_SRC

      #+RESULTS:

***** Examples from real world
      #+name: session_init
      #+begin_src python :results output :session test
	# Example from Slatkin's book
	a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
	print('First four:', a[:4])
	print('Last four: ', a[-4:])
	print('Middle two:', a[3:-3])
      #+end_src

      #+RESULTS: session_init
      : 
      : >>> First four: ['a', 'b', 'c', 'd']
      : Last four:  ['e', 'f', 'g', 'h']
      : Middle two: ['d', 'e']

      #+BEGIN_SRC python :results output :session test
	import sys
	# it's the session test
	print('This is a session variable a : ', a)
      #+END_SRC

      #+RESULTS:
      : 
      : ... This is a session variable a :  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

***** Session test
      #+BEGIN_SRC python :results output :session test 
	print(sys.version)
	print('How it might be possible!', a[2:5])
      #+END_SRC

      #+RESULTS:
      : 3.4.3 (default, Oct 14 2015, 20:33:09) 
      : [GCC 4.8.4]
      : How it might be possible! ['c', 'd', 'e']

***** Full-Fledged
      #+BEGIN_SRC python :results output
	# initialize data to be stored in files, pickles, shelves

	# records
	bob = {'name': 'Bob Smith', 'age': 42, 'pay': 30000, 'job': 'dev'}
	sue = {'name': 'Sue Jones', 'age': 45, 'pay': 40000, 'job': 'hdw'}
	tom = {'name': 'Tom',       'age': 50, 'pay': 0,     'job': None}

	# database
	db = {}
	db['bob'] = bob
	db['sue'] = sue
	db['tom'] = tom

	print('\n')
	for key in db:
            print(key, '=>\n  ', db[key])


      #+END_SRC

      #+RESULTS:
      : 
      : 
      : bob =>
      :    {'pay': 30000, 'job': 'dev', 'age': 42, 'name': 'Bob Smith'}
      : sue =>
      :    {'pay': 40000, 'job': 'hdw', 'age': 45, 'name': 'Sue Jones'}
      : tom =>
      :    {'pay': 0, 'job': None, 'age': 50, 'name': 'Tom'}

**** Bash 		                        :shell:

***** Test sample				:sample:
      #+BEGIN_SRC shell :results output
	pwd
	cd ../../
	pwd
	echo
	git status
      #+END_SRC

      #+RESULTS:
      : /home/antony/Desktop/DVCS/lib/Python/edu
      : /home/antony/Desktop/DVCS/lib
      : 
      : On branch master
      : Your branch is ahead of 'origin/master' by 11 commits.
      :   (use "git push" to publish your local commits)
      : nothing to commit, working directory clean

**** javascript					:js:
     #+BEGIN_SRC js :cmd "nodejs"
       var total = 0, count = 1;
       while (count <= 10) {
       total += count;
       count += 1;
       }
       console.log(total);
     #+END_SRC
     
     #+RESULTS:
     : 55
     : undefined

*** Dates <2016-02-03 Wed>
*** Tags <2016-02-04 Thu>
    C-c \ or C-c / m
** KeyChord
   [[http://www.emacswiki.org/emacs/key-chord.el][KeyChord]] <2016-01-18 Mon>
*** mkdir ~/.emacs.d/lisp/
**** put into it key-chord.el
**** and key-chord-map.el:
     (key-chord-define-global "hj"     'undo)
     (provide 'key-chord-map)
*** add into init.el:
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    (require 'key-chord)
    (key-chord-mode 1)
    (require 'key-chord-map)
** New shortcuts                                                       :keys:
*** General 					:gen:
**** *Help* with keys C-h b, d, k, v(ariable)
**** M-x toggle-truncate-lines
**** Switch buffer in the stack C-x Left/Right
**** Key bindings
     C-h b
     C-x 8 
**** Word spell check M-x $
**** M-x ispell
**** GoTo M-g g, M-g M-g
**** Elisp evaluation
     M-x eval-buffer
**** Bookmarks (set/goto/list/del:
     C-x r m/b/l/M-x [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]]-delete
**** Some keys in â*Bookmark List*â:
     âaâ â show annotation for the current bookmark
     âAâ â show all annotations for your bookmarks
     âdâ â mark various entries for deletion (âxâ â to delete them)
     âeâ â edit the annotation for the current bookmark
     âmâ â mark various entries for display and other operations, (âvâ â to visit)
     âoâ â visit the current bookmark in another window, keeping the bookmark list open
     âC-oâ â switch to the current bookmark in another window
     ârâ â rename the current bookmark
**** Text accumulation
     [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Accumulating-Text.html][==>]]
***** M-x append-to:
      buffer, register or file
***** M-x prepend-to:
      buffer or register
**** Read-only mode
     C-x C-r RET (view-mode)
     C-x C-q read-only mode toggle
**** Nero browser        :nero:browser:
     M-x nero
**** Lynx inside        :lynx:browser:
     M-x ansi-term RET lynx
**** Replace new line
     C-q C-j
**** Move forward/backward sentence
     M-e/a
**** Delete word/character
     M/C-d
     M-DEL previous word
**** Delete sentence
     M-k next
     C-x DEL previous
**** Kill line
     C-k
     M-C-k from end of the line up to the cursor
**** Manipulation with frames			:frames:
     C-x 5 b switch to buffer other frame
     C-x r f store the current frameset in register
**** Mark ring 16 items there
     C-u C-SPC Jump to last mark
**** Undo
     C-_
**** (Un)Comment region
     M-;
**** Completion
     M-/
**** eShell
     C-x m
**** Indent the region
     C-M-\
**** Spell checking
     M-x flyspell-mode
**** Long scroll in two windows
     M-x follow-mode
**** List of keys in the particular mode
     C-h m
**** Version control				:vc:
***** Diff
      C-x v =
***** Diff in branches
      C-u C-x v =
***** Undo
      C-x v u
***** Commit log
      C-x v l
      - f - visit particular rev
      - d - review particualr diff
***** Magit
      - status C-x g RET
      - main Git concept involves a conscious atomic committing Â® 
*** Orgmode 			                :org:
**** Getting started

     | To read the on-line documentation try | M-x org-info |

**** Visibility Cycling				:visibility:

     | rotate current subtree between states         | TAB             |
     | rotate entire buffer between states           | S-TAB           |
     | restore property-dependent startup visibility | C-u C-u TAB     |
     | show the whole file, including drawers        | C-u C-u C-u TAB |
     | reveal context around point                   | C-c C-r         |

**** Motion					:motion:

     | next/previous heading             | C-c C-n/p |
     | next/previous heading, same level | C-c C-f/b |
     | backward to higher level heading  | C-c C-u   |
     | jump to another place in document | C-c C-j   |
     | previous/next plain list item     | S-UP/DOWN |

**** Markup					:markup:
     *bold*
     /italic/
     _underlined_
     =verbatim=
     ~code~
   +strike-through+
**** Tags
     Set C-c C-q
**** Tables
***** |header|...
***** Table header closing
      C-c <RET>
**** Babel
***** Execute code in the current subtree
      C-c C-v s
***** Backward to higher level heading
      C-c C-u
***** Find tag
      C-c \

**** Sparse trees
***** C-c / <extra-key>
***** Exit out from sparse tree
      C-c C-c
** MaGit					:Magit:
*** Core features
    In Magit staging a hunk or even just part of a hunk is as trivial as
    staging all changes made to a file.
    That being said, many users
    have reported that using Magit was what finally taught them what Git
    is capable of and how to use it to its fullest.
    Magit wraps and in many cases improves upon at least the following Git
    porcelain commands:
**** add
     Add file contents to the index
**** am
     Apply a series of patches from a mailbox
**** bisect
     Use binary search to find the commit that introduced a bug
**** blame
     Show what revision and author last modified each line of a file
**** branch
     List, create, or delete branches
**** checkout
     Switch branches or restore working tree files
**** cherry
     Find commits not merged upstream
**** cherry-pick
     Apply the changes introduced by some existing commits
**** clean
     Remove untracked files from the working tree
**** clone
     Clone a repository into a new directory
**** commit
     Record changes to the repository
**** config
**** describe
     Describe a commit using the most recent tag reachable from it
**** diff
     Show changes between commits, commit and working tree, etc
**** fetch
     Download objects and refs from another repository
**** format-patch
     Prepare patches for e-mail submission
**** init
**** log
     Show commit logs
**** remote
     Manage set of tracked repositories
**** request-pull
     Generates a summary of pending changes
**** reset
     Reset current HEAD to the specified state
     =X= and =x= keys in Magit commits list
**** revert
     Revert some existing commits by compensatory commit
     =V= key in Magit
**** rm
     Remove files from the working tree and from the index
**** show
     Show various types of objects
**** stash
     Stash the changes in a dirty working directory away
**** submodule
     Initialize, update or inspect submodules
**** tag
     Create, list, delete or verify a tag object signed with GPG

*** Installation
    M-x package-install RET magit RET
**** Upgrade Emacs version >24.4 (see above)
**** Upgrade Git version at the topmost 			:git:upgrade:
     #+NAME: Git update
     - sudo add-apt-repository ppa:git-core/ppa
     - sudo apt-get update
     - sudo apt-get install git
*** Getting started
*** Interface concepts
*** Manipulating
*** Transferring
*** Miscellaneous
*** Customizing
*** Plumbing
*** Extract
**** Discard hunk in _(un)_staged area:
     k(ill) malicious changes and revert buffer
*** Plugins
**** github-clone
**** magit-hg-pulls

** Emacs regexp				:regexp:
*** Emacs regex Syntax
    The most commonly used command that uses regex is ~query-replace-regexp~.

    Here's commonly used patterns.

    Pattern         Matches                                                  
    .               Any single character except newline ("\n").              
    \.              One period                                               
    [0-9]+          One or more digits                                       
    [^0-9]+         Skip digits                                              
    [A-Za-z]+       one or more letters                                      
    [-A-Za-z0-9]+   one or more {letter, digit, hyphen}                      
    [_A-Za-z0-9]+   one or more {letter, digit, underscore}                  
    [-_A-Za-z0-9]+  one or more {letter, digit, hyphen, underscore}          
    [[:ascii:]]+    one or more ASCII chars. (codepoint 0 to 127, inclusive) 
    [[:nonascii:]]+ one or more none-ASCII characters (â Unicode characters) 
    [\n\t ]+        one or more {newline character, tab, space}.             
    
    Pattern     Matches                             
    "\([^"]+\)" capture text between double quotes. 
*** Repetition
    Pattern Matches                                                             
      +       match previous pattern 1 or more times                              
      *       match previous pattern 0 or more times                              
      ?       match previous pattern 0 or 1 time                                  
      +?      match previous pattern 1 or more times, but with minimal match      
	      (aka non-greedy)                                                    

*** Boundary anchors
      Pattern Matches                              
      ^â¦      Beginning of {line, string, buffer}  
      â¦$      End of {line, string, buffer}        
      \`â¦     Beginning of {string, buffer}        
      â¦\'     End of {string, buffer}              
      \b      word boundary marker                 

    Unicode character can be used literally. But for non-printable ones such as
    âRIGHT-TO-LEFT MARKâ, you can represent them by a code. See: Emacs: Newline
    Representation ^M ^J ^L
    
    For complete list of regex syntax, see: (info "(elisp) Syntax of Regexps")
    
    Matching Newline ï¼ Tab
    
    When using interactive commands, emacs won't understand \n or \t.
    
    - To enter a new line, press ãCtrl+q Ctrl+jã
    - To enter a Tab character, press ãCtrl+q Tab â¹ã 

*** Case sensitivity

    When using [a-z], it is not case sensitive by default. Case sensitivity is
    controlled by the variable case-fold-search. Call toggle-case-fold-search to
    toggle it.
    
    Do not use [A-z], because that'll match some punctuation chars too. Use
    [A-Za-z].

*** Samples:
    Ctrl-q Ctrl-j [-][-_A-Za-z0-9 ]+[.srt]+$

** Capture
   Capture lets you quickly store notes with little interruption of your
   work flow.
*** Setting up
*** Using
*** Capture templates

** Voca-builder				:vocabulary:extension:

***** Exit out from sparse tree
      C-c C-c
** MELPA installation
** NOTES
**** Shell
     - eshell fully-customizing eLisp 
**** cSSh feature
     launch many tasks in parallel on the different hosts
     cssh clusterssh implementation for emacs

**** color-theme.el
**** M-x oddmuse-edit
**** M-x irc /join #emacs
**** Blog about Emacs
     [[http://planet.emacsen.org][blog]]
**** Pluralsight
     great resource with video tutorials 
** Emacs as a beagle
   http://ergoemacs.org/emacs/emacs_grep_find.html
*** In the current directory
    =M-x grep <Tab>=
*** Recursievly
    =M-x rgrep <Tab>=

* Programming as art&craft
** Problem solving skill
*** Lynda's approach
**** Read the problem completely twice

**** Solve the problem manually with 3 sets of sample data

**** Optimize the manual steps

**** Write the manual steps as comments or pseudo-code

**** Replace the comments or pseudo-code with real code

**** Optimize the real code
   
**** Common Mistakes
***** Jumping right into code

***** Not understanding the problem

***** Skipping manual steps

**** Practicing
***** TopCoder

****** [[http://bit.ly/VUZa8u][Algorithm contents]]

****** [[http://bit.ly/Yc6hnr][Advanced tutorials]]

***** [[http://codility.com/][Codility]]

***** [[http://projecteuler.net/][Project Euler]]

***** [[https://www.codewars.com/users/Anton%2520S.%2520Kosinov][CodeWars]]

*** How to Solve It:
    #+BEGIN_QUOTE
    A perennial bestseller by eminent mathematician G. Polya, How to
    Solve It will show anyone in any field how to think straight.

    In lucid and appealing prose, Polya reveals how the mathematical
    method of demonstrating a proof or finding an unknown can be of
    help in attacking any problem that can be "reasoned" out--from
    building a bridge to winning a game of anagrams. Generations of
    readers have relished Polya's deft--indeed,
    brilliant--instructions on stripping away irrelevancies and going
    straight to the heart of the problem.

    In this best-selling classic, George PÃ³lya revealed how the
    mathematical method of demonstrating a proof or finding an unknown
    can be of help in attacking any problem that can be "reasoned"
    out--from building a bridge to winning a game of anagrams.
    Generations of readers have relished PÃ³lya's deft instructions on
    stripping away irrelevancies and going straight to the heart of a
    problem. How to Solve It popularized heuristics, the art and
    science of discovery and invention. It has been in print
    continuously since 1945 and has been translated into twenty-three
    different languages.

    PÃ³lya was one of the most influential mathematicians of the
    twentieth century. He made important contributions to a great
    variety of mathematical research: from complex analysis to
    mathematical physics, number theory, probability, geometry,
    astronomy, and combinatorics. He was also an extraordinary
    teacher--he taught until he was ninety--and maintained a strong
    interest in pedagogical matters throughout his long career. In
    addition to How to Solve It, he published a two-volume work on the
    topic of problem solving, Mathematics of Plausible Reasoning, also
    with Princeton.

    PÃ³lya is one of the most frequently quoted mathematicians, and the
    following statements from How to Solve It make clear why: "My
    method to overcome a difficulty is to go around it." "Geometry is
    the science of correct reasoning on incorrect figures." "In order
    to solve this differential equation you look at it till a solution
    occurs to you."
    #+END_QUOTE
** Computation algorithms

*** 6.006 Introduction to Algorithms

**** Introduction

***** Algorithmic thinking, peak finding

***** Models of computation, Python cost model, document distance1

**** Sorting and Trees

***** Insertion sort, merge sort

****** Sorted sequences applied usage

******* Finding a median
	A[0:n] ==> B[0:n]
	unsorted   B[n/2]

******* Binary search
	A[0:n]  looking for specific item k
	B[0:n]  comparer to B[n/2]

****** Insertion sort
       For i = 1, 2 ... n
       insert A[i] into sorted array A[0:i-1]
       by pairwise swaps down to the correct position

          _                   _                   _
       |5|2|4|6|1|3| ==> |2|5|4|6|1|3| ==> |2|4|5|6|1|3|
         ^                   ^
		_                      _
       |2|4|5|6|1|3| ==>  |1|2  |4|5|6|3| ==> |1|2|3|4|5|6|
       ^ ^ ^ ^ ^                ^ ^ ^ ^

****** Merge Sort
       *Divide & conquer*

       - Split unsorted sequence into two parts
       - Sort each one separately
       - Merge they together
         - Two sorted arrays as input
         - Two fingers algo

****** Complexity
       Merge sort in Python 2.2lg(n) microsec
       Insertion sort in Python 0.2n^2 microsec
       Insertion sort in C      0.01n^2 microsec


***** Heaps and heap sort
     
****** Applied usage as a =Priority Queue=
       #+BEGIN_QUOTE
       Implements a set =S= of elements, each of elements associated with a key.
       #+END_QUOTE

****** Typical operations

******* Insert(S, x): insett element x into set =S=

******* Max(S): return element of =S= with a largest key

******* Extract_max(S): ^^^ and remove it from =S=

******* Increase(S, x, k): increase the value of x's key to new value k

****** Heap as a Tree
       - Root of tree: first element
       - Parent(i) = i/2
       - Left(i) = 2i
       - Right(i) = 2i + 1

****** Linear view
       |  1 |  2 |  3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
       |----+----+----+---+---+---+---+---+---+----|
       | 16 | 14 | 10 | 8 | 7 | 9 | 3 | 2 | 4 |  1 |

****** Max-Heap property
       The key of a node >= the keys of its childen

****** Heap operations

******* Build_max_heap:
	produces a max heap from an unsorted array

******* max_heapify:
	correct a single violation of the heap property in a
	subtree's root

****** Tree leaves definition
       Elements A[n/2+1 ... n] are all leaves
       O(nlgn) simple analysis

****** Time complexity
       #+BEGIN_QUOTE
       Observe: =max_heapify= takes O(1) for nodes that are one level
       above the leaves and in general O(l) time for nodes that are l levels
       above the leaves
       #+END_QUOTE
     
****** Python implementation
      

***** Binary search trees, BST sort
      _Scheduling & Binary Search Trees_
      Runway reservation system
      - Definition
      - How to solve with:
	- arrays
	- lists

      *Definition*
      #+BEGIN_QUOTE
      A binary search tree is a rooted binary tree, whose internal nodes each
      store a key (and optionally, an associated value) and each have two
      distinguished sub-trees, commonly denoted left and right. The tree
      additionally satisfies the binary search tree property, which states that
      the key in each node must be greater than all keys stored in the left
      sub-tree, and not greater than all keys in the right sub-tree.[1]:287
      (The leaves (final nodes) of the tree contain no key and have no
      structure to distinguish them from one another.
      #+END_QUOTE

      Binary Search Trees: _operations_
      Runway reservation system
      Airport with a singel runway
      Reservations for future landings:
      - reserve request sepecifies landing time ~t~
      - add ~t~ to the set ~R~ if no other landings are scheduled
	within ~k~ minutes
      - remove from set ~R~ after plane lands


      \|R\| = n
      O(lg n) time
      ------

      Possible solution:
      _Unsorted list/array_
      Insert in O(1) w/o check
      Check ... O(n) time

      _Sorted array_
     
      | 1 |  2 |  3 |  4 |
      |---+----+----+----|
      | 4 | 20 | 32 | 37 | 
  
      Find smallest ~i~ such that ~R[i]~ >= ~t~ in O(lg n) time
      Compare ~R[i]~ and ~R[-i]~ agains ~t~ in O(1) time

      :-( actual insertion requires shifting --> O(n) time

     #+CAPTION: Binary Search
     #+ATTR_HTML: :alt Binary Search Tree :title A binary search tree of size 9 and depth 3, with 8 at the root. The leaves are not drawn :align right
     https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/200px-Binary_search_tree.svg.png

      _Binary Search Trees_

      node x: key(x)
      pointers: /unlike a heap/
      - parent(x)
      - left(x)
      - right(x)


***** AVL trees, AVL sort
      From [[https://en.wikipedia.org/wiki/AVL_tree][Wikipedia]]
     #+CAPTION: AVL Tree
     #+ATTR_HTML: :alt AVL Tree :title AVL tree with balance factors (green) :align right
     https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/AVL-tree-wBalance_K.svg/262px-AVL-tree-wBalance_K.svg.png

     #+BEGIN_QUOTE
     In computer science, an AVL tree is a self-balancing binary search tree.
     It was the first such data structure to be invented. In an AVL tree,
     the heights of the two child subtrees of any node differ by at most one;
     if at any time they differ by more than one, rebalancing is done to
     restore this property. Lookup, insertion, and deletion all take O(log n)
     time in both the average and worst cases, where n is the number of nodes
     in the tree prior to the operation. Insertions and deletions may require
     the tree to be rebalanced by one or more tree rotations.

     The AVL tree is named after its two Soviet inventors, Georgy
     Adelson-Velsky and Evgenii Landis, who published it in their 1962 paper
     "An algorithm for the organization of information".
     #+END_QUOTE


***** Counting sort, radix sort, lower bounds for sorting and searching


**** Hashing

***** Hashing with chaining

***** Table doubling, Karp-Rabin

***** Open addressing, cryptographic hashing

**** Numeric

***** Integer arithmetic, Karatsuba multiplication

***** Square roots, Newton's method

**** Graphs

***** Breadth-first search (BFS)

***** Depth-first search (DFS), topological sorting

**** Shortest Paths

***** Single-source shortest paths problem

***** Dijkstra

***** Bellman-Ford

***** Speeding up Dijkstra

**** Dynamic Programming

***** Memoization, subproblems, guessing, bottom-up
      Fibonacci,
      shortest paths

***** Parent pointers; text justification, perfect-information
      Blackjack rules

***** String subproblems, psuedopolynomial time;
      parenthesization, edit distance, knapsack

***** Two kinds of guessing; piano/guitar fingering,
      Tetris training, Super Mario Bros

**** Advanced Topics

***** Computational complexity

***** Algorithms research topics


*** [[http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/][SMA 5503]]

*** Exhaustive list of algorithms
    [[http://discuss.codechef.com/questions/48877/data-structures-and-algorithms][link]]

** Testing                                                              :TDD:

*** Main Concepts

**** Write better code in less time
     Evan Dorn
     http://lrdesign.com
     evan@lrdesign.com
     @idahoev

***** Intelligence is a liability

***** Smart people
      Can make progress without process (This is *not* a good thing)

***** False premises to avoid TDD
      - Washing hands and organizing surgical tools wastes a lot of time. I
	could help more patients if I just dove in.
      - We know how skyscrapers work. Just give us some bricks and we'll get
	started.


***** Professionals
      - Design, plan and prepare /first/.
      - ...then do the work.
      - This produces better results /faster/.


***** Process is the difference between
      - Surgery and cutting people open
      - Engineering and tinkering
      - Software engineering and programming


***** Software process
      - Architecture
      - Conventions & standards
      - Version Control
      - Coordination (agile, etc.)
      - Test-driven development


***** Tests provide
      - Documentation of code
      - Catch future errors
      - Long-term time savings

      But tests are just a tool, not a process

***** Test-Driven Development
      is more than just writing tests

***** TDD defined
      - Decide what the code will do
      - Write a test that will pass if the code does that thing
      - Run the test, see it fail
      - Write the code
      - Run the test, see it pass


***** TDD provides
      - Design and plan before you code
      - Document your design
      - Proof that code implements design
      - _Encourages design of testable code_


***** Testable code
      Looks a lot like good code!
      - Modular
      - Decoupled design
      - Methods of limited scope
      - etc.


***** Result
      Better code in /less time/.

***** Caveat
      You will have to do this for a while before you will be faster.

***** Caveat #2
      Intelligence is an *asset*.
      /Be smart about how you test/

***** Use judgment
      - Some things are too hard to test
      - Some tests are too trivial to be useful
      - Overtesting /is/ possible
      - Exploratory coding w/o tests is OK!

**** Why and when you should write unit tests?

***** What is unit testing for?
      *Test Suit*
      
****** Understand what to build
	 + Collaborate with people in other roles to understand what's needed
	   - Business analyst
	   - Product owner
	   - Tester
	   - Integration designer
	   - Lead developer
       
****** Document the units
	 - /Executable specification/
	   - Tests document the behavior of the code
	   - How the unit is intended to be used
       
****** Design the units
	 - Decompose the problem into units that are independently testable
	   - loose coupling
	 - Design the ~interface~ separately from doing the ~implementation~
       
****** Regression protection
	 Regression - something worked before and doesn't any more
	 - A Unit test should fail & point out which unit failed and why


****** Limitations of unit testing
       It's not a 100% guarantee of bug-free development
       - Testing can't find all the errors
       - Unit testing won't fine integration errors


***** Your personal development process

****** Test last
       - Design code
       - Achieve some results
       - Design test(s) to prevent regression
       - Debug and rework

       *Risk:*
       - Discover test-ability problems and bugs late in the process
       - You'll rush or skip designing the tests


****** Test first
       - Design code
       - Design tests
       - Write code

       *Risk:* Rework


****** Test driven
       - Write a test
       - Write a little code
       - Gradually rebuild code and test together


***** Continuous integration
      http://www.martinfowler.com/articles/continuousIntegration.html

**** Test types
***** Unit
***** Integration
***** Soak
***** Performance
***** Smoke
***** etc.
*** unittest
    #+BEGIN_SRC shell :results output
      pwd
      cd modules
      pwd
      python --version
      python -m unittest test
      # python -m unittest init_test


    #+END_SRC

    #+RESULTS:
    : /usr/local/share/DVCS/lib/Python/edu
    : /usr/local/share/DVCS/lib/Python/edu/modules
    : Python 3.4.3

*** pytest					:pytest:

**** Official documentation
     [[http://pytest.org/latest/contents.html#toc][link]]

***** Installation
      #+BEGIN_SRC shell
      python --version
      pip install -U pytest
      py.test --version
      #+END_SRC

      #+RESULTS:
      | Python       | 3.4.3                             |           |              |        |
      | Collecting   | pytest                            |           |              |        |
      | Downloading  | pytest-2.9.2-py2.py3-none-any.whl | (162kB)   |              |        |
      | Collecting   | py>=1.4.29                        | (from     | pytest)      |        |
      | Downloading  | py-1.4.31-py2.py3-none-any.whl    | (81kB)    |              |        |
      | Installing   | collected                         | packages: | py,          | pytest |
      | Successfully | installed                         | py-1.4.31 | pytest-2.9.2 |        |
      
      
***** Getting started
      #+BEGIN_SRC shell :results output
              pwd
              ls tests
        #       echo '# content of test_sample.py
        # def func(x):
        #     return x + 1

        # def test_answer():
        #     assert func(3) == 5' > tests/test_sample.py

      #+END_SRC

      #+RESULTS:
      : /usr/local/share/DVCS/lib/Python/edu
      : __init__.py
      : init_test.py
      : __pycache__
      : test_sample.py

*** nosetest

*** Learning Python Testing			:LPT:

**** Python and Testing

     #+BEGIN_QUOTE
     show you a new way to test, a way that puts much of
     the burden of testing right where it should beâon the computer. Even
     better, your tests will help you to find problems early, and tell you
     just where they are, so that you can fix them easily. You'll love the
     easy, helpful methods of automated testing, and test-driven development.
     #+END_QUOTE

***** Testing for fun and profit

      #+BEGIN_QUOTE
      Spending less time on debugging and being sure of your result makes
      programming more fun. Producing a higher quality of code in a shorter
      amount of time makes it more profitable. The test suite provides instant
      feedback, allowing you to run each chunk of your code now instead of
      waiting for the program as a whole to be in a state where you can execute
      it. This quick turnaround makes programming both more satisfying and more
      productive.
      #+END_QUOTE

***** Levels of testing

****** Unit testing

****** Integration testing

****** System testing

***** Acceptance testing

      #+BEGIN_QUOTE
      When a program is first specified, we decide what behavior is expected
      out of it. Tests that are written to confirm that the program actually
      does what was expected are called acceptance tests.
      #+END_QUOTE

***** Regression testing

      #+BEGIN_QUOTE
      Tests that make sure that the working code doesn't become buggy are
      called regression tests. They can be written before or after a bug is
      found, and they provide you with the assurance that your program's
      complexity is not causing the bugs to multiply.
      #+END_QUOTE

***** Test-driven development

      #+BEGIN_QUOTE
      *...you always write the tests first...*
      #+END_QUOTE

***** You'll need Python

***** Summary

**** Working with doctest			:doctest:
***** Where doctest performs best 
***** The doctest language 
****** Example â creating and running a simple doctest
       #+BEGIN_SRC sh :results output :exports both
       cd /usr/local/share/DVCS/lib/Python/edu/Learning_Python_Testing/
       pwd
       python --version
       #python âm doctest test.txt 2>&1
       #true
       
       #+END_SRC

       #+RESULTS:
       : /usr/local/share/DVCS/lib/Python/edu/Learning_Python_Testing
       : Python 3.4.3

       #+NAME: doctest-foo
       #+BEGIN_SRC rst
       example foo::
       >>> from HelloWorld import *
       >>>
       >>> foo = HelloWorld('foo')
       >>> foo.say_hello()
       Hello foo

       #+END_SRC

       and another: 

       #+NAME: doctest-bar
       #+BEGIN_SRC rst
       example bar::
       >>> from HelloWorld import *
       >>>
       >>> bar = HelloWorld('bar')
       >>> bar.say_hello()
       Hello bar

       #+END_SRC

       Create a document to "tangle" them into 

       #+BEGIN_SRC text :noweb yes :tangle test_HelloWorld.txt :exports none
       <<doctest-foo>>
       <<doctest-bar>>
       #+END_SRC


****** Result â three times three does not equal ten 
***** The syntax of doctests 
***** Example â a more complex test 
***** Result â five tests run 
***** Expecting exceptions 
***** Example â checking for an exception 
***** Result â success at failing 
***** Expecting blank lines
      <BLANKLINE>
***** Controlling doctest behavior with directives 
***** Ignoring part of the result 
***** Example â ellipsis test drive 
***** Result â ellipsis elides 
***** Ignoring white space 
***** Example â invoking normality 
***** Result â white space matches any other white space 
***** Skipping an example 
***** Example â humans only 
***** Result â it looks like a test, but it's not 
***** The other directives 
***** The execution scope of doctest tests 
***** Check your understanding 
***** Exercise â English to doctest 
***** Embedding doctests into docstrings 
***** Example â a doctest in a docstring 
***** Result â the code is now self-documenting and self-testable 
***** Putting it into practice â an AVL tree 
***** English specification 
***** Node data 
***** Testing the constructor 
***** Recalculating height 
***** Making a node deletable 
***** Rotation 
***** Locating a node 
***** The rest of the specification 
***** Summary 
**** Unit Testing with doctest
***** What is unit testing?
***** The limitations of unit testing 
***** Example â identifying units 
***** Choosing units 
***** Check your understanding 
***** Unit testing during the development process 
***** Design 
***** Development 
***** Feedback 
***** Development, again 
***** Later stages of the process 
***** Summary 
**** Decoupling Units with unittest.mock 
***** Mock objects in general 
***** Mock objects according to unittest.mock 
***** Standard mock objects 
***** Non-mock attributes 
***** Non-mock return values and raising exceptions 
***** Mocking class or function details 
***** Mocking function or method side effects 
***** Mocking containers and objects with a special behavior 
***** Mock objects for properties and descriptors 
***** Mocking file objects 
***** Replacing real code with mock objects 
***** Mock objects in action 
***** Better PID tests 
***** Patching time.time 
***** Decoupling from the constructor 
***** Summary 
**** Structured Testing with unittest 
***** The basics 
***** Assertions 
***** The assertTrue method 
***** The assertFalse method 
***** The assertEqual method 
***** The assertNotEqual method 
***** The assertAlmostEqual method 
***** The assertNotAlmostEqual method 
***** The assertIs and assertIsNot methods 
***** The assertIsNone and assertIsNotNone methods 
***** The assertIn and assertNotIn methods 
***** The assertIsInstance and assertNotIsInstance methods 
***** The assertRaises method 
***** The fail method 
***** Make sure you get it 
***** Test fixtures 
***** Example â testing database-backed units 
***** Summary 
**** Running Your Tests with Nose 
***** Installing Nose 
***** Organizing tests 
***** An example of organizing tests 
***** Simplifying the Nose command line 
***** Customizing Nose's test search 
***** Check your understanding 
***** Practicing Nose 
***** Nose and doctest tests 
***** Nose and unittest tests 
***** Module fixture practice 
***** Package fixture practice 
***** Nose and ad hoc tests 
***** Summary 
**** Test-driven Development Walk-through 
***** Writing the specification 
***** Try it for yourself â what are you going to do? 
***** Wrapping up the specification 
***** Writing initial unit tests 
***** Try it for yourself â write your early unit tests 
***** Wrapping up the initial unit tests 
***** Coding planner.data 
***** Using tests to get the code right 
***** Try it for yourself â writing and debugging code 
***** Writing the persistence tests 
***** Finishing up the personal planner 
***** Summary 
**** Integration and System Testing 
***** Introduction to integration testing and system testing 
***** Deciding on an integration order 
***** Automating integration tests and system tests 
***** Writing integration tests for the time planner 
***** Check yourself â writing integration tests 
***** Summary 
**** Other Tools and Techniques 
***** Code coverage 
***** Installing coverage.py 
***** Using coverage.py with Nose 
***** Version control integration 
***** Git 
***** Example test-runner hook 
***** Subversion 
***** Mercurial 
***** Bazaar 
***** Automated continuous integration 
***** Buildbot 
***** Setup 
***** Using Buildbot 
***** Summary 
***** Index 

*** Test-Driven Python Development [100%]                              :TDPD:
    #+NAME: TDPD
**** 1. Getting Starqted with Test-Driven Development 
***** Prerequisites
***** Understanding test-driven development 
***** TDD versus unit testing versus integration testing 
***** Using TDD to build a stock alert application 
***** Writing our first test 
***** Analyzing the test output 
***** Test errors versus test failures 
***** Making the test pass 
***** Reorganizing the test code 
***** Running the tests after the reorganization 
***** Summary 
**** 2. Red-Green-Refactor â The TDD Cycle 
***** Tests are executable requirements 
***** Arrange-Act-Assert 
***** Documenting our tests 
***** Testing for exceptions
      Straightforward approach:
      #+BEGIN_SRC python
        def test_negative_price_should_throw_ValueError(self):
               goog = Stock("GOOG")
               try:
                   goog.update(datetime(2014, 2, 13), -1)
               except ValueError:
                   return
               self.fail("ValueError was not raised")
      #+END_SRC
      Sophisticated approach:
      #+BEGIN_SRC python
        def test_negative_price_should_throw_ValueError(self):
            goog = Stock("GOOG")
            self.assertRaises(ValueError, goog.update, datetime(2014, 2, 13), -1)
      #+END_SRC
      or in a bit convenient way:
      #+BEGIN_SRC python
        def test_negative_price_should_throw_ValueError(self):
            goog = Stock("GOOG")
            with self.assertRaises(ValueError):
                goog.update(datetime(2014, 2, 13), -1)
      #+END_SRC
***** Exploring assert methods
****** assertFalse(x, msg)
****** assertTrue(x, msg)


****** assertIsNone(x, msg)
****** assertIsNotNone(x, msg)


****** assertEqual(x, y, msg)
****** assertNotEqual(x, y, msg)


****** assertAlmostEqual(x, y, places, msg, delta)
       #+BEGIN_SRC python
         def test_stock_price_should_give_the_latest_price(self):
             goog = Stock("GOOG")
             goog.update(datetime(2014, 2, 12), price=10)
             goog.update(datetime(2014, 2, 13), price=8.4)
             self.assertAlmostEqual(8.4, goog.price, delta=0.0001)

         # or synonymous
         # self.assertAlmostEqual(8.4, goog.price, places=4)
       #+END_SRC
****** assertNotAlmostEqual(x, y, places, msg, delta)


****** assertGreater(x, y, msg)
****** assertGreaterEqual(x, y, msg)


****** assertLess(x, y, msg)
****** assertLessEqual(x, y, msg)


****** assertIs(x, y, msg)
       #+BEGIN_SRC python
         import unittest


         test = unittest.TestCase()
         test.assertEqual([1, 2], [1, 2], \
                          "They are not equal one another!")
         test.assertIs([1, 2], [1, 2], \
                       "They are not the same objects!")
       #+END_SRC

       #+RESULTS:

****** assertIsNot(x, y, msg)


****** assertIn(x, seq, msg)
****** assertNotIn(x, seq, msg)


****** assertIsInstance(x, cls, msg)
****** assertNotIsInstance(x, cls, msg)


****** assertRegex(text, regex, msg)
****** assertNotRegex(text, regex, msg)


****** assertRaises(exception, callable, *args, **kwargs)


****** fail(msg)      
***** Specific asserts versus generic asserts
      #+BEGIN_QUOTE
      It is recommended to use the more specific asserts
      wherever possible.
      #+END_QUOTE
***** Setup and teardown
      Three levels fixture's execution:
      - Module
      - Class
      - Case

      #+BEGIN_SRC python :results output :session TDD
        import unittest


        def setUpModule():
            print("setUpModule")
        def tearDownModule():
            print("tearDownModule")


        class Class1Test(unittest.TestCase):
            @classmethod
            def setUpClass(cls):
                print("  setUpClass")
            @classmethod
            def tearDownClass(cls):
                print("  tearDownClass")
            def setUp(self):
                print("       setUp")
            def tearDown(self):
                print("       tearDown")
            def test_1(self):
                print("         class 1 test 1")
            def test_2(self):
                print("         class 1 test 2")


        class Class2Test(unittest.TestCase):
            def test_1(self):
                print("         class 2 test 1")
      #+END_SRC

      #+RESULTS:

***** Brittle tests
      #+BEGIN_QUOTE
      A test is brittle when a change in the implementation
      details requires a change in the test cases.
      #+END_QUOTE
***** Refactoring the design
      #+BEGIN_QUOTE
      *A quick primer on properties*

      Properties are a feature of Python where we can delegate attribute access to a
      function. Since we declared price as a property, accessing Stock.price will cause
      the method to be called instead of searching for the attribute. In our
      implementation, it allows us to create an interface so that other modules can
      refer to the stock price as an attribute, even though there is no such actual
      attribute in the object.
      #+END_QUOTE
***** Refactoring tests
***** Exploring the Rule classes 
***** Exercise 
***** Summary 
**** 3. Code Smells and Refactoring 
***** A dual crossover moving average 
***** Implementing the dual crossover moving average 
***** Identifying code smells
      #+BEGIN_QUOTE
      What are the problems you can find with this code? The following are some
      problems:
      - *Long method*: Long methods and classes are difficult to read and
	understand.
      - *Unclear naming*: For instance, what is variable cpl supposed to be?
      - *Complex conditionals*: The if conditions are quite complicated, and it
	is unclear what exactly they are checking for.
      - *Bad comments*: None of the comments are descriptive and, in addition,
	two comments both say BUY signal. Obviously, one of them is wrong.
      - *Magic constants*: In various places, the numbers 5, 10, â11, and so on
	are =hard coded=. Suppose we decide to change the long-term moving
	average to use a 20-day period, then where are the places we need to
	change? What is the possibility that we may miss one?
      - *Code duplication*: Both the conditionals seem almost the same, with a
	 very minor difference.

      All these problems are generally referred to as code smells. Code smells
      are simple patterns that can be easily spotted and refactored to make
      code better. Sometimes, code smells can be rectified by doing a few
      simple changes. Other times, it may lead up to a change of the design
      itself.
      #+END_QUOTE
***** Refactoring 
****** The Rename Variable and Rename Method refactorings
       *Tests as a safety net*
****** Commenting Styles
       #+BEGIN_QUOTE
       Generally speaking, comments are a code smell because they indicate that
       the code itself is not easy to read.
       #+END_QUOTE
****** Replace Magic Literals with Constants
       #+BEGIN_QUOTE
       Replacing hard-coded values with constants accomplishes two things: first,
       should we need to change the values, we can do it at a single place, and,
       second, the constants are more descriptive and help make the code more
       readable.
       #+END_QUOTE

       #+BEGIN_SRC python :results output :session TDD
         from enum import Enum

         # We then create the enumeration class.


         class StockSignal(Enum):
             buy = 1
             neutral = 0
             sell = -1

         # Finally, we can replace the return value with the enumeration:

             # NEUTRAL signal
         print('\n')
         print('This is a value: %d' % StockSignal.neutral.value)

         # With this change, we can also remove the comments above the return
         # values, as the constants are descriptive enough.
       #+END_SRC

       #+RESULTS:
       : 
       : >>> ... >>> >>> ... ... ... ... >>> ... >>> ...
       : This is a value: 0
       : 0

****** The Extract Method refactoring
       #+BEGIN_QUOTE
       Another way to make comments redundant is to take the code and put it in
       a method with a descriptive name.
       #+END_QUOTE
****** Replace Calculation with Temporary Variable
       #+BEGIN_QUOTE
       The conditional is messy because we are doing many calculations and
       comparisons at the same time, which is hard to follow. We can clean this
       up by using temporary variables to store the calculation values and then
       using the variables in the conditionals.
       #+END_QUOTE
****** Extract Conditional to Method
       #+BEGIN_QUOTE
       In this refactoring, we take the comparison and move
       it into its own method with a descriptive name.
       #+END_QUOTE
****** The DRY principle
       #+BEGIN_QUOTE
       *DRY* stands for *Don't Repeat Yourself*. If you ever find yourself
       writing the same (or similar) code in multiple places, there is a good chance
       that a refactoring will allow you to put that logic in once place and call it
       from each place that it is needed.
       #+END_QUOTE
****** Single Responsibility Principle
       #+BEGIN_QUOTE
       From a design perspective, the most common reason that classes get cluttered
       is due to not following the Single *Responsibility Principle (SRP)*. What this
       principle states is that a class should have a single, clear, coherent
       purpose. A class that tries to do too many different things is an indicator
       of a poor design.
       #+END_QUOTE
****** Extract Class
       #+BEGIN_QUOTE
       The Extract Class refactoring is used to take some functionality and move it
       into a separate class.
       #+END_QUOTE
****** Move Method to Class 
***** The importance of tests
      #+BEGIN_QUOTE
      It is easy to overlook small things when moving code around, which
      could end up breaking the code. By running the tests often, we know
      immediately when we break something. This makes it *easy to fix the mistake*.
      #+END_QUOTE
***** Exercise
***** Wrapping up
***** Summary
      #+BEGIN_QUOTE
      Test-driven development and refactoring go hand in hand and are invaluable
      tools in any developer's toolbox.
      #+END_QUOTE
**** 4. Using Mock Objects to Test Interactions 
***** Hand writing a simple mock 
***** Using the Python mocking framework 
***** Mocking objects 
***** Mocking return values 
***** Mocking side effects 
***** How much mocking is too much? 
***** Mocks versus stubs versus fakes versus spies 
***** Patching methods 
***** An important gotcha when patching 
***** Tying it all together 
***** Summary 
**** 5. Working with Legacy Code 
***** What is legacy code? 
***** Understanding the code 
***** What are characterization tests? 
***** Using the Python interactive shell to understand the code 
***** Writing a characterization test 
***** Using pdb to understand the code 
***** Some common pdb commands 
***** Walking through a pdb session 
***** Techniques to break dependencies 
***** The Rope refactoring library 
***** Separate initialization from execution 
***** Use default values for parameters 
***** Extract the method and test 
***** Inject dependencies 
***** Inherit and test 
***** Stubbing local methods 
***** Extract the method and stub 
***** The cycle continues 
***** Time to refactor 
***** Long-term refactoring 
***** Summary 
**** 6. Maintaining Your Test Suite 
***** Goals of test maintenance 
***** Organizing tests 
***** Filesystem layout 
***** Naming conventions 
***** Test suite grouping 
***** Making tests readable 
***** Using docstrings 
***** Using fixtures 
***** Fixtures and patching 
***** Using a custom test case class hierarchy 
***** Writing tests closer to the domain 
***** Writing helper methods 
***** Writing better asserts 
***** Using custom equality checkers 
***** Using matchers 
***** Summary 
**** 7. Executable Documentation with doctest 
***** Our first doctest 
***** Running the doctest 
***** Test failures 
***** Testing for exceptions 
***** Package-level doctests 
***** Maintaining doctests 
***** Running a suite of doctests 
***** Setup and teardown 
***** Limitations of doctest 
***** Doctest directives 
***** How do doctests fit into the TDD process? 
***** Summary 
**** 8. Extending unittest with nose2 
***** Getting started with nose2 
***** Writing tests for nose2 
***** Setup and teardown 
***** Parameterized tests 
***** Generated tests 
***** Layers 
***** nose2 plugins 
***** Doctest support 
***** Writing test results to an XML file 
***** Measuring test coverage 
***** Debugging test failures 
***** nose2 configuration 
***** Summary 
**** 9. Unit Testing Patterns 
***** Pattern â fast tests 
***** Pattern â running a subset of tests 
***** Test loaders 
***** Using the load_tests protocol 
***** Skipping tests 
***** Pattern â using attributes 
***** Attributes with vanilla unittests 
***** Pattern â expected failures 
***** Pattern â data-driven tests 
***** Pattern â integration and system tests 
***** Pattern â spies 
***** Pattern â asserting a sequence of calls 
***** Pattern â patching the open function 
***** Pattern â mocking with mutable args 
***** Summary 
**** 10. Tools to Improve Test-Driven Development 
***** TDD tools 
***** py.test 
***** py.test versus nose2 
***** Trial 
***** Sure 
***** PyHamcrest 
***** Integrating with build tools 
***** Paver 
***** Integrating with packaging tools 
***** Setuptools 
***** Distutils 
***** Integrating with continuous integration tools 
***** Jenkins 
***** Travis CI 
***** Other tools 
***** tox 
***** Sphinx 
***** IDE integration 
***** Summary 
**** A. Answers to Exercises 
***** Red-Green-Refactor â The TDD Cycle 
***** Code Smells and Refactoring 
**** B. Working with Older Python Versions 
***** Writing code that is compatible across versions 
***** Running tests from the command line 
***** Running the examples in this book 
**** Index 

** Packaging and deployment
   Learn how to properly:
*** Package code

*** Version code

*** Deploy code

*** Build proper integration harnesses
** CI/CD
   Learn how to set up:
*** Continuous integration

*** Deployment pipelines

*** Code coverage reporting

*** Test execution automation
** Solid Code smells
*** Inappropriate recursion

*** Pertinent data structure

*** Code documentation

*** Variable names are self-explanatory

*** Single responsibility approach

*** Inheritance utilizing

*** Syncronization

*** Concurrency

*** Memory management

*** Time complexity

*** Tests

** Security
   Learn how to write truly secure code

** Functional programming
   Entirely paradigm 
* Dive deeper into Python 			:Python:

** Prerequisites

*** Python3++
    Install and test Python3 devEnv
    #+BEGIN_SRC shell
      virtualenv -p /usr/bin/python3 yourenv
      source yourenv/bin/activate
      pip install ipython
    #+END_SRC


*** Install core libraries into devEnv:
    In accordion with the [[http://github.com/pydata/pydata-book][book]] 

**** Update =pip=
     #+BEGIN_SRC sh
     python -m pip install --upgrade pip
     #+END_SRC     

     #+RESULTS:
     : Requirement already up-to-date: pip in /usr/local/share/DVCS/venv3.5/lib/python3.5/site-packages

**** numpy
     #+BEGIN_SRC shell :eval no :results output
       sudo apt-get install python3-dev
       pip install numpy
     #+END_SRC

**** pandas
     #+BEGIN_SRC shell
       pip install pandas
     #+END_SRC

**** nltk
     #+BEGIN_SRC shell
       pip install -U nltk
     #+END_SRC

**** matplotlib
     #+BEGIN_SRC shell
       sudo apt-get install libfreetype6-dev libxft-dev
       pip install matplotlib 
     #+END_SRC

**** scipy
     #+BEGIN_SRC sh
     pip install scipy
     #+END_SRC

**** scikit-learn
     #+BEGIN_SRC sh
     pip install scikit-learn
     #+END_SRC

*** Test new environment
    #+BEGIN_SRC sh :results output :eval noexport
    pip list | grep scipy
    #+END_SRC

    #+RESULTS:
    : DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.
    : scipy (0.19.0)

    #+BEGIN_SRC python :eval noexport :exports both :session numpy :results output
      import numpy as np

      a = np.zeros((2,2))  
      a              
      b = np.ones((1,2))   
      b
    #+END_SRC

    #+RESULTS:
    : 
    : >>> >>> array([[ 0.,  0.],
    :        [ 0.,  0.]])
    : >>> array([[ 1.,  1.]])

    #+BEGIN_SRC python :eval noexport :exports both :session numpy :results file
      import numpy as np
      import matplotlib.pyplot as plt

      # Compute the x and y coordinates for points on a sine curve
      x = np.arange(0, 3 * np.pi, 0.1)
      y = np.sin(x)

      # Plot the points using matplotlib
      plt.plot(x, y)
      # plt.show()  # You must call plt.show() to make graphics appear.
      plt.draw()
      plt.savefig("plt_test.png")
      return "plt_test.png"
    #+END_SRC

    #+RESULTS:
    [[file:[<matplotlib.lines.Line2D object at 0x7ff19c9eb668>]]]


    #+BEGIN_SRC python :eval noexport :exports both :session scikit
    import sklearn as sk
    import numpy as np
    import matplotlib.pyplot as plt
    #+END_SRC

    #+RESULTS:

*** Python package management system                              :miniconda:
    #+NAME: ppms
    The main idea is to manage your Python in a bit tricky way:
    - Generate virtual environment on the fly;
    - Install or up-to date Python pakages in the bunch mode;


**** Installation
     - Download [[https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh][installer]]


** Python's Theory						     :theory:

*** Official Python documentation			      :documentation:
**** The Python Tutorial [100%]				   :tutorial:
***** Whetting Your Appetite

***** Using the Python Interpreter

****** Invoking the Interpreter

******* Argument Passing

******* Interactive Mode

****** The Interpreter and Its Environment

******* Source Code Encoding

***** An Informal Introduction to Python

****** Using Python as a Calculator

******* Numbers
	#+BEGIN_SRC python :results output :session intro
	  2 + 2
	  tax = 12.5 / 100
	  price = 100.50
	  price + _  # last result in interactive mode
	  round(_, 2)

	#+END_SRC

	#+RESULTS:
	: 4
	: >>> >>> 104.5
	: 104.5

******* Strings
	#+BEGIN_SRC python :results output :session intro
	  'spam eggs'  # single quotes
	  s = 'First line.\nSecond line.'  # \n means newline
	  s
	  print(s)
	#+END_SRC

	#+RESULTS:
	: 'spam eggs'
	: >>> 'First line.\nSecond line.'
	: First line.
	: Second line.

	+---+---+---+---+---+---+
	| P | y | t | h | o | n |
	+---+---+---+---+---+---+
	0   1   2   3   4   5   6
       -6  -5  -4  -3  -2  -1

       String Methods
       Strings Formatting
       printf-style String Formatting

******* Lists
	#+BEGIN_QUOTE
	Mutable, indexed and ordered sequence
	#+END_QUOTE

	+ features
	  shallow copy [:]
	  slicing [n:m]
	  concatenation

****** First Steps Towards Programming
	   #+BEGIN_SRC python :results output
	     # Fibonacci series
             a, b = 0, 1
             while b < 10:
		 print(b, end=", ")
		 a, b = b, a + b
	   #+END_SRC

***** More Control Flow Tools

****** "if" Statements
       #+BEGIN_EXAMPLE
    	   x = int(input("Please enter an integer: "))
       #+END_EXAMPLE
****** "for" Statements
       #+BEGIN_SRC python :results output
	 # Measure some strings:
	 words = ['cat', 'window', 'defenestrate']
	 for w in words:
	     print(w, len(w))
	 print('==============')
	 for w in words[:]:
	     if len(w) > 6:
		 words.insert(0, w)
	 print(words)

       #+END_SRC

       #+RESULTS:
       : cat 3
       : window 6
       : defenestrate 12
       : ==============
       : ['defenestrate', 'cat', 'window', 'defenestrate']

****** The "range()" Function
	   #+BEGIN_SRC python :results output
             for i in range(5):
		print(i, end=", ")
             print('==============')
	   #+END_SRC

	   #+RESULTS:
	   : 0, 1, 2, 3, 4, ==============

****** "break" and "continue" Statements, and "else" Clauses on Loops
	   #+BEGIN_SRC python :results output
             for n in range(2, 10):
		 for x in range(2, n):
                     if n % x == 0:
			 print(n, 'equals', x, '*', n//x)
			 break
		 else:
		     # loop fell through without finding a factor
		     print(n, 'is a prime number')

	   #+END_SRC

	   #+RESULTS:
	   : 2 is a prime number
	   : 3 is a prime number
	   : 4 equals 2 * 2
	   : 5 is a prime number
	   : 6 equals 2 * 3
	   : 7 is a prime number
	   : 8 equals 2 * 4
	   : 9 equals 3 * 3

	   #+BEGIN_SRC python :results output
             # continue example
             for num in range(2, 10):
		 if num % 2 == 0:
                     print("Found an even number", num)
                     continue
		 print("Found a number", num)
	   #+END_SRC

	   #+RESULTS:
	   : Found an even number 2
	   : Found a number 3
	   : Found an even number 4
	   : Found a number 5
	   : Found an even number 6
	   : Found a number 7
	   : Found an even number 8
	   : Found a number 9

****** "pass" Statements
	   #+BEGIN_QUOTE
	   Does nothing
	   #+END_QUOTE

****** Defining Functions
       #+BEGIN_SRC python :results output
	 # example
	 def fib(n):    # write Fibonacci series up to n
	     """Print a Fibonacci series up to n."""
	     a, b = 0, 1
	     while a < n:
		 print(a, end=' ')
		 a, b = b, a+b
	     print()

	 # Now call the function we just defined:
	 fib(2000)
       #+END_SRC

       #+RESULTS:
       : 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

       #+BEGIN_SRC python :results output
	 def fib2(n): # return Fibonacci series up to n
	     """Return a list containing the Fibonacci series up to n."""
	     result = []
	     a, b = 0, 1
	     while a < n:
		 result.append(a)    # see below
		 a, b = b, a+b
	     return result

	 f100 = fib2(100)    # call it
	 print(f100)                # write the result
       #+END_SRC

       #+RESULTS:
       : [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
****** More on Defining Functions
******* Default Argument Values
	  The default value is evaluated only once.
	  #+BEGIN_SRC python :results output

	    def f(a, L=[]):
		L.append(a)
		return L

	    print(f(1))
	    print(f(2))
	    print(f(3))
	  #+END_SRC

	  #+RESULTS:
	  : [1]
	  : [1, 2]
	  : [1, 2, 3]

	  To prevent this behaviour:
	  #+BEGIN_SRC python :results output
	    def f(a, L=None):
		if L is None:
		    L = []
		L.append(a)
		return L

	    print(f(1))
	    print(f(2))
	    print(f(3))
	  #+END_SRC

	  #+RESULTS:
	  : [1]
	  : [2]
	  : [3]

******* Keyword Arguments
	  #+BEGIN_SRC python :results output
	    def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
		print("-- This parrot wouldn't", action, end=' ')
		print("if you put", voltage, "volts through it.")
		print("-- Lovely plumage, the", type)
		print("-- It's", state, "!")

	    # this are correct usage
	    parrot(1000)                                          # 1 positional argument
	    parrot(voltage=1000)                                  # 1 keyword argument
	    parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
	    parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
	    parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
	    parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

	    # and this are incorrect -->
	    #parrot()                     # required argument missing
	    #parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
	    #parrot(110, voltage=220)     # duplicate value for the same argument
	    #parrot(actor='John Cleese')  # unknown keyword argument
	  #+END_SRC

	  #+RESULTS:
	  #+begin_example
	  -- This parrot wouldn't voom if you put 1000 volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's a stiff !
	  -- This parrot wouldn't voom if you put 1000 volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's a stiff !
	  -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's a stiff !
	  -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's a stiff !
	  -- This parrot wouldn't jump if you put a million volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's bereft of life !
	  -- This parrot wouldn't voom if you put a thousand volts through it.
	  -- Lovely plumage, the Norwegian Blue
	  -- It's pushing up the daisies !
   #+end_example

******* Arbitrary Argument Lists
	#+BEGIN_SRC python :results output
          def write_multiple_items(file, separator, *args):
              file.write(separator.join(args))


          def concat(*args, sep="/"):  # keyword-only might occur after
             return sep.join(args)

          print(concat("earth", "mars", "venus"))
          print('==============')
          print(concat("earth", "mars", "venus", sep="."))
	#+END_SRC

	#+RESULTS:
	: earth/mars/venus
	: ==============
	: earth.mars.venus

******* Unpacking Argument Lists
	#+BEGIN_SRC python :results output
          p = list(range(3, 6))            # normal call with separate arguments
          print(p)
          print('==============')
          args = [3, 6]
          q = list(range(*args))            # call with arguments unpacked from a list
          print(q)
	  print('==============')

          # same fashion, dictionaries can deliver keyword arguments with
          # the "**"-operator:

          def parrot(voltage, state='a stiff', action='voom'):
              print("-- This parrot wouldn't", action, end=' ')
              print("if you put", voltage, "volts through it.", end=' ')
              print("E's", state, "!")

          d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
          print(parrot(**d))
	#+END_SRC

	#+RESULTS:
	: [3, 4, 5]
	: ==============
	: [3, 4, 5]
	: ==============
	: -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !
	: None
	#+BEGIN_SRC python :results output
          # test with argument passing
          def arg_test(*args, **kwargs):
              print('This is a first positional argument: %s' % (args[0],))
              print('This is artument value with key "last_name": %s' %
                    (kwargs['last_name'],))
              print('This is a second positional argument: %s' % (args[1],))

          # arg_test('Tony', last_name='Kosinov', 'WebDev')  # wrong
          arg_test('Tony', 'WebDev', last_name='Kosinov')
	#+END_SRC

	#+RESULTS:
	: This is a first positional argument: Tony
	: This is artument value with key "last_name": Kosinov
	: This is a second positional argument: WebDev

******* Lambda Expressions
	#+BEGIN_SRC python :results output
          def make_incrementor(n):
              return lambda x: x + n

          f = make_incrementor(42)
          print(f(0))
          print(f(1))
          print('==============')

          pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
          pairs.sort(key=lambda pair: pair[1])  # sort by second element in the tuple
          print(pairs)
          print('==============')

          mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
	#+END_SRC

	#+RESULTS:
	: 42
	: 43
	: ==============
	: [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
	: ==============
	#+BEGIN_SRC python :results output
          import sys

          summ = lambda x, y: x + y   #  def sum(x,y): return x + y
          out = lambda *x: sys.stdout.write(" ".join(map(str,x)))

          print(summ(4, 5))
          print(out("a", "b", "c", "D"))

	#+END_SRC

	#+RESULTS:
	: 9
	: a b c D7
	#+NAME: jump_table
	#+BEGIN_SRC python :results output
          # jump table implementation
          L = [lambda x: x ** 2,
               lambda x: x ** 3,
               lambda x: x ** 4]
          # Inline function definition
          # A list of three callable functions
          for f in L:
              print(f(2)) # Prints 4, 8, 16
          print(L[0](3)) # Prints 9

	#+END_SRC

	#+RESULTS: jump_table
	: 4
	: 8
	: 16
	: 9

******* Documentation Strings
	#+BEGIN_SRC python :results output
          def my_function():
              """Do nothing, but document it.

              No, really, it doesn't do anything.
              """
              pass

          print(my_function.__doc__)

	#+END_SRC

	#+RESULTS:
	: Do nothing, but document it.
	: 
	:     No, really, it doesn't do anything.
	:     

******* Function Annotations
	#+BEGIN_QUOTE
	completely optional metadata information
	about the types used by user-defined functions
	#+END_QUOTE
	 
****** Intermezzo: Coding Style
       Making it easy for others to read your code
       is always a good idea, and adopting a nice coding style helps
       tremendously for that.
       + Suggestions:
	 - When possible, put comments on a line of their own;
	 - Name your classes and functions consistently; the convention is to
       use "CamelCase" for classes and "lower_case_with_underscores" for
       functions and methods.

***** Data Structures
****** Terse manual
******* list.append(x)
	 Add an item to the end of the list.
	 Equivalent to "a[len(a):] = [x]".
	 #+BEGIN_SRC python :results output :session lists
           a = [66.25, 333]
           a.append(333)
           print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> [66.25, 333, 333]

******* list.extend(L)
	Extend the list by appending all the items in the given list.
	Equivalent to "a[len(a):] = L".
	#+BEGIN_SRC python :results output :session lists
	b = [1, 1234.5]
	a.extend(b)
	print(a)
	#+END_SRC

	#+RESULTS:
	: 
	: >>> [66.25, 333, 333, 1, 1234.5]

******* list.insert(i, x)
	Insert an item at a given position.  The first argument is the
	index of the element before which to insert, so "a.insert(0, x)"
	inserts at the front of the list, and "a.insert(len(a), x)" is
	equivalent to "a.append(x)".
	#+BEGIN_SRC python :results output :session lists
	a.insert(2, -1)
	print(a)
	#+END_SRC

	#+RESULTS:
	: 
	: [66.25, 333, -1, 333, 1, 1234.5]

******* list.remove(x)
	Remove the first item from the list whose value is *x*.  It is an
	error if there is no such item.
	#+BEGIN_SRC python :results output :session lists
	a.remove(66.25)
	print(a)
	#+END_SRC

	#+RESULTS:
	: 
	: [333, -1, 333, 1, 1234.5]

******* list.pop([i])
	Remove the item at the given position in the list, and return it.
	If no index is specified, "a.pop()" removes and returns the last
	item in the list.
	#+BEGIN_SRC python :results output :session lists
	a.pop(4)
	a.pop()
	print(a)
	#+END_SRC

	#+RESULTS:
	: 1234.5
	: 1
	: [333, -1, 333]

******* list.clear()
	Remove all items from the list.  Equivalent to "del a[:]".
******* list.index(x, [n])
	Return the index in the list of the [n] item whose value is *x*.
	It is an error if there is no such item.
	#+BEGIN_SRC python :results output :session lists
	a.index(333)
	a.index(333, 2)
	#+END_SRC

	#+RESULTS:
	: 0
	: 2

******* list.count(x)
	Return the number of times *x* appears in the list.
	#+BEGIN_SRC python :results output :session lists
	a.extend([2, 2, 2])
	print(a)
	a.count(333)
	a.count(2)
	#+END_SRC

	#+RESULTS:
	: 
	: [333, -1, 333, 2, 2, 2, 2, 2, 2]
	: 2
	: 6

******* list.reverse()
	Reverse the elements of the list in place.
	#+BEGIN_SRC python :results output :session lists
	a.reverse()
	print(a)
	#+END_SRC

	#+RESULTS:
	: 
	: [333, -1, 333, 2, 2, 2, 2, 2, 2]

******* list.copy()
	Return a shallow copy of the list. Equivalent to "a[:]".
****** More on Lists
******* Using Lists as Stacks
	 #+BEGIN_SRC python :results output :session stack
           stack = [3, 4, 5]
           stack.append(6)
           stack.append(7)
           stack
           '============='
           stack.pop()
           stack
           stack.pop()
           '============='
           stack.pop()
           '============='
           stack
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 >>> >>> [3, 4, 5, 6, 7]
	 '============='
	 7
	 [3, 4, 5, 6]
	 6
	 '============='
	 5
	 '============='
	 [3, 4]
#+end_example

******* Using Lists as Queues
	#+NAME: Queue
	#+BEGIN_SRC python :results output :session queue
          from collections import deque
          queue = deque(["Eric", "John", "Michael"])
          queue.append("Terry")           # Terry arrives
          queue.append("Graham")          # Graham arrives
          queue.popleft()                 # The first to arrive now leaves
          print('=============')
          queue.popleft()                 # The second to arrive now leaves
          print('=============')
          queue                           # Remaining queue in order of arrival
	#+END_SRC

	#+RESULTS: Queue
	: 
	: >>> >>> >>> 'Eric'
	: =============
	: 'John'
	: =============
	: deque(['Michael', 'Terry', 'Graham'])

******* List Comprehensions
	 #+BEGIN_QUOTE
	 provide a concise way to create lists.
	 #+END_QUOTE
	 #+BEGIN_SRC python :results output :session lists
           squares = list(map(lambda x: x**2, range(10)))
           squares_alt = [x**2 for x in range(10)]

           print(squares)
           print('=============')
           print(squares_alt)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> >>> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 : =============
	 : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 #+NAME Recombination
	 #+BEGIN_SRC python :results output :session lists
	 [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
	 #+END_SRC

	 #+RESULTS:
	 : [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
	 #+BEGIN_SRC python :results output :session lists
           vec = [-4, -2, 0, 2, 4]
           # create a new list with the values doubled
           [x*2 for x in vec]
           print('=============')
           # filter the list to exclude negative numbers
           [x for x in vec if x >= 0]
           print('=============')
           # apply a function to all the elements
           [abs(x) for x in vec]
           print('=============')
           # call a method on each element
           freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
           [weapon.strip() for weapon in freshfruit]
           print('=============')
           # create a list of 2-tuples like (number, square)
           [(x, x**2) for x in range(6)]
           print('=============')
           # the tuple must be parenthesized, otherwise an error is raised
           ###!!! [x, x**2 for x in range(6)]
           # flatten a list using a listcomp with two 'for'
           vec = [[1,2,3], [4,5,6], [7,8,9]]
           [num for elem in vec for num in elem]
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 ... [-8, -4, 0, 4, 8]
	 =============
	 ... [0, 2, 4]
	 =============
	 ... [4, 2, 0, 2, 4]
	 =============
	 ... >>> ['banana', 'loganberry', 'passion fruit']
	 =============
	 ... [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
	 =============
	 ... ... ... >>> [1, 2, 3, 4, 5, 6, 7, 8, 9]
#+end_example


	 List comprehensions can contain complex expressions and nested
	 functions:

	 #+BEGIN_SRC python :results output :session lists
	 from math import pi
	 [str(round(pi, i)) for i in range(1, 6)]
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ['3.1', '3.14', '3.142', '3.1416', '3.14159']

******* Nested List Comprehensions			  :transposition:zip:
	#+BEGIN_SRC python :results output :session lists
          matrix = [
              [1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
          ]
          [[row[i] for row in matrix] for i in range(4)]
          # sinonym:
          list(zip(*matrix))
          # few zip() scrutiny
          list(zip(matrix[0], ['a', 'c', 'f'], [21, 22]))
	  print('=============')
	  # only two elements on output (smallest full-fledged number)
	  from itertools import zip_longest
	  list(zip_longest(matrix[0], ['a', 'c', 'f'], [21, 22]))
	  # four elements with None as tap on empty cells
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... >>> [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
	: ... [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
	: ... [(1, 'a', 21), (2, 'c', 22)]
	: =============
	: ... >>> [(1, 'a', 21), (2, 'c', 22), (3, 'f', None), (4, None, None)]

****** The "del" statement
       #+BEGIN_SRC python :results output :session lists
         a = [-1, 1, 66.25, 333, 333, 1234.5]
         del a[0]
         a
         print('=============')
         del a[2:4]
         a
         print('=============')
         del a[:]
         a
       #+END_SRC

       #+RESULTS:
       : 
       : >>> [1, 66.25, 333, 333, 1234.5]
       : =============
       : >>> [1, 66.25, 1234.5]
       : =============
       : >>> []

****** Tuples and Sequences
       A tuple consists of a number of values separated by commas
       #+BEGIN_SRC python :results output :session tuples
         t = 12345, 54321, 'hello!'
         t[0]
         print('=============')
         t
         print('=============')
         # Tuples may be nested:
         u = t, (1, 2, 3, 4, 5)
         u
         print('=============')
         # Tuples are immutable:
         # t[0] = 88888 !!
         # but they can contain mutable objects:
         v = ([1, 2, 3], [3, 2, 1])
         v
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> >>> >>> 12345
       : =============
       : (12345, 54321, 'hello!')
       : =============
       : ... >>> ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
       : =============
       : ... ... ... >>> ([1, 2, 3], [3, 2, 1])
       #+BEGIN_SRC python :results output :session tuples
         empty = ()
	 # possible syntax
         singleton = 'hello',    # <-- note trailing comma
         len(empty)
         print('=============')
         len(singleton)
         print('=============')
         singleton
	 print('=============')
	 #sequence unpacking
         x, y, z = t  # equal num of arguments on both sides
	 print(x, y, z)
       #+END_SRC

       #+RESULTS:
       : 
       : ... >>> 0
       : =============
       : 1
       : =============
       : ('hello',)
       : =============
       : ... >>> 12345 54321 hello!

****** Sets
	A set is an unordered collection with no duplicate elements.
	Basic uses include membership testing and eliminating duplicate
	entries.
	#+BEGIN_SRC python :results output :session sets
          basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
          print(basket)                      # show that duplicates have been removed
          print('=============')
          'orange' in basket                 # fast membership testing
          print('=============')
          'crabgrass' in basket
	#+END_SRC

	#+RESULTS:
	: Type "help", "copyright", "credits" or "license" for more information.
	: >>> >>> >>> >>> {'orange', 'apple', 'pear', 'banana'}
	: =============
	: True
	: =============
	: False

	+ Set objects also support mathematical operations like:
	  union
	  intersection
	  difference
	  symmetric difference
	  #+BEGIN_SRC python :results output :session sets
            # Demonstrate set operations on unique letters from two words

            a = set('abracadabra')
            b = set('alacazam')
            print(a)                                  # unique letters in a
            print('======unique letters in a=====')
            a - b                              # letters in a but not in b
            print('======letters in a but not in b=======')
            a | b                              # letters in either a or b
            print('=======letters in either a or b======')
            a & b                              # letters in both a and b
            print('=======letters in both a and b======')
            a ^ b                              # letters in a or b but not both
            print('======letters in a or b but not both=======')

	  #+END_SRC

	  #+RESULTS:
	  #+begin_example

	  >>> >>> >>> {'r', 'a', 'c', 'b', 'd'}
	  ======unique letters in a=====
	  {'r', 'b', 'd'}
	  ======letters in a but not in b=======
	  {'r', 'a', 'd', 'b', 'm', 'z', 'c', 'l'}
	  =======letters in either a or b======
	  {'a', 'c'}
	  =======letters in both a and b======
	  {'r', 'd', 'z', 'm', 'b', 'l'}
	  ======letters in a or b but not both=======
#+end_example
	  #+NAME: set comprehensions
	  #+BEGIN_SRC python :results output :session sets
	  a = {x for x in 'abracadabra' if x not in 'abc'}
	  print(a)
	  #+END_SRC

	  #+RESULTS: set comprehensions
	  : 
	  : {'r', 'd'}

****** Dictionaries
       #+BEGIN_QUOTE
       Unlike
       sequences, which are indexed by a range of numbers, dictionaries are
       indexed by keys, which can be any immutable type; strings and
       numbers can always be keys.  Tuples can be used as keys if they
       contain only strings, numbers, or tuples; if a tuple contains any
       mutable object either directly or indirectly, it cannot be used as a
       key. You can't use lists as keys, since lists can be modified in place
       using index assignments, slice assignments, or methods like "append()"
       and "extend()".
       #+END_QUOTE
       #+BEGIN_SRC python :results output :session dicts
         tel = {'jack': 4098, 'sape': 4139}
         tel['guido'] = 4127
         tel
         print('=============')
         tel['jack']

         del tel['sape']
         tel['irv'] = 4127
         tel
         print('=============')
         list(tel.keys())
         print('=============')
         sorted(tel.keys())
         print('=============')
         'guido' in tel
         print('=============')
         'jack' not in tel
       #+END_SRC
       #+BEGIN_SRC python :results output :session dicts
         # The "dict()" constructor builds dictionaries directly from sequences
         # of key-value pairs:

         dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
         print('=============')

         # In addition, dict comprehensions can be used to create dictionaries
         # from arbitrary key and value expressions:

         {x: x**2 for x in (2, 4, 6)}
         print('=============')

         # When the keys are simple strings, it is sometimes easier to specify
         # pairs using keyword arguments:

         dict(sape=4139, guido=4127, jack=4098)
       #+END_SRC

       #+RESULTS:
       : 
       : ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}
       : =============
       : >>> ... ... >>> {2: 4, 4: 16, 6: 36}
       : =============
       : >>> ... ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}

****** Looping Techniques
	#+BEGIN_SRC python :results output :session
          knights = {'gallahad': 'the pure', 'robin': 'the brave'}
          for k, v in knights.items():
              print(k, v)

          for i, v in enumerate(['tic', 'tac', 'toe']):
              print(i, v)

          # To loop over two or more sequences at the same time, the entries can
          # be paired with the "zip()" function.

          questions = ['name', 'quest', 'favorite color']
          answers = ['lancelot', 'the holy grail', 'blue']
          for q, a in zip(questions, answers):
              print('What is your {0}?  It is {1}.'.format(q, a))

	#+END_SRC

	#+RESULTS:
	: 
	: ... ... robin the brave
	: gallahad the pure
	: ... ... 0 tic
	: 1 tac
	: 2 toe
	: ... ... >>> >>> >>> ... ... What is your name?  It is lancelot.
	: What is your quest?  It is the holy grail.
	: What is your favorite color?  It is blue.

	Sometimes it is tempting to iterate some sequences in their reverse
	order:
	#+BEGIN_SRC python :results output :session

          for i in reversed(range(1, 10, 2)):
              print(i)

          # To loop over a sequence in sorted order, use the "sorted()" function
          # which returns a new sorted list while leaving the source unaltered.

          basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
          for f in sorted(set(basket)):
              print(f)

	#+END_SRC

	#+RESULTS:
	#+begin_example

	... ... 9
	7
	5
	3
	1
	... ... >>> >>> ... ... apple
	banana
	orange
	pear
#+end_example

****** More on Conditions
       #+BEGIN_SRC python :results output :session
         string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
         non_null = string1 or string2 or string3
         print(non_null)
       #+END_SRC

       #+RESULTS:
       : 
       : >>> Trondheim

****** Comparing Sequences and Other Types
       #+BEGIN_QUOTE
       (1, 2, 3)              < (1, 2, 4)
       [1, 2, 3]              < [1, 2, 4]
       'ABC' < 'C' < 'Pascal' < 'Python'
       (1, 2, 3, 4)           < (1, 2, 4)
       (1, 2)                 < (1, 2, -1)
       (1, 2, 3)             == (1.0, 2.0, 3.0)
       (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
       #+END_QUOTE

***** Modules
      #+BEGIN_SRC python :results output :session modules
        import fibo
        fibo.fib(1000)
        fibo.fib2(100)
        fibo.__name__
      #+END_SRC

      #+RESULTS:
      : Type "help", "copyright", "credits" or "license" for more information.
      : >>> >>> >>> >>> 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
      : [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
      : 'fibo'

****** More on Modules
       #+BEGIN_QUOTE
       Note: For efficiency reasons, each module is only imported once per
       interpreter session.  Therefore, if you change your modules, you
       must restart the interpreter -- or, if it's just one module you want
       to test interactively, use "importlib.reload()", e.g. "import
       importlib; importlib.reload(modulename)".
       #+END_QUOTE

******* Executing modules as scripts
******* The Module Search Path
******* "Compiled" Python files

****** Standard Modules
       #+BEGIN_SRC python :results output :session modules
         import sys
         for i, j in enumerate(sys.path):
             print(i, "::", j, end="\n")
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... 0 :: 
       : 1 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4
       : 2 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/plat-x86_64-linux-gnu
       : 3 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/lib-dynload
       : 4 :: /usr/lib/python3.4
       : 5 :: /usr/lib/python3.4/plat-x86_64-linux-gnu
       : 6 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/site-packages

****** The "dir()" Function
       #+BEGIN_QUOTE
       The built-in function "dir()" is used to find out which names a module
       defines.  It returns a sorted list of strings.

       Without arguments, "dir()" lists the names you have defined currently.
       #+END_QUOTE

****** Packages
       #+BEGIN_QUOTE
       Packages are a way of structuring Python's module namespace by using
       "dotted module names".
       #+END_QUOTE
******* Importing * From a Package
	For example, the file "sound/effects/__init__.py" could contain the
	following code:
	 
	__all__ = ["echo", "surround", "reverse"]
	 
	This would mean that "from sound.effects import *" would import the
	three named submodules of the "sound" package.

******* Intra-package References
	   from . import echo
	   from .. import formats
	   from ..filters import equalizer

******* Packages in Multiple Directories
	##
***** Input and Output
****** Fancier Output Formatting
	#+BEGIN_SRC python :results output
          for x in range(1, 11):
              print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))

          for x in range(1, 11):
              print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
              # Note use of 'end' on previous line
              print(repr(x*x*x).rjust(4))
	#+END_SRC

	#+BEGIN_SRC python :results output
          # Basic usage of the "str.format()" method looks like this:
          print('We are the {} who say "{}!"'.format('knights', 'Ni'))
          print('=============')
          print('{0} and {1}'.format('spam', 'eggs'))

          print('{1} and {0}'.format('spam', 'eggs'))
          print('=============')

          # If keyword arguments are used in the "str.format()" method, their
          # values are referred to by using the name of the argument.

          print('This {food} is {adjective}.'.format(
                food='spam', adjective='absolutely horrible'))
          print('=============')

          # Positional and keyword arguments can be arbitrarily combined:

          print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                             other='Georg'))
          print('=============')

          # "'!a'" (apply "ascii()"), "'!s'" (apply "str()") and "'!r'" (apply
          # "repr()") can be used to convert the value before it is formatted:

          import math
          print('The value of PI is approximately {!a}.'.format(math.pi))

          print('The value of PI is approximately {!r}.'.format(math.pi))
          print('=============')

          # An optional "':'" and format specifier can follow the field name. This
          # allows greater control over how the value is formatted.  The following
          # example rounds Pi to three places after the decimal.

          import math
          print('The value of PI is approximately {0:.3f}.'.format(math.pi))
          print('=============')

          # Passing an integer after the "':'" will cause that field to be a
          # minimum number of characters wide.  This is useful for making tables
          # pretty.

          table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
          for name, phone in table.items():
              print('{0:10} ==> {1:10d}'.format(name, phone))
          print('=============')
          # If you have a really long format string that you don't want to split
          # up, it would be nice if you could reference the variables to be
          # formatted by name instead of by position.  This can be done by simply
          # passing the dict and using square brackets "'[]'" to access the keys

          table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
          print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; ''Dcab: {0[Dcab]:d}'.
                format(table))
          print('=============')

          # This could also be done by passing the table as keyword arguments with
          # the '**' notation.

          #    >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
          print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.
                format(**table))
          print('=============')

          # This is particularly useful in combination with the built-in function
          # "vars()", which returns a dictionary containing all local variables.
	#+END_SRC

	#+RESULTS:
	#+begin_example
	We are the knights who say "Ni!"
	=============
	spam and eggs
	eggs and spam
	=============
	This spam is absolutely horrible.
	=============
	The story of Bill, Manfred, and Georg.
	=============
	The value of PI is approximately 3.141592653589793.
	The value of PI is approximately 3.141592653589793.
	=============
	The value of PI is approximately 3.142.
	=============
	Jack       ==>       4098
	Sjoerd     ==>       4127
	Dcab       ==>       7678
	=============
	Jack: 4098; Sjoerd: 4127; Dcab: 8637678
	=============
	Jack: 4098; Sjoerd: 4127; Dcab: 8637678
	=============
#+end_example

******* Old string formatting
	The "%" operator can also be used for string formatting.
	#+BEGIN_SRC python :results output
          import math
          print('The value of PI is approximately %5.3f.' % math.pi)
	#+END_SRC

	#+RESULTS:
	: The value of PI is approximately 3.142.

****** Reading and Writing Files
       #+BEGIN_QUOTE
       "open()" returns a *file object*, and is most commonly
       used with two arguments: "open(filename, mode)".

       >>> f = open('workfile', 'w')
	
       #+END_QUOTE

******* Methods of File Objects
	#+BEGIN_QUOTE
	It is good practice to use the "with" keyword when dealing with file
	objects.  This has the advantage that the file is properly closed
	after its suite finishes, even if an exception is raised on the way.
	It is also much shorter than writing equivalent "try"-"finally"
	blocks:
	#+END_QUOTE
	#+BEGIN_SRC python
          with open('workfile', 'r') as f:
              read_data = f.read()
          f.closed
	#+END_SRC
******* Saving structured data with "json"
	#+BEGIN_SRC python :results output :session json
	import json
	json.dumps([1, 'simple', 'list'])
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>> >>> >>> '[1, "simple", "list"]'

***** Errors and Exceptions
****** Syntax Errors
       Syntax errors, also known as parsing errors, are perhaps the most
       common kind of complaint you get while you are still learning Python
****** Exceptions
       Even if a statement or expression is syntactically correct, it may
       cause an error when an attempt is made to execute it. Errors detected
       during execution are called exceptions

****** Handling Exceptions
       #+BEGIN_SRC python :results output :session exeptions
         import sys

         try:
             f = open('myfile.txt')
             s = f.readline()
             i = int(s.strip())
         except OSError as err:
             print("OS error: {0}".format(err))
         except ValueError:
             print("Could not convert data to an integer.")
         except:
             print("Unexpected error:", sys.exc_info()[0])
             raise

       #+END_SRC

       #+RESULTS:
       : 
       : >>> ... ... ... ... ... ... ... ... ... ... ... OS error: [Errno 2] No such file or directory: 'myfile.txt'

       The "try" ... "except" statement has an optional *else clause*, which,
       when present, must follow all except clauses.  It is useful for code
       that must be executed if the try clause does not raise an exception.
       #+BEGIN_SRC python :results output :session exeptions
         for arg in sys.argv[1:]:
             try:
                 f = open(arg, 'r')
             except IOError:
                 print('cannot open', arg)
             else:
                 print(arg, 'has', len(f.readlines()), 'lines')
                 f.close()

       #+END_SRC

       #+RESULTS:

****** Raising Exceptions
       #+BEGIN_QUOTE
       The "raise" statement allows the programmer to force a specified
       exception to occur. For example:
       #+END_QUOTE
       #+BEGIN_SRC python :results output :session exeptions
       raise NameError('HiThere')
       #+END_SRC

       #+RESULTS:
       : Traceback (most recent call last):
       :   File "<stdin>", line 1, in <module>
       : NameError: HiThere
       #+BEGIN_QUOTE
       If you need to determine whether an exception was raised but don't
       intend to handle it, a simpler form of the "raise" statement allows
       you to re-raise the exception:
       #+END_QUOTE
       #+BEGIN_SRC python :results output :session exeptions
         try:
             raise NameError('HiThere')
         except NameError:
             print('An exception flew by!')
             raise
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... An exception flew by!
       : Traceback (most recent call last):
       :   File "<stdin>", line 2, in <module>
       : NameError: HiThere

****** User-defined Exceptions
       #+BEGIN_QUOTE
       Programs may name their own exceptions by creating a new exception
       class (see *Classes* for more about Python classes).  Exceptions
       should typically be derived from the "Exception" class, either
       directly or indirectly.  For example:
       #+END_QUOTE
       #+BEGIN_SRC python :results output :session exeptions
         class MyError(Exception):
             def __init__(self, value):
                 self.value = value
             def __str__(self):
                 return repr(self.value)

         try:
             raise MyError(2*2)
         except MyError as e:
             print('My exception occurred, value:', e.value)

         raise MyError('oops!')
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... >>> ... ... ... ... My exception occurred, value: 4
       : Traceback (most recent call last):
       :   File "<stdin>", line 1, in <module>
       : __main__.MyError: 'oops!'

****** Defining Clean-up Actions
	#+BEGIN_QUOTE
	A ~finally~ clause is always executed before leaving the "try"
	statement, whether an exception has occurred or not. When an exception
	has occurred in the "try" clause and has not been handled by an
	"except" clause (or it has occurred in an "except" or "else" clause),
	it is re-raised after the "finally" clause has been executed.  The
	"finally" clause is also executed "on the way out" when any other
	clause of the "try" statement is left via a "break", "continue" or
	"return" statement.
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session exeptions
          def divide(x, y):
              try:
                  result = x / y
              except ZeroDivisionError:
                  print("division by zero!")
              else:
                  print("result is", result)
              finally:
                  print("executing finally clause")

          divide(2, 1)
          print('=============')
          divide(2, 0)
          print('=============')
          divide("2", "1")
	#+END_SRC

	#+RESULTS:
	#+begin_example

	... ... ... ... ... ... ... ... >>> result is 2.0
	executing finally clause
	=============
	division by zero!
	executing finally clause
	=============
	executing finally clause
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "<stdin>", line 3, in divide
	TypeError: unsupported operand type(s) for /: 'str' and 'str'
#+end_example

	In real world applications, the "finally" clause is useful for
	releasing external resources (such as files or network connections),
	regardless of whether the use of the resource was successful.

****** Predefined Clean-up Actions
       #+BEGIN_QUOTE
       The "with" statement allows objects
       like files to be used in a way that ensures they are always cleaned up
       promptly and correctly.	
       #+END_QUOTE
       #+BEGIN_SRC python
         with open("myfile.txt") as f:
             for line in f:
                 print(line, end="!")
       #+END_SRC

       After the statement is executed, the file ~f~ is always closed, even
       if a problem was encountered while processing the lines.

***** Classes

****** A Word About Names and Objects
****** Python Scopes and Namespaces
******* Scopes and Namespaces Example
	#+BEGIN_SRC python :results output :session classes
          def scope_test():
              def do_local():
                  spam = "local spam"
              def do_nonlocal():
                  nonlocal spam
                  spam = "nonlocal spam"
              def do_global():
                  global spam
                  spam = "global spam"
              spam = "test spam"
              do_local()
              print('\n')
              print("After local assignment:", spam)
              do_nonlocal()
              print("After nonlocal assignment:", spam)
              do_global()
              print("After global assignment:", spam)

          scope_test()
          print("In global scope:", spam)
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... >>> 
	: 
	: After local assignment: test spam
	: After nonlocal assignment: nonlocal spam
	: After global assignment: nonlocal spam
	: In global scope: global spam

****** A First Look at Classes
******* Class Definition Syntax
******* Class Objects
	Support two kinds of operations:
	- attribute references
	  #+BEGIN_SRC python
            class MyClass:
                """A simple example class"""
                i = 12345
                def f(self):
                    return 'hello world'
	  #+END_SRC
	- instantiation
	  #+BEGIN_SRC python
	  x = MyClass()
	  #+END_SRC

******* Instance Objects
	- Data attributes
	- Methods

******* Method Objects
******* Class and Instance Variables
	#+BEGIN_SRC python :results output :session classes
          class Dog:
              kind = 'canine'         # class variable shared by all instances
              def __init__(self, name):
                  self.name = name    # instance variable unique to each instance

          d = Dog('Fido')
          e = Dog('Buddy')
          d.kind                  # shared by all dogs
          print('=============')
          e.kind                  # shared by all dogs
          print('=============')
          d.name                  # unique to d
          print('=============')
          e.name                  # unique to e
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... >>> >>> >>> 'canine'
	: =============
	: 'canine'
	: =============
	: 'Fido'
	: =============
	: 'Buddy'

	It is reasonable to avoid usage mutable objects as ~Class Instances~

	#+BEGIN_SRC python :results output :session classes
          class Dog:
              tricks = []             # mistaken use of a class variable
              def __init__(self, name):
                  self.name = name
              def add_trick(self, trick):
                  self.tricks.append(trick)

          d = Dog('Fido')
          e = Dog('Buddy')
          d.add_trick('roll over')
          e.add_trick('play dead')
	  print('\n')
          d.tricks                # unexpectedly shared by all dogs
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... >>> >>> >>> >>> >>>
	: ['roll over', 'play dead']

	Correct design of the class should use an instance variable instead:

	#+BEGIN_SRC python :results output :session classes
          class Dog:
              def __init__(self, name):
                  self.name = name
                  self.tricks = []    # creates a new empty list for each dog
              def add_trick(self, trick):
                  self.tricks.append(trick)

          d = Dog('Fido')
          e = Dog('Buddy')
          d.add_trick('roll over')
          e.add_trick('play dead')
          print('\n')
          d.tricks
          print('=============')
          e.tricks
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... >>> >>> >>> >>> >>>
	: ['roll over']
	: =============
	: ['play dead']

****** Random Remarks
       Methods may call other methods by using method attributes of the
       "self" argument:
       #+BEGIN_SRC python :results output :session classes
         class Bag:
             def __init__(self):
                 self.data = []
             def add(self, x):
                 self.data.append(x)
             def addtwice(self, x):
                 self.add(x)
                 self.add(x)

         b = Bag()
         b.add(3)
         print('\n')
         print(b.data)
         b.addtwice(5)
         print(b.data)
         b.__class__()
         isinstance(b, Bag)
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... ... ... >>> >>> >>>
       : [3]
       : >>> [3, 5, 5]
       : <__main__.Bag object at 0x7fbbe05e0898>
       : True

****** Inheritance
       #+BEGIN_SRC python
         class DerivedClassName(BaseClassName):
             <statement-1>
             .
             .
             .
             <statement-N>
       #+END_SRC
******* Multiple Inheritance
	#+BEGIN_SRC python
          class DerivedClassName(Base1, Base2, Base3):
              <statement-1>
              .
              .
              .
              <statement-N>
	#+END_SRC
	 
****** Private Variables
       #+BEGIN_QUOTE
       Name mangling is helpful for letting subclasses override methods
       without breaking intraclass method calls.  For example:
       #+END_QUOTE
       #+BEGIN_SRC python
         class Mapping:
             def __init__(self, iterable):
                 self.items_list = []
                 self.__update(iterable)

             def update(self, iterable):
                 for item in iterable:
                     self.items_list.append(item)

             __update = update   # private copy of original update() method

         class MappingSubclass(Mapping):

             def update(self, keys, values):
                 # provides new signature for update()
                 # but does not break __init__()
                 for item in zip(keys, values):
                     self.items_list.append(item)
       #+END_SRC

****** Odds and Ends
       #+BEGIN_SRC python
         class Employee:
             pass

         john = Employee() # Create an empty employee record

         # Fill the fields of the record
         john.name = 'John Doe'
         john.dept = 'computer lab'
         john.salary = 1000
       #+END_SRC

****** Exceptions Are Classes Too

****** Iterators
	#+BEGIN_SRC python :session classes
          #
          for element in [1, 2, 3]: print(element)
          for element in (1, 2, 3):
              print(element)
          d = {'one':1, 'two':2}
          for key in d:
              print(key)
          for key in d:
              print(key, d[key])
          for char in "123":
              print(char)
          # for line in open("myfile.txt"):
          #     print(line, end='')

	#+END_SRC

	Behind the scenes:
	#+BEGIN_SRC python :results output :session classes
          s = 'abc'
          it = iter(s)
          it
          print('=============')
          next(it)
          print('=============')
          next(it)
          print('=============')
          next(it)
          print('=============')
          next(it)

	#+END_SRC

	#+RESULTS:
	#+begin_example

	>>> <str_iterator object at 0x7f6883dd6ac8>
	=============
	'a'
	=============
	'b'
	=============
	'c'
	=============
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	StopIteration
#+end_example

	Having seen the mechanics behind the iterator protocol, it is easy to
	add iterator behavior to your classes.  Define an "__iter__()" method
	which returns an object with a "__next__()" method.  If the class
	defines "__next__()", then "__iter__()" can just return "self":
	
	#+BEGIN_SRC python :results output :session classes
          class Reverse:
              """Iterator for looping over a sequence backwards."""
              def __init__(self, data):
                  self.data = data
                  self.index = len(data)
              def __iter__(self):
                  return self
              def __next__(self):
                  if self.index == 0:
                      raise StopIteration
                  self.index = self.index - 1
                  return self.data[self.index]

          rev = Reverse('spam')
	  print('\n')
          iter(rev)
          for char in rev:
              print(char)
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... ... ... ... ... ... ... >>> >>>
	: <__main__.Reverse object at 0x7f6883dd6e48>
	: ... ... m
	: a
	: p
	: s

****** Generators
       #+BEGIN_SRC python :results output :session classes
         def reverse(data):
             for index in range(len(data)-1, -1, -1):
                 yield data[index]

         print('\n')
         for char in reverse('golf'):
             print(char)
       #+END_SRC

       ~Generator~s are a simple and powerful tool for creating iterators.
       They are written like regular functions but use the "yield" statement
       whenever they want to return data.  Each time "next()" is called on
       it, the generator resumes where it left off (it remembers all the data
       values and which statement was last executed).  An example shows that
       generators can be trivially easy to create:

       #+RESULTS:
       : 
       : ... ... >>>
       : ... ... f
       : l
       : o
       : g

****** Generator Expressions
       Some simple generators can be coded succinctly as expressions using a
       syntax similar to list comprehensions but with parentheses instead of
       brackets.
       #+BEGIN_SRC python
         >>> sum(i*i for i in range(10))                 # sum of squares
         285

         >>> xvec = [10, 20, 30]
         >>> yvec = [7, 5, 3]
         >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product
         260

         >>> from math import pi, sin
         >>> sine_table = {x: sin(x*pi/180) for x in range(0, 91)}

         >>> unique_words = set(word  for line in page  for word in line.split())

         >>> valedictorian = max((student.gpa, student.name) for student in graduates)

         >>> data = 'golf'
         >>> list(data[i] for i in range(len(data)-1, -1, -1))
         ['f', 'l', 'o', 'g']
       #+END_SRC

***** Brief Tour of the Standard Library
****** Operating System Interface					 :os:
       #+BEGIN_SRC python :session stdlib
         import os
         from pprint import pprint
         print('\n')
         pprint(dir(os))
         print('\n')
         help(os)

       #+END_SRC

       #+RESULTS:

****** File Wildcards						       :glob:
       The "glob" module provides a function for making file lists from
       directory wildcard searches:
       #+BEGIN_SRC python :results output :session stdlib
       import glob
       glob.glob('*.org')
       #+END_SRC

       #+RESULTS:
       : 
       : ['babel.org', 'doc.org', 'motto.org', 'magit.org']

****** Command Line Arguments
       - sys.argv
       - getopt
       - argparse

****** Error Output Redirection and Program Termination		     :stderr:
       #+BEGIN_SRC python :results output :session stdlib
         import sys
         sys.stderr.write('Warning, log file not found \
         starting a new one\n')
       #+END_SRC

       #+RESULTS:
       : 
       : ... Warning, log file not found starting a new one
       : 47

       The most direct way to terminate a script is to use "sys.exit()".

****** String Pattern Matching						 :re:
       #+BEGIN_SRC python :results output :session stdlib
         import re
         re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
         print('\n')
         re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
       #+END_SRC

       #+RESULTS:
       : 
       : ['foot', 'fell', 'fastest']
       : 
       : 'cat in the hat'

       #+BEGIN_QUOTE
       When only simple capabilities are needed, string methods are preferred
       because they are easier to read and debug:
       #+END_QUOTE
       #+BEGIN_SRC python :results output :session stdlib
       'tea for too'.replace('too', 'two')
       #+END_SRC

       #+RESULTS:
       : 'tea for two'

****** Mathematics				     :math:random:statistics:
       #+BEGIN_SRC python :results output :session stdlib
         import math
	 print('\n')
         math.cos(math.pi / 4)
         print('\n')
         math.log(1024, 2)
       #+END_SRC

       #+RESULTS:
       : 
       : 
       : 0.7071067811865476
       : 
       : 10.0

       #+BEGIN_SRC python :results output :session stdlib
         import random
         print('\n')
         random.choice(['apple', 'pear', 'banana'])
         print('\n')
         random.sample(range(100), 10)   # sampling without replacement
         print('\n')
         random.random()    # random float
         print('\n')
         random.randrange(6)    # random integer chosen from range(6)

       #+END_SRC

       #+RESULTS:
       : 
       : 
       : 'pear'
       : 
       : [39, 73, 77, 29, 35, 63, 89, 92, 59, 45]
       : 
       : 0.4777688668909027
       : 
       : 3

       #+BEGIN_SRC python :results output :session stdlib
         import statistics
         data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
         print('\n')
         statistics.mean(data)
         print('\n')
         statistics.median(data)
         print('\n')
         statistics.variance(data)
       #+END_SRC

       #+RESULTS:
       : 
       : 
       : 1.6071428571428572
       : 
       : 1.25
       : 
       : 1.3720238095238095

****** Internet Access						     :urllib:
       #+BEGIN_SRC python :results output :session stdlib
         from urllib.request import urlopen
         with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response:
             for line in response:
                 line = line.decode('utf-8')  # Decoding the binary data to text.
                 if 'EST' in line or 'EDT' in line:  # look for Eastern Time
                     print('\n')
                     print(line)
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... ... 
       : 
       : <BR>Mar. 01, 04:04:38 AM EST		Eastern Time

****** Dates and Times						       :date:
       #+BEGIN_SRC python :results output :session stdlib
         # dates are easily constructed and formatted
         from datetime import date
         now = date.today()
         print('\n')
         now
         now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")

         # dates support calendar arithmetic
         birthday = date(1978, 2, 23)
         age = now - birthday
         print('\n')
         age.days
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>>
       : datetime.date(2016, 3, 1)
       : '03-01-16. 01 Mar 2016 is a Tuesday on the 01 day of March.'
       : >>> ... >>> >>>
       : 13886

****** Data Compression						       :zlib:
       #+BEGIN_SRC python :results output :session stdlib
         import zlib
         s = b'witch which has which witches wrist watch'
         print('\n')
         len(s)
         #
         t = zlib.compress(s)
         print('\n')
         len(t)
         #
         zlib.decompress(t)
         #
         zlib.crc32(s)
       #+END_SRC

       #+RESULTS:
       : 
       : >>>
       : 41
       : ... >>>
       : 37
       : ... b'witch which has which witches wrist watch'
       : ... 226805979

****** Performance Measurement					     :timeit:
       #+BEGIN_SRC python :results output :session stdlib
         from timeit import Timer
         print('\n')
         Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
         print('\n')
         Timer('a,b = b,a', 'a=1; b=2').timeit()
       #+END_SRC

       #+RESULTS:
       : 
       : >>>
       : 0.14289407999967807
       : 
       : 0.13235212000017782

       #+BEGIN_QUOTE
       In contrast to "timeit"'s fine level of granularity, the "profile" and
       "pstats" modules provide tools for identifying time critical sections
       in larger blocks of code.
       #+END_QUOTE

****** Quality Control					   :doctest:unittest:
       #+BEGIN_QUOTE
	       The =doctest= module provides a tool for scanning a module and
	       validating tests embedded in a program's docstrings.  Test
	       construction is as simple as cutting-and-pasting a typical call along
	       with its results into the docstring. This improves the documentation
	       by providing the user with an example and it allows the doctest module
	       to make sure the code remains true to the documentation:
       #+END_QUOTE
	
       #+BEGIN_SRC python :results output :session stdlib
         def average(values):
             """Computes the arithmetic mean of a list of numbers.

             >>> print(average([20, 30, 70]))
             40.0
             """
             return sum(values) / len(values)

         import doctest
	 print('\n')
         doctest.testmod()   # automatically validate the embedded tests
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... ... >>> >>>
       : TestResults(failed=0, attempted=1)

       #+BEGIN_SRC python :results output :session stdlib
         import unittest

         class TestStringMethods(unittest.TestCase):
             def test_upper(self):
                 self.assertEqual('foo'.upper(), 'FOO')
             def test_isupper(self):
                 self.assertTrue('FOO'.isupper())
                 self.assertFalse('Foo'.isupper())
             def test_split(self):
                 s = 'hello world'
                 self.assertEqual(s.split(), ['hello', 'world'])
                 # check that s.split fails when the separator is not a string
                 with self.assertRaises(TypeError):
                     s.split(2)
       #+END_SRC

       #+RESULTS:

****** Batteries Included Â®

***** Brief Tour of the Standard Library -- Part II

****** Output Formatting
******* Provides a version of ~repr()~ customized for abbreviated   :reprlib:
	displays of large or deeply nested containers:
	#+BEGIN_SRC python :results output :session stdlib2
          import reprlib
          reprlib.repr(set('supercalifragilisticexpialidocious'))
	#+END_SRC

	#+RESULTS:
	: 
	: >>> "set(['a', 'c', 'd', 'e', 'f', 'g', ...])"

******* When the result is longer than one line, the "pretty	     :pprint:
	printer" adds line breaks and indentation to more clearly reveal data
	structure:
	#+BEGIN_SRC python :results output :session stdlib2
          import pprint
          t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
              'yellow'], 'blue']]]
          print('\n')
          pprint.pprint(t, width=30)
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>>
	: [[[['black', 'cyan'],
	:    'white',
	:    ['green', 'red']],
	:   [['magenta', 'yellow'],
	:    'blue']]]

******* The "textwrap" module formats paragraphs of text to fit	   :textwrap:
	a given screen	 width:
	#+BEGIN_SRC python :results output :session stdlib2
          import textwrap
          doc = """The wrap() method is just like fill() except that it returns
          a list of strings instead of one big string with newlines to separate
          the wrapped lines."""
	  print('\n')
          print(textwrap.fill(doc, width=40))
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... >>>
	: The wrap() method is just like fill()
	: except that it returns a list of strings
	: instead of one big string with newlines
	: to separate the wrapped lines.

******* The "locale" module accesses a database of culture specific  :locale:
	data formats. The grouping attribute of locale's format
	function provides a direct way of formatting numbers with
	group separators:
	#+BEGIN_SRC python :results output :session stdlib2
          import locale
	  # en_US.utf8 is out from locale -a bash output
          locale.setlocale(locale.LC_ALL, 'en_US.utf8')

          conv = locale.localeconv()          # get a mapping of conventions
          x = 1234567.8
          locale.format("%d", x, grouping=True)

          locale.format_string("%s%.*f", (conv['currency_symbol'],
                               conv['frac_digits'], x), grouping=True)
	#+END_SRC

	#+RESULTS:
	: 
	: ... 'en_US.utf8'
	: >>> >>> >>> '1,234,567'
	: >>> ... '$1,234,567.80'

****** Templating						   :Template:
       Simplified substitution syntax:
       #+BEGIN_SRC python :results output :session stdlib2
         from string import Template
         t = Template('${village}folk send $$10 to $cause.')
         t.substitute(village='Nottingham', cause='the ditch fund')
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> 'Nottinghamfolk send $10 to the ditch fund.'

       #+BEGIN_SRC python
         import time, os.path
         photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
         class BatchRename(Template):
             delimiter = '%'
         fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')
         # Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f

         t = BatchRename(fmt)
         date = time.strftime('%d%b%y')
         for i, filename in enumerate(photofiles):
             base, ext = os.path.splitext(filename)
             newname = t.substitute(d=date, n=i, f=ext)
             print('{0} --> {1}'.format(filename, newname))

            # img_1074.jpg --> Ashley_0.jpg
            # img_1076.jpg --> Ashley_1.jpg
            # img_1077.jpg --> Ashley_2.jpg
       #+END_SRC

****** Working with Binary Data Record Layouts			     :struct:
       #+BEGIN_SRC python
         import struct

         with open('myfile.zip', 'rb') as f:
             data = f.read()

         start = 0
         for i in range(3):                      # show the first 3 file headers
             start += 14
             fields = struct.unpack('<IIIHH', data[start:start+16])
             crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

             start += 16
             filename = data[start:start+filenamesize]
             start += filenamesize
             extra = data[start:start+extra_size]
             print(filename, hex(crc32), comp_size, uncomp_size)

             start += extra_size + comp_size     # skip to the next header
       #+END_SRC

****** Multi-threading					  :threading:zipfile:
       #+BEGIN_SRC python
         import threading, zipfile

         class AsyncZip(threading.Thread):
             def __init__(self, infile, outfile):
                 threading.Thread.__init__(self)
                 self.infile = infile
                 self.outfile = outfile
             def run(self):
                 f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
                 f.write(self.infile)
                 f.close()
                 print('Finished background zip of:', self.infile)

         background = AsyncZip('mydata.txt', 'myarchive.zip')
         background.start()
         print('The main program continues to run in foreground.')

         background.join()    # Wait for the background task to finish
         print('Main program waited until background was done.')
       #+END_SRC
	
****** Logging							    :logging:
       #+BEGIN_SRC python :results output :session stdlib2
         import logging
         logging.debug('Debugging information')
         logging.info('Informational message')
         logging.warning('Warning:config file %s not found', 'server.conf')
         logging.error('Error occurred')
         logging.critical('Critical error -- shutting down')
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> WARNING:root:Warning:config file server.conf not found
       : ERROR:root:Error occurred
       : CRITICAL:root:Critical error -- shutting down

****** Weak References						 :weakref:gc:
       Python does automatic memory management (reference counting for most
       objects and *garbage collection* to eliminate cycles).  The memory is
       freed shortly after the last reference to it has been eliminated.
       #+BEGIN_SRC python :results output :session stdlib2
         import weakref, gc
         class A:
             def __init__(self, value):
                 self.value = value
             def __repr__(self):
                 return str(self.value)

         a = A(10)                   # create a reference
         d = weakref.WeakValueDictionary()
         d['primary'] = a            # does not create a reference
         print('\n')
         d['primary']                # fetch the object if it is still alive

         del a                       # remove the one reference
         gc.collect()                # run garbage collection right away

         d['primary']                # entry was automatically removed
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... >>> >>> >>> >>>
       : 10
       : >>> >>> 0
       : >>> Traceback (most recent call last):
       :   File "<stdin>", line 1, in <module>
       :   File "/home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/weakref.py", line 125, in __getitem__
       :     o = self.data[key]()
       : KeyError: 'primary'

****** Tools for Working with Lists
******* Array							      :array:
	#+BEGIN_SRC python :results output :session stdlib2
          from array import array
          a = array('H', [4000, 10, 700, 22222])
          print('\n')
          sum(a)
          print('\n')
          a[1:3]
	#+END_SRC

	#+RESULTS:
	: 
	: >>>
	: 26932
	: 
	: array('H', [10, 700])
******* Deque							      :deque:
	The "collections" module provides a "deque()" object that is like a
	list with faster appends and pops from the left side but slower
	lookups in the middle. These objects are well suited for implementing
	queues and breadth first tree searches:

	#+BEGIN_SRC python :results output :session stdlib2
          from collections import deque
          d = deque(["task1", "task2", "task3"])
          d.append("task4")
          print('\n')
          print("Handling", d.popleft())
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>>
	: Handling task1
	 
	#+BEGIN_SRC python
          unsearched = deque([starting_node])
          def breadth_first_search(unsearched):
              node = unsearched.popleft()
              for m in gen_moves(node):
                  if is_goal(m):
                      return m
                  unsearched.append(m)

	#+END_SRC
******* Bisect							     :bisect:
	In addition to alternative list implementations, the library also
	offers other tools such as the "bisect" module with functions for
	manipulating sorted lists:

	#+BEGIN_SRC python :results output :session stdlib2
          import bisect
          scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
          bisect.insort(scores, (300, 'ruby'))
	  print('\n')
          scores
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>>
	: [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
******* Heap							      :heapq:
	The "heapq" module provides functions for implementing heaps based on
	regular lists.  The lowest valued entry is always kept at position
	zero.  This is useful for applications which repeatedly access the
	smallest element but do not want to run a full list sort:

	#+BEGIN_SRC python :results output :session stdlib2
          from heapq import heapify, heappop, heappush
          data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
          heapify(data)                      # rearrange the list into heap order
          heappush(data, -5)                 # add a new entry
          print('\n')
          [heappop(data) for i in range(3)]  # fetch the three smallest entries
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>> >>>
	: [-5, 0, 1]

****** Decimal Floating Point Arithmetic			    :Decimal:
       Several curious observations:

******* Difference in results
	#+BEGIN_SRC python :results output :session stdlib2
          from decimal import Decimal
          round(Decimal('0.70') * Decimal('1.05'), 2)
          round(.70 * 1.05, 2)
	#+END_SRC

	#+RESULTS:
	: 
	: Decimal('0.74')
	: 0.73

******* Non-equality
	#+BEGIN_SRC python :results output :session stdlib2
          Decimal('1.00') % Decimal('.10')
          print('\n')
          1.00 % 0.10

          sum([Decimal('0.1')]*10) == Decimal('1.0')

          sum([0.1]*10) == 1.0
	#+END_SRC

	#+RESULTS:
	: Decimal('0.00')
	: 
	: 0.09999999999999995
	: >>> True
	: >>> False

******* Arbitrary precision
	#+BEGIN_SRC python :results output :session stdlib2
          getcontext().prec = 36
          Decimal(1) / Decimal(7)
	#+END_SRC

	#+RESULTS:
	: Traceback (most recent call last):
	:   File "<stdin>", line 1, in <module>
	: NameError: name 'getcontext' is not defined
	: Decimal('0.1428571428571428571428571429')

***** Virtual Environments and Packages			       :venv:
****** Introduction
****** Creating Virtual Environments
****** Managing Packages with pip				  :pip:shell:
	#+BEGIN_SRC shell :results output
          echo
            echo "It's pip list there"
            pip list
            #
            echo
            echo 'Autopep properties:'
            pip show autopep8
	    echo
	    echo
	    echo 'Git status there >>'
            git status
	#+END_SRC

	#+RESULTS:
	#+begin_example

	It's pip list there
	autopep8 (1.2.1)
	decorator (4.0.6)
	ipython (4.0.3)
	ipython-genutils (0.1.0)
	path.py (8.1.2)
	pep8 (1.7.0)
	pexpect (4.0.1)
	pickleshare (0.6)
	pip (8.0.2)
	ptyprocess (0.5)
	setuptools (12.0.5)
	simplegeneric (0.8.1)
	traitlets (4.1.0)

	Autopep properties:
	---
	Metadata-Version: 1.1
	Name: autopep8
	Version: 1.2.1
	Summary: A tool that automatically formats Python code to conform to the PEP 8 style guide
	Home-page: https://github.com/hhatto/autopep8
	Author: Hideo Hattori
	Author-email: hhatto.jp@gmail.com
	License: Expat License
	Location: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/site-packages
	Requires: pep8
	Entry-points:
	  [console_scripts]
	  autopep8 = autopep8:main


	Git status there >>
	On branch master
	Your branch is ahead of 'origin/master' by 6 commits.
	  (use "git push" to publish your local commits)
	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

		modified:   motto.org

	no changes added to commit (use "git add" and/or "git commit -a")
#+end_example

	#+BEGIN_EXAMPLE
	pip freeze > requirements.txt
	#+END_EXAMPLE

	The "requirements.txt" can then be committed to version control and
	shipped as part of an application.  Users can then install all the
	necessary packages with "install -r":

	#+BEGIN_EXAMPLE
	pip install -r requirements.txt
	#+END_EXAMPLE

***** Interactive Input Editing and History Substitution
****** Tab Completion and History Editing

****** Alternatives to the Interactive Interpreter

***** Floating Point Arithmetic:  Issues and Limitations
      Just remember, even though the printed result looks like the exact
      value of 1/10, the actual stored value is the nearest representable
      binary fraction.
      #+BEGIN_SRC python :results output :session floating
        import math
        format(math.pi, '.12g')
        format(math.pi, '.2f')
        repr(math.pi)
        .1 + .1 + .1 == .3              # Sad but true ;-(
	round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1)
      #+END_SRC

      #+RESULTS:
      : 
      : '3.14159265359'
      : '3.14'
      : '3.141592653589793'
      : False
      : False

****** Representation Error
       refers to the fact that some (most, actually)
       decimal fractions cannot be represented exactly as binary (base 2)
       fractions. This is the chief reason why Python (or Perl, C, C++, Java,
       Fortran, and many others) often won't display the exact decimal number
       you expect.

***** What Now?
***** Appendix
****** Interactive Mode
******* Error Handling

******* Executable Python Scripts

******* The Interactive Startup File

******* The Customization Modules

**** Standard Library [100%]                                         :stdlib:
***** 1. Introduction

***** 2. Built-in Functions
      #+BEGIN_QUOTE
      built-in functions and exceptions â objects that can be used by
      all Python code *without the need of an import* statement.
      #+END_QUOTE
      #+BEGIN_SRC python
        abs()         dict()      help()          min()      setattr()          
        all()         dir()       hex()           next()     slice()            
        any()         divmod()    id()            object()   sorted()           
        ascii()       enumerate() input()         oct()      staticmethod()     
        bin()         eval()      int()           open()     str()              
        bool()        exec()      isinstance()    ord()      sum()              
        bytearray()   filter()    issubclass()    pow()      super()            
        bytes()       float()     iter()          print()    tuple()            
        callable()    format()    len()           property() type()             
        chr()         frozenset() list()          range()    vars()             
        classmethod() getattr()   locals()        repr()     zip()              
        compile()     globals()   map()           reversed() __import__()       
        complex()     hasattr()   max()           round()                       
        delattr()     hash()      memoryview()    set()

      #+END_SRC

	#+BEGIN_SRC python :results output :session biult-in
          help('all')
	#+END_SRC

	#+RESULTS:
	: Help on built-in function all in module builtins:
	: 
	: all(...)
	:     all(iterable) -> bool
	:     
	:     Return True if bool(x) is True for all values x in the iterable.
	:     If the iterable is empty, return True.


***** 3. Built-in Constants
      - False
      - True
      - None
      - NotImplemented
      - Ellipsis
      - __debug__

      Test-driven development might be a self-explained approach in
      studying. Create the general capability test:
      #+BEGIN_SRC python :tangle test_stdlib.py
        import unittest


        class TestGeneric(unittest.TestCase):

            def test_true(self):
                self.assertTrue(1 + 3 == 4)

            def test_false(self):
                self.assertFalse(1 + 4 == 4)

            def test_none(self):
                value = None
                self.assertIsNone(value)

            # def test_not_implemented(self):
            #     self.assertTrue("abc" < 123)

            # def test_ellipsis(self):
            #     self.assertTrue('ellipsis' == type(Ellipsis))

            # def test__debug__(self):
            #     self.assertTrue(__debug__)
      #+END_SRC

      #+BEGIN_SRC shell :results output pp :exports both
      python -m unittest -v test_stdlib.py 2>&1
      #+END_SRC

      #+RESULTS:
      : test_false (test_stdlib.TestGeneric) ... ok
      : test_none (test_stdlib.TestGeneric) ... ok
      : test_true (test_stdlib.TestGeneric) ... ok
      : 
      : ----------------------------------------------------------------------
      : Ran 3 tests in 0.000s
      : 
      : OK


      
****** 3.1. Constants added by the site module 
***** 4. Built-in Types

****** 4.1. Truth Value Testing 

****** 4.2. Boolean Operations â and, or, not 

****** 4.3. Comparisons 

****** 4.4. Numeric Types â int, float, complex 

****** 4.5. Iterator Types 

****** 4.6. Sequence Types â list, tuple, range 

****** 4.7. Text Sequence Type â str 

****** 4.8. Binary Sequence Types â bytes, bytearray, memoryview 

****** 4.9. Set Types â set, frozenset 

****** 4.10. Mapping Types â dict 

****** 4.11. Context Manager Types 

****** 4.12. Other Built-in Types 

****** 4.13. Special Attributes 

***** 5. Built-in Exceptions

****** 5.1. Base classes 

****** 5.2. Concrete exceptions 

****** 5.3. Warnings 

****** 5.4. Exception hierarchy 

***** 6. Text Processing Services

****** 6.1. string â Common string operations 

****** 6.2. re â Regular expression operations 

****** 6.3. difflib â Helpers for computing deltas 

****** 6.4. textwrap â Text wrapping and filling 

****** 6.5. unicodedata â Unicode Database 

****** 6.6. stringprep â Internet String Preparation 

****** 6.7. readline â GNU readline interface 

****** 6.8. rlcompleter â Completion function for GNU readline 

***** 7. Binary Data Services

****** 7.1. struct â Interpret bytes as packed binary data 

****** 7.2. codecs â Codec registry and base classes 

***** 8. Data Types

****** 8.1. datetime â Basic date and time types 

****** 8.2. calendar â General calendar-related functions 

****** 8.3. collections â Container datatypes 

****** 8.4. collections.abc â Abstract Base Classes for Containers 

****** 8.5. heapq â Heap queue algorithm 

****** 8.6. bisect â Array bisection algorithm			     :bisect:
       #+BEGIN_SRC python :results output :session stdlib
         from bisect import bisect_left

         data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
         data.sort(key=lambda r: r[1])
         print('\n')
         data
         keys = [r[1] for r in data]         # precomputed list of keys
         print("This are the keys: %s" % keys)
         data[bisect_left(keys, 0)]
         data[bisect_left(keys, 1)]
         data[bisect_left(keys, 5)]
         data[bisect_left(keys, 8)]
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> >>>
       : [('black', 0), ('blue', 1), ('red', 5), ('yellow', 8)]
       : >>> This are the keys: [0, 1, 5, 8]
       : ('black', 0)
       : ('blue', 1)
       : ('red', 5)
       : ('yellow', 8)


****** 8.7. array â Efficient arrays of numeric values 

****** 8.8. weakref â Weak references 

****** 8.9. types â Dynamic type creation and names for built-in types 

****** 8.10. copy â Shallow and deep copy operations 

****** 8.11. pprint â Data pretty printer 

****** 8.12. reprlib â Alternate repr() implementation 

****** 8.13. enum â Support for enumerations 

***** 9. Numeric and Mathematical Modules

****** 9.1. numbers â Numeric abstract base classes 

****** 9.2. math â Mathematical functions 

****** 9.3. cmath â Mathematical functions for complex numbers 

****** 9.4. decimal â Decimal fixed point and floating point arithmetic 

****** 9.5. fractions â Rational numbers 

****** 9.6. random â Generate pseudo-random numbers 

****** 9.7. statistics â Mathematical statistics functions 

***** 10. Functional Programming Modules

****** 10.1. itertools â Functions creating iterators for efficient

    looping 

****** 10.2. functools â Higher-order functions and operations on

    callable objects 

****** 10.3. operator â Standard operators as functions 

***** 11. File and Directory Access

****** 11.1. pathlib â Object-oriented filesystem paths 

****** 11.2. os.path â Common pathname manipulations 

****** 11.3. fileinput â Iterate over lines from multiple input streams 

****** 11.4. stat â Interpreting stat() results 

****** 11.5. filecmp â File and Directory Comparisons 

****** 11.6. tempfile â Generate temporary files and directories 

****** 11.7. glob â Unix style pathname pattern expansion 

****** 11.8. fnmatch â Unix filename pattern matching 

****** 11.9. linecache â Random access to text lines 

****** 11.10. shutil â High-level file operations 

****** 11.11. macpath â Mac OS 9 path manipulation functions 

***** 12. Data Persistence

****** 12.1. pickle â Python object serialization 

****** 12.2. copyreg â Register pickle support functions 

****** 12.3. shelve â Python object persistence 

****** 12.4. marshal â Internal Python object serialization 

****** 12.5. dbm â Interfaces to Unix âdatabasesâ 

****** 12.6. sqlite3 â DB-API 2.0 interface for SQLite databases 

***** 13. Data Compression and Archiving

****** 13.1. zlib â Compression compatible with gzip 

****** 13.2. gzip â Support for gzip files 

****** 13.3. bz2 â Support for bzip2 compression 

****** 13.4. lzma â Compression using the LZMA algorithm 

****** 13.5. zipfile â Work with ZIP archives 

****** 13.6. tarfile â Read and write tar archive files 

***** 14. File Formats

****** 14.1. csv â CSV File Reading and Writing 

****** 14.2. configparser â Configuration file parser 

****** 14.3. netrc â netrc file processing 

****** 14.4. xdrlib â Encode and decode XDR data 

****** 14.5. plistlib â Generate and parse Mac OS X .plist files 

***** 15. Cryptographic Services

****** 15.1. hashlib â Secure hashes and message digests 

****** 15.2. hmac â Keyed-Hashing for Message Authentication 

***** 16. Generic Operating System Services

****** 16.1. os â Miscellaneous operating system interfaces 

****** 16.2. io â Core tools for working with streams 

****** 16.3. time â Time access and conversions 

****** 16.4. argparse â Parser for command-line options, arguments and

    sub-commands 

****** 16.5. getopt â C-style parser for command line options 

****** 16.6. logging â Logging facility for Python 

****** 16.7. logging.config â Logging configuration 

****** 16.8. logging.handlers â Logging handlers 

****** 16.9. getpass â Portable password input 

****** 16.10. curses â Terminal handling for character-cell displays 

****** 16.11. curses.textpad â Text input widget for curses programs 

****** 16.12. curses.ascii â Utilities for ASCII characters 

****** 16.13. curses.panel â A panel stack extension for curses 

****** 16.14. platform â Access to underlying platformâs identifying

    data 

****** 16.15. errno â Standard errno system symbols 

****** 16.16. ctypes â A foreign function library for Python 

***** 17. Concurrent Execution

****** 17.1. threading â Thread-based parallelism 

****** 17.2. multiprocessing â Process-based parallelism 

****** 17.3. The concurrent package 

****** 17.4. concurrent.futures â Launching parallel tasks 

****** 17.5. subprocess â Subprocess management 

****** 17.6. sched â Event scheduler 

****** 17.7. queue â A synchronized queue class 

****** 17.8. dummy_threading â Drop-in replacement for the threading

    module 

****** 17.9. _thread â Low-level threading API 

****** 17.10. _dummy_thread â Drop-in replacement for the _thread module 

***** 18. Interprocess Communication and Networking

****** 18.1. socket â Low-level networking interface 

****** 18.2. ssl â TLS/SSL wrapper for socket objects 

****** 18.3. select â Waiting for I/O completion 

****** 18.4. selectors â High-level I/O multiplexing 

****** 18.5. asyncio â Asynchronous I/O, event loop, coroutines and

    tasks 

****** 18.6. asyncore â Asynchronous socket handler 

****** 18.7. asynchat â Asynchronous socket command/response handler 

****** 18.8. signal â Set handlers for asynchronous events 

****** 18.9. mmap â Memory-mapped file support 

***** 19. Internet Data Handling

****** 19.1. email â An email and MIME handling package 

****** 19.2. json â JSON encoder and decoder 

****** 19.3. mailcap â Mailcap file handling 

****** 19.4. mailbox â Manipulate mailboxes in various formats 

****** 19.5. mimetypes â Map filenames to MIME types 

****** 19.6. base64 â Base16, Base32, Base64, Base85 Data Encodings 

****** 19.7. binhex â Encode and decode binhex4 files 

****** 19.8. binascii â Convert between binary and ASCII 

****** 19.9. quopri â Encode and decode MIME quoted-printable data 

****** 19.10. uu â Encode and decode uuencode files 

***** 20. Structured Markup Processing Tools

****** 20.1. html â HyperText Markup Language support 

****** 20.2. html.parser â Simple HTML and XHTML parser 

****** 20.3. html.entities â Definitions of HTML general entities 

****** 20.4. XML Processing Modules 

****** 20.5. xml.etree.ElementTree â The ElementTree XML API 

****** 20.6. xml.dom â The Document Object Model API 

****** 20.7. xml.dom.minidom â Minimal DOM implementation 

****** 20.8. xml.dom.pulldom â Support for building partial DOM trees 

****** 20.9. xml.sax â Support for SAX2 parsers 

****** 20.10. xml.sax.handler â Base classes for SAX handlers 

****** 20.11. xml.sax.saxutils â SAX Utilities 

****** 20.12. xml.sax.xmlreader â Interface for XML parsers 

****** 20.13. xml.parsers.expat â Fast XML parsing using Expat 

***** 21. Internet Protocols and Support

****** 21.1. webbrowser â Convenient Web-browser controller 

****** 21.2. cgi â Common Gateway Interface support 

****** 21.3. cgitb â Traceback manager for CGI scripts 

****** 21.4. wsgiref â WSGI Utilities and Reference Implementation 

****** 21.5. urllib â URL handling modules 

****** 21.6. urllib.request â Extensible library for opening URLs 

****** 21.7. urllib.response â Response classes used by urllib 

****** 21.8. urllib.parse â Parse URLs into components 

****** 21.9. urllib.error â Exception classes raised by urllib.request 

****** 21.10. urllib.robotparser â Parser for robots.txt 

****** 21.11. http â HTTP modules 

****** 21.12. http.client â HTTP protocol client 

****** 21.13. ftplib â FTP protocol client 

****** 21.14. poplib â POP3 protocol client 

****** 21.15. imaplib â IMAP4 protocol client 

****** 21.16. nntplib â NNTP protocol client 

****** 21.17. smtplib â SMTP protocol client 

****** 21.18. smtpd â SMTP Server 

****** 21.19. telnetlib â Telnet client 

****** 21.20. uuid â UUID objects according to RFC 4122 

****** 21.21. socketserver â A framework for network servers 

****** 21.22. http.server â HTTP servers 

****** 21.23. http.cookies â HTTP state management 

****** 21.24. http.cookiejar â Cookie handling for HTTP clients 

****** 21.25. xmlrpc â XMLRPC server and client modules 

****** 21.26. xmlrpc.client â XML-RPC client access 

****** 21.27. xmlrpc.server â Basic XML-RPC servers 

****** 21.28. ipaddress â IPv4/IPv6 manipulation library 

***** 22. Multimedia Services

****** 22.1. audioop â Manipulate raw audio data 

****** 22.2. aifc â Read and write AIFF and AIFC files 

****** 22.3. sunau â Read and write Sun AU files 

****** 22.4. wave â Read and write WAV files 

****** 22.5. chunk â Read IFF chunked data 

****** 22.6. colorsys â Conversions between color systems 

****** 22.7. imghdr â Determine the type of an image 

****** 22.8. sndhdr â Determine type of sound file 

****** 22.9. ossaudiodev â Access to OSS-compatible audio devices 

***** 23. Internationalization

****** 23.1. gettext â Multilingual internationalization services 

****** 23.2. locale â Internationalization services 

***** 24. Program Frameworks

****** 24.1. turtle â Turtle graphics 

****** 24.2. cmd â Support for line-oriented command interpreters 

****** 24.3. shlex â Simple lexical analysis 

***** 25. Graphical User Interfaces with Tk

****** 25.1. tkinter â Python interface to Tcl/Tk 

****** 25.2. tkinter.ttk â Tk themed widgets 

****** 25.3. tkinter.tix â Extension widgets for Tk 

****** 25.4. tkinter.scrolledtext â Scrolled Text Widget 

****** 25.5. IDLE 

****** 25.6. Other Graphical User Interface Packages 

***** 26. Development Tools

****** 26.1. typing â Support for type hints 

****** 26.2. pydoc â Documentation generator and online help system 

****** 26.3. doctest â Test interactive Python examples 

****** 26.4. unittest â Unit testing framework 

****** 26.5. unittest.mock â mock object library 

****** 26.6. unittest.mock â getting started 

****** 26.7. 2to3 - Automated Python 2 to 3 code translation 

****** 26.8. test â Regression tests package for Python 

****** 26.9. test.support â Utilities for the Python test suite 

***** 27. Debugging and Profiling

****** 27.1. bdb â Debugger framework 

****** 27.2. faulthandler â Dump the Python traceback 

****** 27.3. pdb â The Python Debugger 

****** 27.4. The Python Profilers 

****** 27.5. timeit â Measure execution time of small code snippets 

****** 27.6. trace â Trace or track Python statement execution 

****** 27.7. tracemalloc â Trace memory allocations 

***** 28. Software Packaging and Distribution

****** 28.1. distutils â Building and installing Python modules 

****** 28.2. ensurepip â Bootstrapping the pip installer 

****** 28.3. venv â Creation of virtual environments 

****** 28.4. zipapp â Manage executable python zip archives 

***** 29. Python Runtime Services

****** 29.1. sys â System-specific parameters and functions 

****** 29.2. sysconfig â Provide access to Pythonâs configuration

    information 

****** 29.3. builtins â Built-in objects 

****** 29.4. __main__ â Top-level script environment 

****** 29.5. warnings â Warning control 

****** 29.6. contextlib â Utilities for with-statement contexts 

****** 29.7. abc â Abstract Base Classes 

****** 29.8. atexit â Exit handlers 

****** 29.9. traceback â Print or retrieve a stack traceback 

****** 29.10. __future__ â Future statement definitions 

****** 29.11. gc â Garbage Collector interface 

****** 29.12. inspect â Inspect live objects 

****** 29.13. site â Site-specific configuration hook 

****** 29.14. fpectl â Floating point exception control 

***** 30. Custom Python Interpreters

****** 30.1. code â Interpreter base classes 

****** 30.2. codeop â Compile Python code 

***** 31. Importing Modules

****** 31.1. zipimport â Import modules from Zip archives 

****** 31.2. pkgutil â Package extension utility 

****** 31.3. modulefinder â Find modules used by a script 

****** 31.4. runpy â Locating and executing Python modules 

****** 31.5. importlib â The implementation of import 

***** 32. Python Language Services

****** 32.1. parser â Access Python parse trees 

****** 32.2. ast â Abstract Syntax Trees 

****** 32.3. symtable â Access to the compilerâs symbol tables 

****** 32.4. symbol â Constants used with Python parse trees 

****** 32.5. token â Constants used with Python parse trees 

****** 32.6. keyword â Testing for Python keywords 

****** 32.7. tokenize â Tokenizer for Python source 

****** 32.8. tabnanny â Detection of ambiguous indentation 

****** 32.9. pyclbr â Python class browser support 

****** 32.10. py_compile â Compile Python source files 

****** 32.11. compileall â Byte-compile Python libraries 

****** 32.12. dis â Disassembler for Python bytecode 

****** 32.13. pickletools â Tools for pickle developers 

***** 33. Miscellaneous Services

****** 33.1. formatter â Generic output formatting 

***** 34. MS Windows Specific Services

****** 34.1. msilib â Read and write Microsoft Installer files 

****** 34.2. msvcrt â Useful routines from the MS VC++ runtime 

****** 34.3. winreg â Windows registry access 

****** 34.4. winsound â Sound-playing interface for Windows 

***** 35. Unix Specific Services

****** 35.1. posix â The most common POSIX system calls 

****** 35.2. pwd â The password database 

****** 35.3. spwd â The shadow password database 

****** 35.4. grp â The group database 

****** 35.5. crypt â Function to check Unix passwords 

****** 35.6. termios â POSIX style tty control 

****** 35.7. tty â Terminal control functions 

****** 35.8. pty â Pseudo-terminal utilities 

****** 35.9. fcntl â The fcntl and ioctl system calls 

****** 35.10. pipes â Interface to shell pipelines 

****** 35.11. resource â Resource usage information 

****** 35.12. nis â Interface to Sunâs NIS (Yellow Pages) 

****** 35.13. syslog â Unix syslog library routines 

***** 36. Superseded Modules

****** 36.1. optparse â Parser for command line options 

****** 36.2. imp â Access the import internals 

***** 37. Undocumented Modules

****** 37.1. Platform specific modules 

**** Python HOWTOs [0%]                                               :howto:
***** Porting Python 2 Code to Python 3

****** The Short Explanation

****** Details

******* Drop support for Python 2.6 and older

******* Make sure you specify the proper version support in your
           "setup.py" file

******* Have good test coverage

******* Learn the differences between Python 2 & 3

******* Update your code

******** Division

******** Text versus binary data

******* Prevent compatibility regressions

******* Check which dependencies block your transition

******* Update your "setup.py" file to denote Python 3 compatibility

******* Use continuous integration to stay compatible

****** Dropping Python 2 support completely

***** Porting Extension Modules to Python 3

****** Conditional compilation

****** Changes to Object APIs

******* str/unicode Unification

******* long/int Unification

****** Module initialization and state

****** CObject replaced with Capsule

****** Other options

***** Curses Programming with Python

****** What is curses?

******* The Python curses module

****** Starting and ending a curses application

****** Windows and Pads

****** Displaying Text

******* Attributes and Color

****** User Input

****** For More Information

***** Descriptor HowTo Guide

****** Abstract

****** Definition and Introduction

****** Descriptor Protocol

****** Invoking Descriptors

****** Descriptor Example

****** Properties

****** Functions and Methods

****** Static Methods and Class Methods

***** Functional Programming HOWTO [100%]                         :func_prog:

****** Introduction [4/4]

******* Formal provability
	#+BEGIN_QUOTE
	Even if you wrote down or generated
	a proof, there would then be the question of verifying the proof;
	maybe there's an error in it, and you wrongly believe you've proved
	the program correct.
	#+END_QUOTE
******* Modularity

******* Ease of debugging and testing

******* Composability
	#+BEGIN_QUOTE
	Over time you'll form a personal library of utilities.  Often you'll
	assemble new programs by arranging existing functions in a new
	configuration and writing a few functions specialized for the current
	task.
	#+END_QUOTE

****** Iterators						       :iter:
       #+BEGIN_QUOTE
       An iterator is an object representing a stream of data; this object
       returns the data one element at a time.
       #+END_QUOTE

       #+BEGIN_SRC python :results output :session fp
         L = [1,2,3]
         it = iter(L)
         print('\n')
         it  #doctest: +ELLIPSIS
         print('\n')
         it.__next__()  # same as next(it)
	 next(it)
	 next(it)
	 next(it)
       #+END_SRC

       #+RESULTS:
       #+begin_example

       >>>
       <list_iterator object at 0x7f6a3ceeb3c8>

       1
       2
       3
       Traceback (most recent call last):
	 File "<stdin>", line 1, in <module>
       StopIteration
#+end_example

******* Data Types That Support Iterators
	#+BEGIN_SRC python :results output :session fp
          m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,
	       'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,
	       'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
          print('\n')
          print('\n')
          for key in m:  #doctest: +SKIP
              print(key, m[key])

          print('\n')
          for value in m.values():  #doctest: +SKIP
              print(value)

          print('\n')
          for value in m.items():  #doctest: +SKIP
              print(value)

	#+END_SRC

	#+RESULTS:
	#+begin_example

	... >>>

	... ... Dec 12
	Apr 4
	Aug 8
	Nov 11
	Jun 6
	Jan 1
	Sep 9
	Oct 10
	Feb 2
	Mar 3
	May 5
	Jul 7

	... ... 12
	4
	8
	11
	6
	1
	9
	10
	2
	3
	5
	7

	... ... ('Dec', 12)
	('Apr', 4)
	('Aug', 8)
	('Nov', 11)
	('Jun', 6)
	('Jan', 1)
	('Sep', 9)
	('Oct', 10)
	('Feb', 2)
	('Mar', 3)
	('May', 5)
	('Jul', 7)
#+end_example
	#+BEGIN_QUOTE
	The "dict()" constructor can accept an iterator that returns a finite
	stream of "(key, value)" tuples:
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session fp
          L = [('Italy', 'Rome'),
	       ('France', 'Paris'), \
	       ('US', 'Washington DC')]
          print('\n')
          dict(iter(L))
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>>
	: {'Italy': 'Rome', 'US': 'Washington DC', 'France': 'Paris'}

****** Generator expressions and list comprehensions  :genexps:listcomp:
       
       #+BEGIN_SRC python :results output :session fp
         line_list = ['  line 1\n', 'line 2  \n', 'line 3 \n']

         # Generator expression -- returns iterator
	 # expression in (parenthesis) 
         stripped_iter = (line.strip() for line in line_list)
         print('\n')
         print(stripped_iter)
         print(next(stripped_iter))
	 print(next(stripped_iter))
         # List comprehension -- returns list
	 # just use square brackets around expression
         stripped_list = [line.strip() for line in line_list]
         print('\n', stripped_list)
         # you can select only certain elements by adding an ""if""

         stripped_list = [line.strip() for line in line_list
                          if line != ""]
         print('\n', stripped_list)
       #+END_SRC

       #+RESULTS:
       : 
       : >>> ... >>>
       : <generator object <genexpr> at 0x7fdb674e9cf0>
       : line 1
       : line 2
       : ... >>> 
       :  ['line 1', 'line 2', 'line 3']
       : ... >>> ... >>> 
       :  ['line 1', 'line 2', 'line 3']

       #+BEGIN_SRC python :results output :session fp
         from pprint import pprint
         seq1 = 'abc'
         seq2 = (1,2,3)
	 print('\n')
         pprint([(x, y) for x in seq1 for y in seq2])
       #+END_SRC

       #+RESULTS:
       #+begin_example

       >>> >>>
       [('a', 1),
	('a', 2),
	('a', 3),
	('b', 1),
	('b', 2),
	('b', 3),
	('c', 1),
	('c', 2),
	('c', 3)]
#+end_example

****** Generators						      :yield:
       #+BEGIN_QUOTE
       Generators are a special class of functions that simplify the task of
       writing iterators.  Regular functions compute a value and return it,
       but generators return an iterator that returns a stream of values.
       #+END_QUOTE
       This is what generators provide; they can be thought of as resumable
       functions.
       #+BEGIN_SRC python :results output :session fp
         def gen_ints(n):
             for i in range(n):
                 yield i

         j = gen_ints(4)  # j is simple generator
	 print('\n')
         next(j)
         print(next(j))
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... >>> >>>
       : 0
       : 1

       #+BEGIN_QUOTE
       When you call a generator function, it doesn't return a single value;
       instead it returns a generator object that supports the iterator
       protocol.  On executing the "yield" expression, the generator outputs
       the value of "i", similar to a "return" statement.  The big difference
       between "yield" and a "return" statement is that on reaching a "yield"
       the generator's state of execution is suspended and local variables
       are preserved.  On the next call to the generator's "__next__()"
       method, the function will resume executing.
       #+END_QUOTE

       #+BEGIN_SRC python :results output :session fp
         for i in gen_ints(4):
             print(i)

	     
         a, b, c = gen_ints(3)
         print(a, b, c)
       #+END_SRC

       #+RESULTS:
       : 
       : ... 0
       : 1
       : 2
       : 3
       : ... >>> 0 1 2
       
******* Passing values into a generator
	#+BEGIN_SRC python :results output :session fp
          def counter(maximum):
              i = 0
              while i < maximum:
                  val = (yield i)
                  # If value provided, change counter
                  if val is not None:
                      i = val
                  else:
                      i += 1

          j = counter(10)
          print('\n')
          next(j)
          next(j)
          j.send(8)
          next(j)
          next(j)
	#+END_SRC

	#+RESULTS:
	: 
	: >>> ... ... ... ... ... ... ... ... ... >>> >>>
	: 0
	: 1
	: 8
	: 9
	: Traceback (most recent call last):
	:   File "<stdin>", line 1, in <module>
	: StopIteration

****** Built-in functions					  :built:ins:

******* map()								:map:
	#+BEGIN_SRC python :results output :session fp
          def upper(s):
              return s.upper()

          list(map(upper, ['sentence', 'fragment']))

	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> ['SENTENCE', 'FRAGMENT']
	
******* filter()						     :filter:
	#+BEGIN_SRC python :results output :session fp
          def is_even(x):
              return (x % 2) == 0

          list(filter(is_even, range(10)))

	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> [0, 2, 4, 6, 8]

******* enumerate()						  :enumerate:
	#+BEGIN_SRC python :results output :session fp
          for item in enumerate(['subject', 'verb', 'object']):
              print(item)
	#+END_SRC

	#+RESULTS:
	: 
	: ... (0, 'subject')
	: (1, 'verb')
	: (2, 'object')

******* sorted()						     :sorted:
	#+BEGIN_SRC python :results output :session fp
          import random
          # Generate 8 random numbers between [0, 10000)
          rand_list = random.sample(range(10000), 8)
          rand_list  
          sorted(rand_list)  
          sorted(rand_list, reverse=True)

	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> [929, 3653, 8652, 6331, 2231, 4890, 5664, 5483]
	: [929, 2231, 3653, 4890, 5483, 5664, 6331, 8652]
	: [8652, 6331, 5664, 5483, 4890, 3653, 2231, 929]

******* any()								:any:
	#+BEGIN_SRC python :results output :session fp
          any([0,1,0])
          any([0,0,0])
          any([1,1,1])
	#+END_SRC

	#+RESULTS:
	: True
	: False
	: True

******* all()								:all:
	#+BEGIN_SRC python :results output :session fp
          all([0,1,0])
          all([0,0,0])
          all([1,1,1])
	#+END_SRC

	#+RESULTS:
	: False
	: False
	: True

******* zip()								:zip:
	takes one element from each iterable and returns
	them in a tuple:
	#+BEGIN_SRC python :results output :session fp
          list(zip(['a', 'b', 'c'], (1, 2, 3)))
	  #print(a)
	  
          # with non equal number of elements:
          list(zip(['a', 'b'], (1, 2, 3)))
	  #print(b)
	#+END_SRC

	#+RESULTS:
	: [('a', 1), ('b', 2), ('c', 3)]
	: ... >>> ... [('a', 1), ('b', 2)]

****** The itertools module

******* Creating new iterators

******* Calling functions on elements

******* Selecting elements

******* Combinatoric functions

******* Grouping elements

****** The functools module

******* The operator module

****** Small functions and the lambda expression

****** Revision History and Acknowledgements

****** References

******* General

******* Python-specific

******* Python documentation

***** Logging HOWTO

****** Basic Logging Tutorial

******* When to use logging

******* A simple example

******* Logging to a file

******* Logging from multiple modules

******* Logging variable data

******* Changing the format of displayed messages

******* Displaying the date/time in messages

******* Next Steps

****** Advanced Logging Tutorial

******* Logging Flow

******* Loggers

******* Handlers

******* Formatters

******* Configuring Logging

******* What happens if no configuration is provided

******* Configuring Logging for a Library

****** Logging Levels

******* Custom Levels

****** Useful Handlers

****** Exceptions raised during logging

****** Using arbitrary objects as messages

****** Optimization

***** Logging Cookbook

****** Using logging in multiple modules

****** Multiple handlers and formatters

****** Logging to multiple destinations

****** Configuration server example

****** Dealing with handlers that block

****** Sending and receiving logging events across a network

****** Adding contextual information to your logging output

******* Using LoggerAdapters to impart contextual information

******** Using objects other than dicts to pass contextual
             information

******* Using Filters to impart contextual information

****** Logging to a single file from multiple processes

****** Using file rotation

****** Use of alternative formatting styles

****** Customizing "LogRecord"

****** Subclassing QueueHandler - a ZeroMQ example

****** Subclassing QueueListener - a ZeroMQ example

****** An example dictionary-based configuration

****** Using a rotator and namer to customize log rotation processing

****** A more elaborate multiprocessing example

****** Inserting a BOM into messages sent to a SysLogHandler

****** Implementing structured logging

****** Customizing handlers with "dictConfig()"

****** Using particular formatting styles throughout your application

******* Using LogRecord factories

******* Using custom message objects

****** Configuring filters with "dictConfig()"

****** Customized exception formatting

****** Speaking logging messages

****** Buffering logging messages and outputting them conditionally

****** Formatting times using UTC (GMT) via configuration

***** Regular Expression HOWTO

****** Introduction

****** Simple Patterns

******* Matching Characters

******* Repeating Things

****** Using Regular Expressions

******* Compiling Regular Expressions

******* The Backslash Plague

******* Performing Matches

******* Module-Level Functions

******* Compilation Flags

****** More Pattern Power

******* More Metacharacters

******* Grouping

******* Non-capturing and Named Groups

******* Lookahead Assertions

****** Modifying Strings

******* Splitting Strings

******* Search and Replace

****** Common Problems

******* Use String Methods

******* match() versus search()

******* Greedy versus Non-Greedy

******* Using re.VERBOSE

****** Feedback

***** Socket Programming HOWTO

****** Sockets

******* History

****** Creating a Socket

******* IPC

****** Using a Socket

******* Binary Data

****** Disconnecting

******* When Sockets Die

****** Non-blocking Sockets

***** Sorting HOW TO

****** Sorting Basics

****** Key Functions

****** Operator Module Functions

****** Ascending and Descending

****** Sort Stability and Complex Sorts

****** The Old Way Using Decorate-Sort-Undecorate

****** The Old Way Using the *cmp* Parameter

****** Odd and Ends

***** Unicode HOWTO

****** Introduction to Unicode

******* History of Character Codes

******* Definitions

******* Encodings

******* References

****** Python's Unicode Support

******* The String Type

******* Converting to Bytes

******* Unicode Literals in Python Source Code

******* Unicode Properties

******* Unicode Regular Expressions

******* References

****** Reading and Writing Unicode Data

******* Unicode filenames

******* Tips for Writing Unicode-aware Programs

******** Converting Between File Encodings

******** Files in an Unknown Encoding

******* References

****** Acknowledgements

***** HOWTO Fetch Internet Resources Using The urllib Package

****** Introduction

****** Fetching URLs

******* Data

******* Headers

****** Handling Exceptions

******* URLError

******* HTTPError

******** Error Codes

******* Wrapping it Up

******** Number 1

******** Number 2

****** info and geturl

****** Openers and Handlers

****** Basic Authentication

****** Proxies

****** Sockets and Layers

****** Footnotes

***** HOWTO Use Python in the web

****** The Low-Level View

******* Common Gateway Interface

******** Simple script for testing CGI

******** Setting up CGI on your own server

******** Common problems with CGI scripts

******* mod_python

******* FastCGI and SCGI

******** Setting up FastCGI

******* mod_wsgi

****** Step back: WSGI

******* WSGI Servers

******* Case study: MoinMoin

****** Model-View-Controller

****** Ingredients for Websites

******* Templates

******* Data persistence

****** Frameworks

******* Some notable frameworks

******** Django

******** TurboGears

******** Zope

******** Other notable frameworks

***** Argparse Tutorial

****** Concepts

****** The basics

****** Introducing Positional arguments

****** Introducing Optional arguments

******* Short options

****** Combining Positional and Optional arguments

****** Getting a little more advanced

******* Conflicting options

****** Conclusion

***** An introduction to the ipaddress module

****** Creating Address/Network/Interface objects

******* A Note on IP Versions

******* IP Host Addresses

******* Defining Networks

******* Host Interfaces

****** Inspecting Address/Network/Interface Objects

****** Networks as lists of Addresses

****** Comparisons

****** Using IP Addresses with other modules

****** Getting more detail when instance creation fails

***** Argument Clinic How-To

****** The Goals Of Argument Clinic

****** Basic Concepts And Usage

****** Converting Your First Function

****** Advanced Topics

******* Symbolic default values

******* Renaming the C functions and variables generated by Argument
           Clinic

******* Converting functions using PyArg_UnpackTuple

******* Optional Groups

******* Using real Argument Clinic converters, instead of "legacy
           converters"

******* Py_buffer

******* Advanced converters

******* Parameter default values

******* The "NULL" default value

******* Expressions specified as default values

******* Using a return converter

******* Cloning existing functions

******* Calling Python code

******* Using a "self converter"

******* Writing a custom converter

******* Writing a custom return converter

******* METH_O and METH_NOARGS

******* tp_new and tp_init functions

******* Changing and redirecting Clinic's output

******* The #ifdef trick

******* Using Argument Clinic in Python files

**** Useful links
     http://docs.python.org
     http://pypi.python.org/pypi
     http://pyvideo.org


*** Programming Python 4th Edition				:programming:
**** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
**** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]


** Applied Python						      :usage:

*** NLP with Python							:NLP:

*** Neural networks

**** Trivial perceptron in OOP
     #+NAME: perceptron
     #+BEGIN_SRC python :eval noexport :exports both :results output
       #!/usr/bin/env python
       # -*- coding: utf-8 -*-
       """
       Single layer neural network
       """


       def sigmoid(x):
           return 1. / (1 + exp(-x))


       class Inlet(object):
           """Input signal into dendron"""

           def __init__(self):
               pass

           def modulate(self, signal):
               self.signal = signal


       class Dendron(object):
           """Convey signal to neuron"""

           def __init__(self, neuron, inlet, weight=0.1):
               self.neuron = neuron
               self.weight = weight
               self.inlet = inlet


       class Neuron(object):
           """Processing module itself"""

           def __init__(self, df=lambda x: x):  # sigmoidal
               self.df = df
               self.dendrons = []
               self.output = 0

           def calculate_output(self):
               for dendron in self.dendrons:
                   self.output += self.df(
                       dendron.weight *
                       dendron.inlet.signal)


       class NeuralNetwork(object):
           """Ties all classes above together"""

           def __init__(self, swing):
               """Creates network with swing number of inlets and equal number of
               neurons interconnected by dendrons

               """
               self.network_swing = swing
               self.inlets = []
               self.neurons = []
               self.dendrons = []
               for i in range(swing):
                   self.inlets.append(Inlet())
                   self.neurons.append(Neuron())
                   for j in range(swing):
                       self.dendrons.append(
                           Dendron(self.neurons[-1],
                                   self.inlets[-1]))
                       self.neurons[-1].dendrons.append(self.dendrons[-1])

           def eval_input(self, input_array):
               for i in range(self.network_swing):
                   self.inlets[i].modulate(input_array[i])
               for i in self.neurons:
                   i.calculate_output()

           def update_weights(self, weights_array):
               for i in range(self.network_swing ** 2):
                   self.dendrons[i].weight = weights_array[i]

       NN = NeuralNetwork(2)
       NN.update_weights([0.1, 0.2, 0.3, 0.4])
       for i in NN.dendrons:
           print(i.weight)
       NN.eval_input([1, 1])
       for i in NN.neurons:
           print(i.output)
     #+END_SRC

     #+RESULTS: perceptron
     : 0.1
     : 0.2
     : 0.3
     : 0.4
     : 0.30000000000000004
     : 0.7

#+end_example

*** Python for Data Analyse				       :data:analyse:
**** Preliminaries
**** Introductory Examples <2016-01-18 Mon>
***** collections pack
**** IPython: An Interactive Computing and Development Environment
     <2016-01-18 
*** Useful snippets						   :snippets:
**** Associated sorting
     #+BEGIN_SRC python :results output
       # Sorting lists relative to each other in 1 line:

       list1 = ['c','b','a']
       list2 = [6,5,4]
       list3 = ['some-val-associated-with-c','another_val-b','z_another_third_val-a']

       list1, list2, list3 = [list(t) for t in zip(*sorted(zip(list1, list2, list3)))] 

       print('\n\nsorted output:\n', list1, '\n', list2, '\n', list3 )
     #+END_SRC

     #+RESULTS:
     : 
     : 
     : sorted output:
     :  ['a', 'b', 'c'] 
     :  [4, 5, 6] 
     :  ['z_another_third_val-a', 'another_val-b', 'some-val-associated-with-c']

**** The name of caller's function establishing
     #+BEGIN_SRC python :results output
       def func_name():
           import traceback
           return traceback.extract_stack(None, 2)[0][2]


       def function_with_certain_name():
           print('The caller function has a name: %s' % func_name())

       function_with_certain_name()
     #+END_SRC


*** CookBook

**** Data Structures and Algorithms

***** Unpacking a Sequence into Separate Variables

****** Description
       You have an N-element tuple or sequence that you would like to
       unpack into a collection of N variables.

****** Solution
       #+BEGIN_SRC python :results output
         import unittest


         class TestIterableUnpack(unittest.TestCase):

             def setUp(self):
                 self.iterable = ('first', 'second')

             def test_simple_behavior(self):
                 x, y = self.iterable
                 self.assertEqual(x, 'first')

             def tearDown(self):
                 del self.iterable
       #+END_SRC

       #+RESULTS:


** Mastering Python                                               :mastering:

*** Python Anti-Patterns				      :anti:patterns:
**** [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
**** [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
     [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
**** [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
*** Python Beyond the Basics
**** Organizing Larger Programs
***** Packages
***** Imports From sys.path
***** Implementing Packages
***** Subpackages
***** Example A Full Program
***** Relative Imports
***** Controlling Imports With __all__
***** Namespace Packages
***** Executable Directories
***** Recommended Layout
***** Duck Tails Modules Are Singletons
***** Summary

**** Beyond Basic Function
***** Function Review
***** Callable Instances				      :socket:timeit:
       #+BEGIN_SRC python :results output :session functions
         import socket


         class Resolver:
             """Converts domain name into ip"""
             def __init__(self):
                 self._cache = {}
             def __call__(self, host):
                 if host not in self._cache:
                     self._cache[host] = socket.gethostbyname(host)
                 return self._cache[host]

         resolver = Resolver()
         resolver('north-west.com')
         print('=============')
         resolver._cache
         print('=============')
         resolver('sixty-north.com')
         resolver._cache
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> >>> >>> >>> ... ... ... ... ... ... ... ... >>> >>> '208.73.211.70'
       : =============
       : {'north-west.com': '208.73.211.70'}
       : =============
       : '93.93.131.30'
       : {'north-west.com': '208.73.211.70', 'sixty-north.com': '93.93.131.30'}

       And check up how cache works:
       #+BEGIN_SRC python :results output :session functions
         from timeit import timeit
         timeit(setup="from __main__ import resolver", 
                stmt="resolver('python.org')", number=1)
         print('=============')
         timeit(setup="from __main__ import resolver", 
                stmt="resolver('python.org')", number=1)
         print('=============')
         # normalize output
         print("{:f}".format(_))
       #+END_SRC

       #+RESULTS:
       : 
       : ... 0.0024511199999324162
       : =============
       : ... 7.520000053773401e-06
       : =============
       : ... 0.000008

***** Classes Are Callable
      #+BEGIN_SRC python :results output :session functions
        import socket
        class Resolver:
            def __init__(self):
                self._cache = {}
            def __call__(self, host):
                if host not in self._cache:
                    self._cache[host] = socket.gethostbyname(host)
                return self._cache[host]
            def clear(self):
                self._cache.clear()
            def has_host(self, host):
                return host in self._cache

        resolve = Resolver()
        resolve.has_host("pluralsight.com")
        print('=============')
        resolve("pluralsight.com")
        print('=============')
        resolve.has_host("pluralsight.com")
        print('=============')
        resolve.clear()
        print('=============')
        resolve.has_host("pluralsight.com")
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... ... ... ... ... ... ... >>> >>> False
      : =============
      : '54.201.37.215'
      : =============
      : True
      : =============
      : >>> =============
      : False

***** Conditional Expressions
      Old-fashion approach:
      #+BEGIN_SRC python :results output :session functions
        def sequence_class(immutable):
            if immutable:
                cls = tuple
            else:
                cls = list
            return cls

        seq = sequence_class(immutable=True)
        t = seq("Timbuktu")
        t
        print('=============')
        type(t)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... >>> >>> >>> ('T', 'i', 'm', 'b', 'u', 'k', 't', 'u')
      : =============
      : <class 'tuple'>

      Much terse and dense solution:
      #+BEGIN_SRC python :results output :session functions
        def sequence_class(immutable):
            return tuple if immutable else list

        seq = sequence_class(immutable=False)
        s = seq("Nairobi")
        s
        type(s)
      #+END_SRC

      #+RESULTS:
      : 
      : ... >>> >>> >>> ['N', 'a', 'i', 'r', 'o', 'b', 'i']
      : <class 'list'>

***** Lambdas							     :pprint:
       #+BEGIN_SRC python :results output :session functions
         from pprint import pprint as pp

         scientists = ['Marie Curie', 'Albert Einstein', 'Niels Bohr', 'Isaac Newton',
                       'Dmitri Mendeleev', 'Antoine Lavoisier', 'Carl Linnaeus',
                       'Alfred Wegener', 'Charles Darwin']
         pp(sorted(scientists, key=lambda name: name.split()[-1]))
         print('=============')
         last_name = lambda name: name.split()[-1]
         last_name
         print('=============')
         print(last_name("Nikola Tesla"))
       #+END_SRC

       #+RESULTS:
       #+begin_example

       >>> ... ... >>> ['Niels Bohr',
	'Marie Curie',
	'Charles Darwin',
	'Albert Einstein',
	'Antoine Lavoisier',
	'Carl Linnaeus',
	'Dmitri Mendeleev',
	'Isaac Newton',
	'Alfred Wegener']
       =============
       >>> <function <lambda> at 0x7fb1eab84730>
       =============
       Tesla
#+end_example

       | Function                              | Lambda                             |
       |---------------------------------------+------------------------------------|
       | statement which defines a function    | expression which evaluates to      |
       | and binds it to a name                | a function                         |
       |---------------------------------------+------------------------------------|
       | Must have a name                      | Anonymous                          |
       |---------------------------------------+------------------------------------|
       | Arguments delimited by parentheses,   | Argument list terminated by colon  |
       | separated by commas                   | separated by commas                |
       |---------------------------------------+------------------------------------|
       | Zero or more arguments supported -    | Zero or more arguments supported - |
       | zero arguments => empty parentheses   | zero arguments => lambda:          |
       |---------------------------------------+------------------------------------|
       | Body is intended block of statements  | Body is a single expression        |
       |---------------------------------------+------------------------------------|
       | A return statement required to return | The return value is given by the   |
       | anything other than None              | body expression. No return         |
       |                                       | statement is permitted.            |
       |---------------------------------------+------------------------------------|
       | Regular functions can have docstrings | Lambdas cannot have docstrings     |
     
***** Detecting Callable Objects
       #+BEGIN_SRC python :results output :session functions
         def is_even(x):
             return x % 2 == 0


         callable(is_even)
         print('=============')
         is_odd = lambda x: x % 2 == 1
         callable(is_odd)
         print('=============')
         callable(list)
         callable(list.append)
         class CallMe:
             def __call__(self):
                 print("Called!")

         call_me = CallMe()
         callable(call_me)
         print('=============')
         callable("This is not callable")
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... >>> >>> True
       =============
       >>> True
       =============
       True
       True
       ... ... ... >>> >>> True
       =============
       False
#+end_example

***** Extended Formal Argument Syntax
       Passing arbitrary number of arguments to particular function:
       #+BEGIN_SRC python :results output :session functions
         def hipervolume(*args):
             print(args)
             print(type(args))

         hipervolume(3, 4)
         print('=============')
         hipervolume(5, 6, 7)
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> ... ... ... >>> (3, 4)
       : <class 'tuple'>
       : =============
       : (5, 6, 7)
       : <class 'tuple'>
       Iterate these arguments:
       #+BEGIN_SRC python :results output :session functions
         def hypervolume(*lenghts):
             i = iter(lenghts)
             v = next(i)  # first arg
             for lenght in i:
                 v *= lenght
             return v

         print(hypervolume(2, 4))
         print('=============')
         print(hypervolume(2, 4, 6, 8))
         print(hypervolume(1))
         print('=============')
         print(hypervolume())
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... ... ... ... ... >>> 8
       =============
       384
       1
       =============
       Traceback (most recent call last):
	 File "<stdin>", line 1, in <module>
	 File "<stdin>", line 3, in hypervolume
       StopIteration
#+end_example

       Passing dictionary as argument:
       #+BEGIN_SRC python :results output :session functions
         def tag(name, **kwargs):
             print(name)
             print(kwargs)
             print(type(kwargs))

         tag('img', src="monet.jpg", alt="Sunrise by Claude Monet", border=1)
         print('=============')
         # lets iterate arguments

         def tag(name, **attributes):
             result = '<' + name
             for key, value in attributes.items():
                 result += ' {k}="{v}"'. format(k=key, v=str(value))
             result += '>'
             return result

         print(tag('img', src="monet.jpg", alt="Sunrise by Claude Monet", border=1))
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... >>> img
       : {'border': 1, 'src': 'monet.jpg', 'alt': 'Sunrise by Claude Monet'}
       : <class 'dict'>
       : =============
       : ... >>> ... ... ... ... ... ... >>> <img border="1" src="monet.jpg" alt="Sunrise by Claude Monet">

***** Extended Call Syntax
      Usually it is solved as:
      #+BEGIN_SRC python
      def extended(*args, **kwargs):
      #+END_SRC
      Examples:
      #+BEGIN_SRC python :results output :session functions
        def print_args(arg1, arg2, *args):
            print(arg1)
            print(arg2)
            print(args)

        t = (11, 12, 14, 15)
        # print_args(t) NOT WORKS BUT
        print_args(*t)  # works well
        print('=============')

        # And in the same way for dicts:

        def color(red, green, blue, **kwargs):
            print("r =", red)
            print("g =", green)
            print("b =", blue)
            print(kwargs)

        k = {'red':21, 'green':68, 'blue':120, 'alpha':52}
        color(**k)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... >>> >>> ... 11
      : 12
      : (14, 15)
      : =============
      : >>> ... >>> ... ... ... ... ... >>> >>> r = 21
      : g = 68
      : b = 120
      : {'alpha': 52}
       
***** Forwarding Arguments
      #+BEGIN_SRC python :results output :session functions
        def trace(f, *args, **kwargs):
            print("args =", args)
            print("kwargs =", kwargs)
            result = f(*args, **kwargs)
            print("result =", result)
            return result

        print(int("ff", base=16))
        print('=============')
        trace(int, "ff", base=16)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... >>> 255
      : =============
      : args = ('ff',)
      : kwargs = {'base': 16}
      : result = 255
      : 255
       
***** Duck Tail Transposing Tables
      #+BEGIN_SRC python :results output :session functions
        from pprint import pprint as pp

        sunday = [11, 12, 14, 15, 17, 22]
        monday = [13, 14, 16, 20, 20, 21]
        tuesday = [2, 2, 3, 7, 9, 10]

        daily = [sunday, monday, tuesday]
        pp(daily)
        for i in zip(*daily):
            print(i)

        transposed = list(zip(*daily))
        pp(transposed)
      #+END_SRC

      #+RESULTS:
      : 
      : >>> >>> >>> >>> >>> >>> [[11, 12, 14, 15, 17, 22], [13, 14, 16, 20, 20, 21], [2, 2, 3, 7, 9, 10]]
      : ... ... (11, 13, 2)
      : (12, 14, 2)
      : (14, 16, 3)
      : (15, 20, 7)
      : (17, 20, 9)
      : (22, 21, 10)
      : >>> [(11, 13, 2), (12, 14, 2), (14, 16, 3), (15, 20, 7), (17, 20, 9), (22, 21, 10)]

***** Summary

**** Closures and Decorators					 :decorators:
***** Local Functions

      - Useful for specialized, one-off functions
      - Aid in code organization and readability
      - Similar to lambdas, but more general:
	- May contain multiply expressions
	- May contain statements

      LEGB rule
      #+BEGIN_SRC python :results output
        def sort_by_last_letter(strings):
            def last_letter(s):
                return s[-1]
            return sorted(strings, key=last_letter)

        print(sort_by_last_letter(['one', 'two', 'three', 'four']))
      #+END_SRC

      #+RESULTS:
      : ['one', 'three', 'two', 'four']

***** Returning Functions From Functions
      #+BEGIN_SRC python :results output :session deco
        store = []

        def sort_by_last_letter(strings):
            def last_letter(s):
                return s[-1]
            store.append(last_letter)
	    print('\n')
            print(last_letter)
            return sorted(strings, key=last_letter)

        sort_by_last_letter(['one', 'two', 'three', 'four'])
      #+END_SRC

      #+RESULTS:
      : 
      : >>> ... ... ... ... ... ... ... >>> 
      : 
      : <function sort_by_last_letter.<locals>.last_letter at 0x7ff2c4ac3400>
      : ['one', 'three', 'two', 'four']

***** Closures and Nested Scopes
      #+BEGIN_SRC python :results output :session deco
        g = 'global'
        def outer(p='param'):
            l = 'local'
            def inner():
                print(g, p, l)
            inner()

        print('\n')
        outer()
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... >>>
      : global param local

      #+BEGIN_QUOTE
      LEGB does not apply when making new bindings.
      #+END_QUOTE
      #+BEGIN_SRC python :results output :session deco
        message = 'global'
        def enclosing():
            message = 'enclosing'
            def local():
                global message
                message = 'local'
            print('enclosing message:', message)
            local()
            print('enclosing message:', message)
        print('enclosing message:', message)
        enclosing()
        print('enclosing message:', message)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... ... ... ...   File "<stdin>", line 9
      :     print('enclosing message:', message)
      :         ^
      : SyntaxError: invalid syntax
      : >>> enclosing message: global

***** Function Factories
      #+BEGIN_SRC python :results output :session deco
        def raise_to(exp):
            def raise_to_exp(x):
                return pow(x, exp)
            return raise_to_exp

        square = raise_to(2)
        cube = raise_to(3)
        print('\n')
        square(4)
        cube(5)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... >>> >>> >>>
      : 16
      : 125

***** The Nonlocal Keyword
      #+BEGIN_SRC python :results output :session deco
        import time
        def make_timer():
            last_called = None
            def elapsed():
                nonlocal last_called
                now = time.time()
                if last_called is None:
                    last_called = now
                    return None
                result = now - last_called
                last_called = now
                return result
            return elapsed

        t = make_timer()
	print('\n')
        t()
        t()
	t()
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... ... ... ... ... ... ... ... >>> >>>
      : >>> 0.005356311798095703
      : 0.005377054214477539

***** Function Decorators
      #+BEGIN_QUOTE
      Implemented as callables that take and return
      other callables
      #+END_QUOTE

      - Replace, enhance, or modify existing functions
      - Does not change the original function definition
      - Calling code does not need to change
      - Decorator mechanism uses the modified function's
	original name

***** A First Decorator Example
      Function as decorator
****** Discover main facilities
******* Functional replacement
	#+BEGIN_SRC python :results output :session deco
          def func_replacement(f):
              """Non-intrusive argument mutation
              """
              def tap(**kwargs):
                  kwargs['first_arg'] = kwargs['first_arg'] * 2  # 
                  kwargs['second_arg'] = kwargs['second_arg'] * 2  # 
                  return f(**kwargs)
              return tap

          @func_replacement
          def main_function(**kwargs):
              sigma = kwargs['first_arg'] + kwargs['second_arg']
              return sigma

          arguments = {'first_arg': 4, 'second_arg': 7}
          print('\n', main_function(**arguments))
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... ... ... >>> ... ... ... ... >>> >>> 
	:  22

******* Tracing
	#+BEGIN_SRC python :results output :session deco
          def entryExit(f):
              def new_f():
                  print("Entering", f.__name__)
                  f()
                  print("Exited", f.__name__)
              return new_f

          @entryExit
          def func1():
              print("inside func1()")

          @entryExit
          def func2():
              print("inside func2()")

          print('\n')
          func1()
          func2()
          print(func1.__name__)
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... ... >>> ... ... ... >>> ... ... ... >>>
	: Entering func1
	: inside func1()
	: Exited func1
	: Entering func2
	: inside func2()
	: Exited func2
	: new_f
****** Decorating & logging
       #+BEGIN_SRC python :results output :session deco
         import logging

         def logger(f):
             def explicit(**kwargs):
                 print('\nTest message')
                 logging.warning('This is input arguments: \n%s', kwargs)
                 return f(**kwargs)
             return explicit

         @logger
         def main_function(**kwargs):
             sigma = kwargs['first_arg'] + kwargs['second_arg']
             return sigma

         arguments = {'first_arg': 4, 'second_arg': 7}
         print(main_function(**arguments))
       #+END_SRC

       #+RESULTS:
       : 
       : >>> ... ... ... ... ... ... >>> ... ... ... ... >>> >>> 
       : Test message
       : WARNING:root:This is input arguments: 
       : {'second_arg': 7, 'first_arg': 4}
       : 11

****** Escape Unicode
       #+BEGIN_SRC python :results output :session deco
         def escape_unicode(f):
             def wrap(*args, **kwargs):
                 x = f(*args, **kwargs)
                 return ascii(x)
             return wrap

         @escape_unicode
         def northern_city():
             return 'TromsÃ¸'

         print('\n')
         print(northern_city())
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... >>> ... ... ... >>>
       : 'Troms\xf8'

***** What Can Be a Decorator
      Class as decorator
      #+BEGIN_SRC python :results output :session deco
        class CallCount:
            def __init__(self, f):
                self.f = f
                self.count = 0
            def __call__(self, *args, **kwargs):
                self.count += 1
                return self.f(*args, **kwargs)

        @CallCount
        def hello(name):
            print('Hello, {}'. format(name))

        print('\n')
        hello('Tony')
        hello('Andrew')

        print(hello.count)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... ... >>> ... ... ... >>>
      : Hello, Tony
      : Hello, Andrew
      : >>> 2

***** Instances as Decorators
       #+BEGIN_SRC python :results output :session deco
         class Trace:
             def __init__(self):
                 self.enabled = True
             def __call__(self, f):
                 def wrap(*args, **kwargs):
                     if self.enabled:
                         print('Calling {}'.format(f))
                     return f(*args, **kwargs)
                 return wrap

         tracer = Trace()

         @tracer
         def rotate_list(l):
             return l[1:] + [l[0]]

         print('\n')
         l = [1, 2, 3]
         l = rotate_list(l)
         l
         l = rotate_list(l)
         l
         l = rotate_list(l)
         l
         tracer.enabled = False          # change behavior on-the-fly
         l = rotate_list(l)
         l
         l = rotate_list(l)
         l
         l = rotate_list(l)
         l
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... ... ... ... ... ... ... ... >>> >>> >>> ... ... ... >>>
       >>> Calling <function rotate_list at 0x7f8ec11c9c80>
       [2, 3, 1]
       Calling <function rotate_list at 0x7f8ec11c9c80>
       [3, 1, 2]
       Calling <function rotate_list at 0x7f8ec11c9c80>
       [1, 2, 3]
       >>> >>> [2, 3, 1]
       >>> [3, 1, 2]
       >>> [1, 2, 3]
#+end_example

***** Multiple Decorators
       #+BEGIN_SRC python :results output :session deco
         def deco1(f):
             def new_f1():
                 print("Entering", f.__name__)
                 f()
                 print("Exited", f.__name__)
             return new_f1

         def deco2(f):
             def new_f2():
                 print("Entering", f.__name__)
                 f()
                 print("Exited", f.__name__)
             return new_f2

         def deco3(f):
             def new_f3():
                 print("Entering", f.__name__)
                 f()
                 print("Exited", f.__name__)
             return new_f3

         @deco1
         @deco2
         @deco3
         def func1():
             print("inside func1()")

         print('\n')
         func1()
         print(func1.__name__)

       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... ... ... ... ... >>> ... ... ... ... ... ... >>> ... ... ... ... ... ... >>> ... ... ... ... ... >>>
       Entering new_f2
       Entering new_f3
       Entering func1
       inside func1()
       Exited func1
       Exited new_f3
       Exited new_f2
       new_f1
#+end_example

       Another approach:
       #+BEGIN_SRC python :results output :session deco
         def p_decorate(func):
             def func_wrapper(name):
                 return "<p>{0}</p>".format(func(name))
             return func_wrapper         

         def strong_decorate(func):
             def func_wrapper(name):
                 return "<strong>{0}</strong>".format(func(name))
             return func_wrapper

         def div_decorate(func):
             def func_wrapper(name):
                 return "<div>{0}</div>".format(func(name))
             return func_wrapper

         @div_decorate
         @p_decorate
         @strong_decorate
         def get_text(name):
             return "lorem ipsum, {0} dolor sit amet".format(name)

         print('\n')
         print(get_text("Ahab"))

       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... >>> ... ... ... ... >>> ... ... ... ... >>> ... ... ... ... ... >>>
       : <div><p><strong>lorem ipsum, Ahab dolor sit amet</strong></p></div>

***** Decorating Methods
      #+BEGIN_SRC python :results output :session deco
        def p_decorate(func):
            def func_wrapper(*args, **kwargs):
                return "<p>{0}</p>".format(func(*args, **kwargs))
            return func_wrapper

        class Person(object):
            def __init__(self):
                self.name = "John"
                self.family = "Doe"
            @p_decorate
            def get_fullname(self):
                return self.name+" "+self.family

        my_person = Person()
	print('\n')
        print(my_person.get_fullname())
	print(my_person.get_fullname.__name__)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... >>> ... ... ... ... ... ... ... >>> >>>
      : <p>John Doe</p>
      : func_wrapper

***** Passing arguments to decorators
      #+BEGIN_SRC python :results output :session deco
        def tags(tag_name):
            def tags_decorator(func):
                def func_wrapper(name):
                    return "<{0}>{1}</{0}>".format(tag_name, func(name))
                return func_wrapper
            return tags_decorator

        @tags("p")
        def get_text(name):
            """returns some text"""
            return "Hello "+name

        print('\n', get_text("John"))
        print(get_text.__name__) # get_text
        print(get_text.__doc__) # returns some text
        print(get_text.__module__) # __main__
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... >>> ... ... ... ... >>> 
      :  <p>Hello John</p>
      : func_wrapper
      : None
      : __main__

      Obviously that all private methods are overwritten
      by decorator function. It is no matter for learning
      sample but huge significant detail during debugging.

***** functools.wraps()					    :functools:wraps:
      They are rescue in that case:
      #+BEGIN_SRC python :results output :session deco
        from functools import wraps

        def tags(tag_name):
            def tags_decorator(func):
                @wraps(func)            # <
                def func_wrapper(name):
                    return "<{0}>{1}</{0}>".format(tag_name, func(name))
                return func_wrapper
            return tags_decorator

        @tags("p")
        def get_text(name):
            """returns some text"""
            return "Hello "+name

        print('\n', get_text("John"))
        print(get_text.__name__) # get_text
        print(get_text.__doc__) # returns some text
        print(get_text.__module__) # __main__

      #+END_SRC

      #+RESULTS:
      : 
      : >>> ... ... ... ... ... ... ... >>> ... ... ... ... >>> 
      :  <p>Hello John</p>
      : get_text
      : returns some text
      : __main__

***** Summary
      - Decorators are powerful tool
      - Decorators are widely used in Python
      - It's possible to overuse decorators
	Be mindful
      - They can improve maintainability, increase
	clarity and reduce complexity

      #+BEGIN_SRC python :results output :session deco
        def logging_decorator(func):
            def logging_wrapper(*args, **kwargs):
                print(func.__name__ + ' was called')
                return func(*args, **kwargs)
            return logging_wrapper

        @logging_decorator
        def test_function(x):
            """A decorated function"""
            return x * x

        print('\n')
        print(test_function(3))
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... >>> ... ... ... ... >>>
      : test_function was called
      : 9

**** Properties and Class Methods
***** Class Attributes
***** Static Methods
***** Class Methods
***** Static Methods With Inheritance
***** Class Methods With Inheritance
***** Properties
***** Properties and Inheritance
***** Duck Tail The Template Method Pattern
***** Summary

**** Strings and Representations
**** Numeric and Scalar Types
**** Iterables and Iteration
**** Inheritance and Subtype Polymorphism
**** Implementing Collections
**** Exceptions and Errors
**** Defining Context Managers
**** Introspection

*** Mastering Python OOP                                                :OOP:
**** Introduction To Object Oriented Python
***** Introduction And About The Author
****** Course Objectives
       - Design reusable Object-Oriented Python classes
       - Apply powerful OOP concepts to handle complexity 
	 + Classes, instances
	 + Encapsulation, inheritance, polymorphism
       - Handle errors (exceptions)
       - Serialize (store) objects for later use
       - Debug, test and benchmark your code
****** Purpose and Outcomes
       - Learn OOP concepts used across many languages:
	 + Java
	 + C++
	 + JavaScript
	 + etc.
       - Be able to contribute Python code on a professional level
       - Understand OOP terminology when discussed online or in interviews
       - Take an essential next step in your Python education
       - If already familiar with OOP, see how it is applied in a 
       /Pythonic/ way
	
***** What Is Object Oriented Programming And Why
****** What is an Object
       An /object/ is a unit of data (having one or more attributes), of
       a particular class or type, with associated functionality (methods)
****** Object-Oriented Programming (OOP)
       - Developed in the 1960's (Simula67, smalltalk)
       - A paradigm for code organization and design
       - The OOP paradigm:
	 - Organized data into /objects/ and functionality into /methods/
	 - Defines object specifications (data and methods) in classes
       - Promote collaboration, code extension and maintenance
       - The primary paradigm for software design worldwide
****** OOP: Why?
       - OOP organizes code so it is:
	 - Easier to use
	 - Easier to understand
	 - Easier to maintain and extend
	 - Easier to collaborate
       - Complexity must always be managed
       - OOP is a universal paradigm (many languages)
       - Learning OOP is a necessary next step into the larger world of 
       software engineering
****** OOP: three pillars					    :pillars:
       #+BEGIN_QUOTE
       - encapsulation
	 - data hiding or restricting access to data
	 - put data and operations in the same place
       - inheritance
       - polymorphism
	 - the provision of a single interface to entities of
	   different types
       #+END_QUOTE
       object composition is a way to combine simple objects
       or data types into more complex ones
***** Object-Oriented Python
      - Everything is an object, even numbers
      - Other languages employ /primitives/ (non-object data)
      - All entities in Python follow the same rules of objects
	- Every object (instance of a class) has a type (the class)
	- The object or class has attributes, some of which are methods

***** Modules Versus Classes
      - Python modules are files that contain Python code
      - Python modules can b executed or imported
      - Modules can contain class definitions
      - Sometimes a module consists of a single class;
	in this case a module may seem synonymous with a class
	 
**** Getting Started
***** Prerequisites And Toolkit
      1. Prerequisites
      2. Able to write and run Python programs
      3. Have debugged programs and diagnosed errors
      4. Can use /built-in/ data structures:
	 - numbers
	 - strings
	 - lists
	 - tuples
	 - dictionaries
	 - sets
	 - files
      5. Can use /for/ loops, /while/ loops /if/ statements
      6. Can write functions
      7. Python 2.x
	 - built-in on most Mac and Linux systems
	 - must be installed on Windows
	 - use ~python -V~ at Python prompt to see version
	 - Python 3 is very similar to Python 2
      8. Supplementary Module Installs
	 - *Yaml* for data serialization
	 - *pytest* for testing
***** Choosing An IDE Or Text Editor And Workflow
      An integrated development environment is a text editor
      geared toward software development
      - Syntax highlighting
      - Function indexing
      - Running programs
      - Debugging

**** Classes
***** Classes, Instances, Attributes And Methods
      - Class: a blueprint for an instance
      - Instance: a constructed /object/ of the class
      - Type: indicates the class the instance belongs to
      - Attribute: any object value: /object.*attribute*/
      - Method: a =callable attribute= defined in the class
***** Defining A Class
      - Review: /class/
	- Classes are =instance factories=
	- Classes define an =instance blueprint=
      - Construct an /instance/ or object of the class
	- Instances know to which class they belong (=type=)
	- Instances can access variables defined in the class
      #+BEGIN_SRC python :results output :session oop
        class MyClass(object):
            pass

        this_obj = MyClass()
        print('\n')
        print(this_obj)
      #+END_SRC

      #+RESULTS:
      : 
      : >>> >>> ... ... >>> >>>
      : <__main__.MyClass object at 0x7ff2119ce128>
****** Brief overview differences between old-style
       and new-style objects [[https://wiki.python.org/moin/NewClassVsClassicClass][there]]
***** Instance Methods
      When we call the instance method this instance is passed as the
      first argument automatically
      - Instance methods are variables defined in the class
      - They are accessed through the instance:
	*instance.method()*
      - When called through the instance the instance is 
	automatically passed as first argument to the method
      - Because of this automatic passing of the instance, 
	instance methods are known as /bound/ methods, i.e. 
	bound to the instance upon which it is called

      Six point to remember:

      - An /instance/ of a /class/ knows what class it's from
      - Vars defined in the class are available to the instance
      - A method on an instance passes /instance/ as the first 
	argument to the method (named /self/ in the method)
      - Instances have their own data, called /instance attributes/
      - Variables defined in the class are called /class attributes/
      - When we read an attribute, Python looks for it first in the 
	instance, and then the class
      #+BEGIN_SRC python :results output :session oop
        class Joe(object):
            def callme(self):
                print('calling "callme" method with instance:  ')

        this_joe = Joe()
        print('\n')
        this_joe.callme()
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... >>> >>>
      : calling "callme" method with instance:

***** Instance Attributes

      An /object/ is a unit of data (having one or more attributes),
      of a particular /class/ or type, with associated functionality
      (methods).

      =STATE=
      - We have seen than an instance can access variables defined 
	in the class
      - An instance can also get and set values in /itself/
      - Because these values change according to what happens to 
	the object, we call these values =state=
      - Instance data takes the form of /instance attribute/ values, 
	set and accessed through *object.attribute* syntax
      #+BEGIN_SRC python :results output :session oop
        class MyClass(object):
            var = 10

        this_obj = MyClass()
        that_obj = MyClass()

        print('\n')
        print(this_obj.var)
        print(that_obj.var)

        this_obj.var = 11

        print('\n')
        print(this_obj.var)
        print(that_obj.var)
      #+END_SRC

      #+RESULTS:
      : 
      : ... >>> >>> >>> >>>
      : 10
      : 10
      : >>> >>> >>>
      : 11
      : 10

      #+BEGIN_SRC python :results output :session oop
        import random

        class MyClass(object):
            def do_something(self):
                self.rand_val = random.randint(1, 10)

        myinst = MyClass()
        myinst.do_something()
        print('\n')
        print(myinst.rand_val)

        myinst.do_something()
        print('\n')
        print(myinst.rand_val)
      #+END_SRC

      #+RESULTS:
      : 
      : >>> ... ... ... >>> >>> >>>
      : 1
      : >>> >>>
      : 6

***** Encapsulation
      OOP three major facets (pillars)
      - encapsulation
	- refers to the safe storage of data (as attributes) 
	  in an instance
	- data should be accessed only through instance methods
	- data should be evaluated as correct (depending on the 
	  requirements set in class methods)
	- data should be safe from changes by external processes
      - inheritance
      - polymorphism

      *Breaking encapsulation*

      - Although normally set in a setter method, instance
	attribute values can be set anywhere
      - Encapsulation in Python is a voluntary restriction
      - Python does not implement data hiding, as does other 
	languages
	#+BEGIN_SRC python :results output :session oop
          class MyClass(object):
              def set_val(self, val):
                  self.value = val
              def get_val(self):
                  return self.value

          a = MyClass()
          b = MyClass()
          a.set_val(11)
          b.set_val(107)

          print('\n')
          print(a.get_val())
          print(b.get_val())
          # breaking encapsulation
          a.value = 13
          print('\n')
          print(a.get_val())
          print(b.get_val())
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... >>> >>> >>> >>> >>> >>>
	: 11
	: 107
	: ... >>>
	: 13
	: 107

***** Init Constructor
      #+BEGIN_SRC python :results output :session oop
        class MyNum(object):
            def __init__(self, value):
                print('Calling __init__')
                self.val = value
            def increment(self):
                self.val += 1

        print('\n')
        dd = MyNum(5)
        dd.increment()
        dd.increment()
        print(dd.val)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... ... ... >>>
      : Calling __init__
      : >>> >>> 7

      - _init_ is a keyword variable: it must be named init
      - It is a method automatically called when a new instance is
	constructed
      - If it is not present, it is not called
      - The *self* argument is the first appearance of the instance
      - __init__ offers the opportunity to initialize attributes
	in the instance at the time of construction

***** Class Attributes
      #+BEGIN_SRC python :results output :session oop
        class YourClass(object):
            class_var = 10
            def set_val(self):
                self.instance_var = 100

        dd = YourClass()
        print('\n')
        print(dd.class_var)
        dd.set_val()
        print('\n')
        print(dd.instance_var)
      #+END_SRC

      #+RESULTS:
      : 
      : ... ... ... >>> >>>
      : 10
      : >>>
      : 100

***** Working With Class And Instance Data
       #+BEGIN_SRC python :results output :session oop
         class YourClass(object):
             class_val = 'classy'

         dd = YourClass()
         print('\n')
         print(dd.class_val)
         dd.class_val = 're-assigned'
         print('\n')
         print(dd.class_val)
         del dd.class_val
         print('\n')
         print(dd.class_val)
         try:
             del dd.class_val
         except AttributeError:
             print('Class attribute impossible to delete')

         print('\n')
         if dd.class_val:
             print(dd.class_val)
         else:
             print('Class value was deleted successfully')
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... >>> >>>
       classy
       >>>
       re-assigned

       classy
       ... ... ... Class attribute impossible to delete

       ... ... ... ... classy
#+end_example

       #+BEGIN_QUOTE
       Class attributes vs instance attributes

       - _Attributes_ / _variables_ in the class are accessible through the
	 instance
       - Instance attributes are also accessible by the instance
       - When we use the syntax /object.attribute/, we're asking Python
	 to look up the attribute:
	 - first in the instance
	 - Then in the class
       - Method calls through the instance follow this look-up.
       #+END_QUOTE

       6 points to understanding classes

       - An instance of a class knows what class it's from
       - Vars defined in the class are available to the instance
       - A method on an instance passes /instance/ as the first
	 argument to the method (named /self/ in method)
       - Instances have their own data, called /instance attributes/
       - Variables defined in the class are /class attributes/
       - When we read an attribute, Python looks for it first in
	 the instance, and then the class.

	 #+BEGIN_SRC python :results output :session oop
           class InstanceCounter(object):
               """ Example """
               count = 0
               def __init__(self, val):
                   self.val = val
                   InstanceCounter.count += 1
               def set_val(self, newval):
                   self.val = newval
               def get_val(self):
                   return self.val
               def get_count(self):
                   return InstanceCounter.count

           a = InstanceCounter(5)
           b = InstanceCounter(13)
           c = InstanceCounter(17)

           for j in (a, b, c):
               print('\n')
               print("val of object: %s" % (j.get_val()))
               print("count: %s" % (j.get_count()))
               print("count from instance: %s" % (j.count))
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 ... ... ... ... ... ... ... ... ... ... ... >>> >>> >>> >>> >>> ... ... ... ... ... 

	 val of object: 5
	 count: 3
	 count from instance: 3


	 val of object: 13
	 count: 3
	 count from instance: 3


	 val of object: 17
	 count: 3
	 count from instance: 3
#+end_example

***** Assignment 1
***** Assignment 1 - Solution
**** Inheritance And Polymorphism
***** Inheriting Attributes
****** Object.attribute lookup hierarchy
      - The instance
      - The class
      - Any class from which this class inherits
****** Example
       #+BEGIN_SRC python :results output
         class Date(object): # inherits from the 'object' class
             def get_date(self):
                 return '2016-12-09'

         class Time(Date): # inherits from the 'Date' class
             def get_time(self):
                 return '13:19:41'

         dt = Date()
         print(dt.get_date())

         tm = Time()
         print(tm.get_time())
         print(tm.get_date()) # found this method in the 'Date' class
       #+END_SRC

       #+RESULTS:
       : 2016-12-09
       : 13:19:41
       : 2016-12-09

****** Some inheritance terms
       - An inheriting class
	 - Child class
	 - Derived class
	 - Subclass
       - An inherited class
	 - Parent class
	 - Base class
	 - Superclass
****** Inheritance itself
******* The second pillar of *OOP*
******* One class can inherit from another
******** The class/ attributes ar inherited
******** In particular, its methods ar inherited
******** This means that instances of an inheriting (child)
	 class can access attributes of the inherited (parent) class
******* This is simply another level of attribute lookup:
	- instance;
	- class;
	- inherited class.
***** Inheritance Examples
      #+BEGIN_SRC python :results output
        import unittest#.TestCase as tc

        class Animal(object):
            def __init__(self, name):
                self.name = name
            def eat(self, food):
                print('%s is eating %s.' % (self.name, food))

        class Dog(Animal):
            def fetch(self, thing):
                print('%s goes after the %s!' % (self.name, thing))

        class Cat(Animal):
            def swatstring(self):
                print('%s shreds the string!' % (self.name))

        r = Dog('Rover')
        f = Cat('Fluffy')

        r.fetch('paper')
        f.swatstring()
        r.eat('dog food')
        unittest.TestCase.assertRaises(AttributeError, r.swatstring())
        f.eat('cat food')
        # assert(AttributeError, r.swatstring()) # AttributeError: 'Dog' object has no attribute 'swatstring'
      #+END_SRC

      #+RESULTS:
      : Rover goes after the paper!
      : Fluffy shreds the string!
      : Rover is eating dog food.
      : Fluffy is eating cat food.

****** Inheritance hierarchy
       - Classes can be organized into an /inheritance hierarchy/
       - A child class can access the attribu;tes of all parent 
	 (grandparent, etc.) classes
       - Inheritance promotes code collaboration and reuse
       - "No code should appear twice"
***** Polymorphism
      *Many Shapes*
      - The third pillar of OOP
      - Two classes with same /interface/ (i.e., method name)
      - The methods are often different, but conceptually similar
      - Allows for expressiveness in desigh: we can say that this 
	group of related classes implement the same action
      - /Duck typing/ refers to reading an object's attributes to 
	decide whether it is of a proper type, rather than checking 
	the type itself
	
****** Example #1
       #+BEGIN_SRC python :results output
         class Animal(object):
             def __init__(self, name):
                 self.name = name

             def eat(self, food):
                 print('{0} eats {1}'.format(self.name, food))

         class Dog(Animal):
             def fetch(self, thing):
                 print('{0} goes after the {1}'.format(self.name, thing))

             def show_affection(self):
                 print('{0} wags tail'.format(self.name))

         class Cat(Animal):
             def swatstring(self):
                 print('{0} shreds the string!'.format(self.name))

             def show_affection(self):
                 print('{0} purrs'.format(self.name))

         for a in (Dog('Rover'), Cat('Fluffy'), Cat('Precious'), Dog('Scout')):
             a.show_affection()
       #+END_SRC

       #+RESULTS:
       : Rover wags tail
       : Fluffy purrs
       : Precious purrs
       : Scout wags tail

***** Inheriting The Constructor
      - *__init__* is like any other method; it can be inherited
      - if a class does not have an *__init__* constructor, Python 
	will check it parent class to see if it can find one
      - As soon as it finds one, Python calls it and stops looking
      - We can use the *super()* function to call methods in the 
	parent class
      - We may want to initialize in the parent as well as our 
	own class

****** Example #2
       #+BEGIN_SRC python :results output
         import random

         class Animal(object):
             
             def __init__(self, name):
                 self.name = name


         class Dog(Animal):

             def __init__(self, name):
                 super(Dog, self).__init__(name)
                 self.breed = random.choice(['Shih Tzu', 'Beagle', 'Mutt'])
                 
             def fetch(self, thing):
                 print('{0} goes after the {1}'.format(self.name, thing))

         d = Dog('Pluto')
         print(d.name)
         print(d.breed)
       #+END_SRC

       #+RESULTS:
       : Pluto
       : Beagle

***** Multiple Inheritance And The Lookup Tree
      - Any class can inherit from multiple classes
      - Python normally uses a /depth-first/ order when 
	searching inheriting classes
      - But when two classes inherit from the same class, 
	Python elieminates the first mention of that class from 
	the /mro/ (method resolution order)
      - The above applies to "new style" classes (inheriting from 
	/object/)

***** Decorators, Static And Class Methods
***** Abstract Classes
***** Method Overloading - Extending And Providing
***** Composition Versus Inheritance
***** Assignment 2
***** Assignment 2 - Solution
***** Assignment 2 For Extra Credit - Solution

**** Advanced Features
***** Implementing Core Syntax
      Our classes can respond to core syntax features:
      - Operators like +, -, *, /
      - Operators like =in=
      - Built-in functions like len() and str()
      - Looping
      - Subscripts and slices



      Core syntax features translate to ~magic~ method calls
      [[http://www.rafekettler.com/magicmethods.html][Full list]] of ~magic~ methods
****** Core syntax resolutions:
       | Strict implementation | Magic method            |
       |-----------------------+-------------------------|
       | 'abc' in var          | var.__contains__('abc') |
       | var == 'abc'          | var.__eq__('abc')       |
       | var[1]                | var.__getitem__(1)      |
       | var[1:3]              | var.__getslice__(1, 3)  |
       | len(var)              | var.__len__()           |
       | print(var)            | var.__repr__()          |
****** Sample
       #+BEGIN_SRC python :session core
         class SumList(object):

             def __init__(self, this_list):
                 self.mylist = this_list

             def __add__(self, other):

                 new_list = [x + y for x, y in zip(self.mylist, other.mylist)]
                 return SumList(new_list)

             def __repr__(self):
                 return str(self.mylist)
       #+END_SRC
       Now, when our example class is defined, lets try to evaluate it:
       #+BEGIN_SRC python :session core
         cc = SumList([1, 2, 3, 4, 5])
         dd = SumList([100, 200, 300, 400, 500])

         ee = cc + dd
         print ee
       #+END_SRC


***** Subclassing Built-Ins
      
****** Classical usage
       #+BEGIN_SRC python :session core
         class MyClass(object):
             pass

         x = MyClass()
         x.this = 'Hello'
         x.that = 'anything'

         print(x.this, ' ', x.that)
       #+END_SRC
       
****** Inheriting from built-ins
       - Python lets our classes inherit from built-in classes;
       - An inheriting (child) class of a built-in shares all the same 
	 attributes (including methods) of the built-in;
       - We can take advantage of core built-in functionality, but 
	 customize selected operations;
       - Built-in behaviour is familiar to all Python developers - this 
	 can make use of our inheriting class easy to learn.

******* Sample #1
       	#+BEGIN_SRC python :session core
          class MyDict(dict):
              pass

          dd = MyDict()
          dd['a'] = 5
          dd['b'] = 6

          for key in dd.keys():
              print('{0}={1}'.format(key, dd[key]))
       	#+END_SRC

******* Sample #2
       	#+BEGIN_SRC python :session core
          class MyDict(dict):

              def __setitem__(self, key, val):
                  print("setting a key and value!")
                  dict.__setitem__(self, key, val)  # prevent recursion

          dd = MyDict()
          dd['a'] = 5
          dd['b'] = 6

          for key in dd.keys():
              print('{0}={1}'.format(key, dd[key]))
       	#+END_SRC

******* Sample #3
       	#+BEGIN_SRC python :session core
          class MyList(list):  # inherit from list

              def __getitem__(self, index):
                  if index == 0: raise IndexError
                  if index > 0: index = index - 1
                  return list.__getitem__(self, index)  # prevent recursion

              def __setitem__(self, index, value):
                  if index == 0: raise IndexError
                  if index > 0: index = index - 1
                  list.__setitem__(self. index, value)  # prevent recursion

          x = MyList(['a', 'b', 'c'])
          print(x)
          x.append('spam')
          print(x[0])
          print(x[4])
       	#+END_SRC

***** Attribute Encapsulation

****** Classical example:
       #+BEGIN_SRC python :session core
         class MyClass(object):

             def set_val(self, val):
                 self.value = val

             def get_val(self):
                 return self.value

         a = MyClass()
         b = MyClass()

         a.set_val(10)
         b.set_val(100)

         print(a.get_val())
         print(b.get_val())
       #+END_SRC

****** But
       - Instance attributes can be changed anywhere, to any value, 
	 breaking encapsulation;
       - Getter and Setter methods /encourage/ encapsulation, 
	 but are clunker;
       - Users are expected to _do the right thing_;
       - Trusting the user is /Pythonic/

****** @property
       - *@property* is a decorator that designates an instance attribute 
	 as encapsulate-able through methods;
       - Getting, setting and deleting methods can be defined, called 
	 automatically when a user accesses the attribute;
       - The names are linked to the attribute name - the methods, 
	 and setter and deleter methods must use it;
       - @property offers some control, but don't try to force the user 
	 into certain behaviors - it's un-Pythonic!

****** Sample
       #+BEGIN_SRC python :results output
         class GetSet(object):

             def __init__(self, value):
                 self.attrval = value

             @property
             def var(self):
                 print("Getting the 'var' attribute")
                 return self.attrval

             @var.setter
             def var(self. value):
                 print("Setting the 'var' attribute")
                 self.attrval = value

             @var.deleter
             def var(self):
                 print("Deleting the 'var' attribute")
                 self.attrval = None

         me = GetSet(5)

         me.var = 1000
         print(me.var)
         del me.var
         print(me.var)
       #+END_SRC

****** @property: additional notes
       - @property should not encapsulate /expensive/ operations, because 
	 attribute setting looks /cheap/;
       - @property controls attributes that are expected, but can't 
	 control attributes that are unexpected;
       - __slots__ can define allowable attributes
	 - saves memory by defining attributes ahead of time
	 - should not be used to limit attributes - /un-Pythonic/!

***** Private Variable Names

****** Variable naming: PEP8
       - Module names: *all_lower_case*
       - Class names and exception names: *CamelCase*
       - Globals and locals: *all_lower_case*
       - Functions and methods: *all_lower_case*
       - Constants: *ALL_CAPS*


****** Why conform to convention?
       - More familiar to the vast majority of developers
       - Clearer to most readers of your code
       - Will match style of other contributors who work on same code
       - Mark of a professional software developer
       - Everyone will like you :-)


****** Variable naming: /public/ and /private/
       - /Public/ attributes or variables (intended to be used by the importer
         of this module or user of this class):
         *regular_lower_case*
       - /Private/ attributes or variables (internal use by the module or class):
         *_single_leading_underscore*
       - /Private/ attributes that shouldn't be subclassed:
         *__double_leading_underscore*
       - /Magic/ attributes:
         *__double_underscores__*

***** With Context
      
****** Several premises:
       - Some objects need to /clean-up/ when done
         - =File= object needs to /close()/
         - A network connection may need to close
         - A data-intensive operation may need to /del/ the data
       - =__with__= provides a block that /cleans up/ when exited
       - Can handle exceptions that occur within the block
       - Can also execute code when entered

****** Sample #1
       #+BEGIN_SRC python :session core
         with open('filename.txt') as fh:
             for line in fh:
                 line = line.rstrip()
                 print(line)

         # and an alternative version:

         fh = open('filename.txt')
         for line in fh:
             print(line)
         fh.close
       #+END_SRC

****** Sample #2
       #+BEGIN_SRC python :results output
         class SampleClass(object):

             def __enter__(self):
                 print('we have entered "with"')
                 return self

             def __exit__(self, type, value, traceback):
                 print('we are leaving "with"')

             def say_hi(self):
                 print('hi, instance %s' % (id(self)))

         with SampleClass() as cc:
             cc.say_hi()
         print('after the "with" block')
       #+END_SRC

       #+RESULTS:
       : we have entered "with"
       : hi, instance 3072332876
       : we are leaving "with"
       : after the "with" block

***** New Style Classes
***** Assignment 3
***** Assignment 3 - Supplementary Hints
***** Assignment 3 - Solution

**** Exceptions
***** Trapping And Raising Exceptions
***** Custom Exceptions
***** Assignment 4
***** Assignment 4 - Solution

**** Object Serialization
     - /Serialization/ means /persistent/ storage, i.e., to disk
     - /Relational/ storage writes data to tables
       (e.g., relational database text files)
     - /Object-based/ storage stores objects as they are used in code
     - /Object-relational mappings/ can meditate between the two
***** Pickle
****** Samples
       #+BEGIN_SRC python
         import pickle

         mylist = ['a', 'b', 'c', 'd']

         with open('datafile.txt', 'w') as fh:
             pickle.dump(mylist, fh)

         with open('datafile.txt') as fh:
             unpickled_list = pickle.load(fh)

         """
         In the similar way it is possible to store and retrieve
         all Pythonic datatypes
         """

         sample_int = 123
         sample_string = 'This is a test'
         dict_of_listst = {'a': [1, 2, 3],
                           'b': [4, 5, 6]}
         query_results = [('joe', 22, 'clerk'), ('pete', 34, 'salesman')]

         with open('datafile.txt', 'w') as fh:
             pickle.dump((sample_int, sample_string,
                          dict_of_listst, query_results), fh)

         with open('datafile.txt') as fh:
             tup = pickle.load(fh)  # this is a tuple as an initial one
       #+END_SRC
****** Pickle and cPickle
       - Python-native object storage
       - Can store most Python objects on disk
       - Does not store classes, modules or functions
         but can refer to them
       - Not human readable
       - Uses the /pickle protocol/ which changes between
         versions of Python
       - cPickle is faster, C-compiled implementation
***** JSON
      - Java-script object notation
      - Extremely popular standard for storing and
        communicating structured data
      - Human readable
      - Often used for configuration files
      - Resembles Python, but is not always valid Python
***** YAML
      *YAML*: "Yaml Ain't Markup Language"
      - Serializes Python objects, like Pickle or JSON
      - Uses whitespace to separate elements
        key: value
        key2: value2
        key3:
        - listelement
        - listelement2
        - listelement3
      - *Pyyaml* install: =sudo pip install pyyaml=
      
***** Assignment 5
***** Assignment 5 - Solution

**** Efficiency And Testing
***** Debugging - PDB
***** Logging
***** Benchmarking - The Timeit Module
***** The Pytest Module - Part 1
***** The Pytest Module - Part 2
***** Assignment 6
***** Assignment 6 - Solution

**** Conclusion
***** What We Have Learned
***** Where To Go From Here						:OOP:

*** Pycon 2016

**** The Live Cycle of a Python Class
     [[http://bit.ly/pyconslides][Slides]]

**** Why and How to Restructure Your Code
     [[http://github.com/bslatkin/pycon2016][Code and slides]]

*** Fluent Python						     :fluent:
**** Preface
***** [[https://docs.python.org/3.0/whatsnew/3.0.html][Whatâs N In Python 3.0]]
***** [[https://docs.python.org/3/tutorial/][Python Tutorial]]
      #+BEGIN_QUOTE
      Premature abstraction is as bad as premature optimization.
      #+END_QUOTE
*** Writing Idiomatic Python					     :idioma:
**** 1 Control Structures and Functions
***** 1.1 If Statements
****** 1.1.1 Avoid comparing directly to True , False , or None
       #+BEGIN_SRC python :results output
         def raise_shields():
             return True

         def number_of_evil_robots_attacking():
             return 10

         def should_raise_shields():
             # "We only raise Shields when one or more giant robots attack,
             # so I can just return that value..."
             return number_of_evil_robots_attacking()
         # if should_raise_shields():  # idiomatic approach
         if should_raise_shields() == True:
             raise_shields()
             print ('Shields raised')
         else:
             print("Safe! No giant robots attacking")
       #+END_SRC

       #+RESULTS:
       : Safe! No giant robots attacking
****** 1.1.2 Avoid repeating variable name in compound if statement
      #+BEGIN_SRC python :results output
        is_generic_name = False
        name = 'Tom'
        if name == 'Tom' or name == 'Dick' or name == 'Harry':
            is_generic_name = True

        # Idiomatic
        name = 'Tom'
        is_generic_name = name in ('Tom', 'Dick', 'Harry')
        print(is_generic_name)
      #+END_SRC

      #+RESULTS:
      : True
****** 1.1.3 Avoid placing conditional branch code on the same line as
      the colon
      #+BEGIN_SRC python :results output
        name = 'Jeff'
        address = 'New York, NY'
        if name: print (name)
        print (address)
        # Idiomatic
        if name:
            print (name)
        print (address)
      #+END_SRC

      #+RESULTS:
      : Jeff
      : New York, NY
      : Jeff
      : New York, NY

***** 1.2 For loops       
****** 1.2.1 Use the enumerate function in loops instead of creating an âindexâ variable
       #+BEGIN_SRC python :results output
         my_container = ['Larry', 'Moe', 'Curly']
         for index, element in enumerate(my_container):
             print ('{} {}'.format(index, element))
       #+END_SRC

       #+RESULTS:
       : 0 Larry
       : 1 Moe
       : 2 Curly

****** 1.2.2 Use the in keyword to iterate over an iterable
       #+BEGIN_SRC python :results output
         my_list = ['Larry', 'Moe', 'Curly']
         for element in my_list:
             print (element)
       #+END_SRC

       #+RESULTS:
       : Larry
       : Moe
       : Curly

****** 1.2.3 Use else to execute code after a for loop concludes
       #+BEGIN_SRC python
         for user in get_all_users():
             print ('Checking {}'.format(user))
             for email_address in user.get_all_email_addresses():
                 if email_is_malformed(email_address):
                     print ('Has a malformed email address!')
                     break
             else:  # for loop successfully iterated all items
                 print ('All email addresses are valid!')
       #+END_SRC

       #+RESULTS:

***** 1.3 Functions
****** 1.3.1 Avoid using '' , [] , and {} as default parameters to functions
       #+BEGIN_SRC python :results output
         # The default value [of a function] is evaluated only once.
         # This makes a difference when the default is a mutable object
         # such as a list, dictionary, or instances of most classes. For
         # example, the following function accumulates the arguments
         # passed to it on subsequent calls.
         def f(a, L=[]):
             L.append(a)
             return L
         print (f(1))
         print (f(2))
         print (f(3))
         print('=============')

         # Idiomatic
         # 
         # 
         # If you don't want the default to be shared between subsequent
         # calls, you can write the function like this instead:
         def f(a, L=None):
             if L is None:
                 L = []
             L.append(a)
             return L
         print (f(1))
         print (f(2))
         print (f(3))
       #+END_SRC
****** 1.3.2 Use *args and **kwargs to accept arbitrary arguments
       #+BEGIN_SRC python
         def make_api_call(foo, bar, baz, *args, **kwargs):
             # Now I can accept any type and number of arguments
             # without worrying about breaking existing code.
             baz_coefficient = kwargs['the_baz']
             # I can even forward my args to a different function without
             # knowing their contents!
             return baz_coefficient in new_function(args)
       #+END_SRC
**** 2 Working with Data
***** 2.1 Lists
***** 2.1.1 Use a list comprehension to create a transformed version
      of an existing list
      #+BEGIN_SRC python :results output
        # Harmful

        some_other_list = range(10)
        some_list = list()
        for element in some_other_list:
            if is_prime(element):
                some_list.append(element + 5)

        # Idiomatic               

        some_other_list = range(10)
        some_list = [element + 5 for
                     element in some_other_list if
                     is_prime(element)]
      #+END_SRC
***** 2.1.2 Use the * operator to represent the ârestâ of a list
***** 2.2 Dictionaries
      2.2.1 Use the default parameter of dict.get to provide default
      values
      2.2.2 Use a dict comprehension to build a dict clearly and
      efficiently
***** 2.3 Strings
      2.3.1 Prefer the format function for formatting strings
      2.3.2 Use ''.join when creating a single string for list elements
      2.3.3 Chain string functions to make a simple series of transfor-
      mations more clear
***** 2.4 Classes
      2.4.1 Use underscores in function and variable names to help mark
      âprivateâ data
      2.4.2 Define __str__ in a class to show a human-readable repre-
      sentation
***** 2.5 Sets
      2.5.1 Use sets to eliminate duplicate entries from Iterable con-
      tainers
      2.5.2 Use a set comprehension to generate sets concisely
      2.5.3 Understand and use the mathematical set operations
***** 2.6 Generators
      2.6.1 Use a generator to lazily load infinite sequences
      2.6.2 Prefer a generator expression to a list comprehension
      for simple iteration
***** 2.7. Context Managers
      2.7.1 Use a context manager to ensure resources are properly
      managed
***** 2.8. Tuples
      2.8.1 Use tuples to unpack data
      2.8.2 Use _ as a placeholder for data in a tuple that should be
      ignored
***** 2.9 Variables
      2.9.1 Avoid using a temporary variable when performing a swap
      of two values
**** 3 Organizing Your Code
***** 3.1 Modules and Packages
      3.1.1 Use modules for encapsulation where other languages would
      use Objects
***** 3.2 Formatting
      3.2.1 Use all capital letters when declaring global constant values
      3.2.2 Avoid placing multiple statements on a single line
      3.2.3 Format your code according to PEP8
***** 3.3. Executable Scripts
      3.3.1 Use sys.exit in your script to return proper error codes
      3.3.2 Use the if __name__ == '__main__' pattern to allow a
      file to be both imported and run directly
***** 3.4 Imports
      3.4.1 Prefer absolute imports to relative imports
      3.4.2 Do not use from foo import * to import the contents of a
      module.
      3.4.3 Arrange your import statements in a standard order
**** 4 General Advice
***** 4.1 Avoid Reinventing the Wheel
      4.1.1 Learn the Contents of the Python Standard Library
      4.1.2 Get to know PyPI (the Python Package Index)
***** 4.2 Modules of Note
      4.2.1 Learn the contents of the itertools module
      4.2.2 Use functions in the os.path module when working with
      directory paths

*** Effective Python						     :effect:

**** [[https://github.com/bslatkin/effectivepython][Git]]

*** [[Test%20Driven%20Development%20Approach][Testing]]						       :test:doctest:
    #+BEGIN_SRC sh :results output
    pwd
    # cd Learning_Python_Testing
    pwd
    # python -m doctest test.txt
     
    #+END_SRC

    #+RESULTS:
    : /usr/local/share/DVCS/lib/org
    : /usr/local/share/DVCS/lib/org

*** Programming design patterns

**** Gang of Fours
***** Creational Patterns

****** Abstract Factory
       Provide an interface for creating families of related or dependent
       objects without specifying their concrete classes.

****** Builder
       Separate the construction of a complex object from its representation so
       that the same construction process can create different representations.

****** Factory Method
       Define an interface for creating an object, but let subclasses
       decide which class to instantiate. Factory Method lets a class defer
       instantiation to subclasses.

****** Prototype
       Specify the kinds of objects to create using a prototypical instance,
       and create new objects by copying this prototype.

****** Singleton
       Ensure a class only has one instance, and provide a global point of
       access to it.

***** Structural Patterns

****** Adapter
       Convert the interface of a class into another interface clients expect.
       Adapter lets classes work together that couldnât otherwise because of
       incompatible interfaces.

****** Bridge
       Decouple an abstraction from its implementation so that the two can vary
       independently.

****** Composite
       Compose objects into tree structures to represent part-whole hierarchies.
       Composite lets clients treat individual objects and compositions
       of objects uniformly.

****** Decorator
       Attach additional responsibilities to an object dynamically. Decorators
       provide a flexible alternative to subclassing for extending functionality.

****** Facade
       Provide a unified interface to a set of interfaces in a subsystem. Facade
       defines a higher-level interface that makes the subsystem easier to use.

****** Flyweight
       Use sharing to support large numbers of fine-grained objects efficiently.

****** Proxy
       Provide a surrogate or placeholder for another object to control access to it.

***** Behavioral Patterns

****** Chain of Responsibility
       Avoid coupling the sender of a request to its receiver by giving more than
       one object a chance to handle the request. Chain the receiving objects
       and pass the request along the chain until an object handles it.

****** Command
       Encapsulate a request as an object, thereby letting you parameterize clients
       with different requests, queue or log requests, and support undoable operations.

****** Interpreter
       Given a language, define a represention for its grammar along with an
       interpreter that uses the representation to interpret sentences in the language.

****** Iterator
       Provide a way to access the elements of an aggregate object sequentially
       without exposing its underlying representation.

****** Mediator
       Define an object that encapsulates how a set of objects interact.
       Mediator promotes loose coupling by keeping objects from referring to each other
       explicitly, and it lets you vary their interaction independently.

****** Memento
       Without violating encapsulation, capture and externalize an objectâs
       internal state so that the object can be restored to this state later.

****** Observer
       Define a one-to-many dependency between objects so that when one object
       changes state, all its dependents are notified and updated automatically.

****** State
       Allow an object to alter its behavior when its internal state changes. The
       object will appear to change its class.

****** Strategy
       Define a family of algorithms, encapsulate each one, and make them interchangeable.
       Strategy lets the algorithm vary independently from clients that use it.

****** Template Method
       Define the skeleton of an algorithm in an operation, deferring some steps to
       subclasses. Template Method lets subclasses redefine certain steps of an
       algorithm without changing the algorithmâs structure.

****** Visitor
       Represent an operation to be performed on the elements of an object structure.
       Visitor lets you define a new operation without changing the classes of the
       elements on which it operates.


**** Rahul

***** Preface
      #+BEGIN_QUOTE
      A design pattern in architecture and computer science is a formal way of 
      documenting a solution to a design problem in a particular field of expertise. The 
      idea was introduced by the architect Christopher Alexander in the field of 
      architecture and has been adapted for various other disciplines, including computer 
      science. An organized collection of design patterns that relate to a particular field
      is called a pattern language. 
      #+END_QUOTE

***** The Model-View-Controller Pattern
      #+BEGIN_QUOTE
      âModelâViewâController (MVC) is a software 
      architecture, currently considered an architectural 
      pattern used in software engineering. The pattern 
      isolates âdomain logicâ (the application logic for the 
      user) from input and presentation (GUI), permitting 
      independent development, testing and maintenance of 
      each.â 
      #+END_QUOTE
     

**** Design patterns from Lynda

***** What is a design pattern
      #+BEGIN_QUOTE
      Well-known solutions to recurring problems
      #+END_QUOTE
      Widely accepted solutions by the software
      development community.
      Why use design patterns?
****** Motivations
******* No need to reinvent the wheel and waste your
	time
******* Systematic reuse of design ideas of best
	practices yields lower cost and higher quality
***** Types of design patterns
****** Creational Patterns
******* Definition
	Used to create objects in a systematic way
******* Benefits
	Flexibility
******* Example:
	Different subtypes of objects from the same
	class at runtime
****** Structural Patterns
******* Definition
	Establishes useful relationships between software
	components in certain configurations.
	To accomplish a goal: both functional and
	nonfunctional
	Different goals yield  different structures
****** Behavioral Patterns
******* Definition
	Best practices of objects interaction
******* Focus
	Define the protocols
***** Understanding object-oriented programming
      Object-oriented mechanism used /interfaces/ for
      - Structural inheritance;
      - Creational polymorphism;
      - Behavioral methods and their signatures
***** Working with inheritance and polymorphism
****** Inheritance
       #+BEGIN_QUOTE
       Establishes a relationship between two classes
       as *Parent* and *Child*
       #+END_QUOTE
****** Child Class
******* =Keeps= the attributes and methods
	of its parent
******* =Adds= new attributes or methods of
	its own
******* =Overrides= the existing methods of
	its parent
****** Polimorphism
******* Relies on inheritance
******* Allows child classes to be instantiated
	and treated as the same type as its parent
******* Enables a parent class to be manifest into
	any of its child classes
***** Understanding Pattern context
****** Participants
       - Classes involved to form a design pattern
       - Roles
****** Quality attributes
******* Nonfunctional requirements
	Usability, modifiability, reliability,
	perfomance, etc.
******* Effect on the entire software
	Architectural solutions
****** Forces
       Various factors or trade-offs to consider.
       Manifested in quality attributes.
       In most cases would intail unintended
       consequences.
****** Consequences
******* Side effects
	~Better security but worse perfomance~
******* Decision makers
	~Despite the consequences~
***** Working with Pattern language
****** Name
       - Shouls capture the gist of the pattern
       - Becomes part of a vocabulary during the design process
       - Needs to be
	 - Meaningful
	 - Memorable
****** Context
       - Provides a scenario
	 - Pattern may be used
       - Provides more insights
	 - When to use it
	 - When /not/ to use it
****** Problem
       - Describes a design challenge
	 - Pattern is addressing
****** Solution
       - Specifies a pattern
	 - Structure: relationships among elements
	 - Behavior: interactions
****** Related patterns
***** Scholastic classification
****** Pattern Name and Classification:
       A descriptive and unique name that helps in identifying and referring to the pattern.
****** Intent:
       A description of the goal behind the pattern and the reason for using it.
****** Also Known As:
       Other names for the pattern.
****** Motivation (Forces):
       A scenario consisting of a problem and a context in which this pattern can be used.
****** Applicability:
       Situations in which this pattern is usable; the context for the pattern.
****** Structure:
       A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose.
****** Participants:
       A listing of the classes and objects used in the pattern and their roles in the design.
****** Collaboration:
       A description of how classes and objects used in the pattern interact with each other.
****** Consequences:
       A description of the results, side effects, and trade offs caused by using the pattern.
****** Implementation:
       A description of an implementation of the pattern; the solution part of the pattern.
****** Sample Code:
       An illustration of how the pattern can be used in a programming language.
****** Known Uses:
       Examples of real usages of the pattern.
****** Related Patterns:
       Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns.

***** Factory
****** Problem
******* Uncertainties in types of objects
******* Decisions to made at run-time
	regarding what classes to use
****** Factory examples
******* Pet factory
	#+BEGIN_SRC python :results output
          class Dog(object):
              """A simple dog class"""

              def __init__(self, name):
                  self._name = name

              def speak(self):
                  return "Woof!"


          class Cat(object):
              """A simple cat class"""

              def __init__(self, name):
                  self._name = name

              def speak(self):
                  return "Meow!"


          def spawn_pet(pet="dog"):
              """The factory method"""
              pets = dict(dog=Dog("Hope"), cat=Cat("Peace"))
              return pets[pet]

          d = spawn_pet("dog")
          print(d.speak())
          c = spawn_pet("cat")
          print(c.speak())
	#+END_SRC

	#+RESULTS:
	: Woof!
	: Meow!
******* Weapon factory
	#+BEGIN_SRC python :results output
          from random import randrange


          class Weapon(object):
              name = None
              cost = None

              @staticmethod
              def get_weapon(x):
                  if x == 0:
                      return Knife()
                  if x == 1:
                      return Gun()


          class Knife(Weapon):
              name = 'Knife'
              cost = 20.00


          class Gun(Weapon):
              name = 'Gun'
              cost = 300.00


          # Create 5 random weapons
          for _ in range(5):
              w = Weapon.get_weapon(randrange(2))
              print(w.name, w.cost)
	#+END_SRC

	#+RESULTS:
	: Knife 20.0
	: Gun 300.0
	: Gun 300.0
	: Gun 300.0
	: Knife 20.0
******* Pizza factory
	#+BEGIN_SRC python :output results
          class Pizza(object):

              def __init__(self):
                  self._price = None

              def get_price(self):
                  return self._price


          class HamAndMushroomPizza(Pizza):

              def __init__(self):
                  self._price = 8.5


          class DeluxePizza(Pizza):

              def __init__(self):
                  self._price = 10.5


          class HawaiianPizza(Pizza):

              def __init__(self):
                  self._price = 11.5


          class PizzaFactory(object):

              @staticmethod
              def create_pizza(pizza_type):
                  if pizza_type == 'HamMushroom':
                      return HamAndMushroomPizza()
                  elif pizza_type == 'Deluxe':
                      return DeluxePizza()
                  elif pizza_type == 'Hawaiian':
                      return HawaiianPizza()


          for pizza_type, price in zip(['HamMushroom', 'Deluxe', 'Hawaiian'], [8.5, 10.5, 11.5]):
              assert PizzaFactory.create_pizza(pizza_type).get_price() == price,\
                  "%s validation failed." % pizza_type
	#+END_SRC

	#+RESULTS:
	: None
******* Operation factory
	#+BEGIN_SRC python :results output
          class Operation(object):

              @property
              def number_a(self):
                  return self.__number_a

              @number_a.setter
              def number_a(self, value):
                  self.__number_a = value

              @property
              def number_b(self):
                  return self.__number_b

              @number_b.setter
              def number_b(self, value):
                  self.__number_b = value


          class OperationAdd(Operation):
              def get_result(self):
                  return self.number_a + self.number_b


          class OperationSub(Operation):
              def get_result(self):
                  return self.number_a - self.number_b


          class OperationFactory(object):
              @staticmethod
              def create_operation(operate):
                  if operate == "+":
                      return OperationAdd()
                  elif operate == "-":
                      return OperationSub()

          op = OperationFactory.create_operation('+')
          op.number_a = 10
          op.number_b = 5

          print(op.get_result())

	#+END_SRC

	#+RESULTS:
	: 15

***** Abstract factory
****** Problem
******* The user expectations yields multiply
	related objects
****** Solution
******* Abstract factory
******* Concrete factory
******* Abstract product
******* Concrete product
****** Abstract factory examples
******* Pet shop
          #+BEGIN_SRC python :results output
            class Dog(object):
                """One of the objects to be returned"""

                def speak(self):
                    return "Woof!"

                def __str__(self):
                    return "Dog"


            class DogFactory(object):
                """Concrete Factory"""

                def get_pet(self):
                    """Returns a Dog object"""
                    return Dog()

                def get_food(self):
                    """Returns a Dog Food object"""
                    return "Dog Food!"


            class PetStore(object):
                """ PetStore houses our Abstract Factory """

                def __init__(self, pet_factory=None):
                    """ pet_factory is our Abstract Factory """

                    self._pet_factory = pet_factory

                def show_pet(self):
                    """ Utility method to display the details of the objects retured by the DogFactory """

                    pet = self._pet_factory.get_pet()
                    pet_food = self._pet_factory.get_food()

                    print("Our pet is '{}'!".format(pet))
                    print("Our pet says hello by '{}'".format(pet.speak()))
                    print("Its food is '{}'!".format(pet_food))


            # Create a Concrete Factory
            factory = DogFactory()

            # Create a pet store housing our Abstract Factory
            shop = PetStore(factory)

            # Invoke the utility method to show the details of our pet
            shop.show_pet()
          #+END_SRC

          #+RESULTS:
          : Our pet is 'Dog'!
          : Our pet says hello by 'Woof!'
          : Its food is 'Dog Food!'!
******* Button
	#+BEGIN_SRC python :results output
          from __future__ import print_function
          import platform


          class GuiFactory():
              """Abstract Factory"""

              @classmethod
              def getFactory(Class):
                  if platform.system() == "Windows":
                      return WinFactory()
                  elif platform.system() == "OSX":
                      return OSXFactory()
                  elif platform.system() == "Linux":
                      return LinuxFactory()

              class Button:
                  """ Abstract Product"""

                  def paint(self):
                      raise NotImplementedError

              @classmethod
              def getButton(Class):
                  return Class.Button()


          class WinFactory(GuiFactory):
              """Concrete Factory"""

              class Button(GuiFactory.Button):
                  """Concrete Product"""

                  def paint(self):
                      print("I am a Windows button")


          class LinuxFactory(GuiFactory):
              """Concrete Factory"""

              class Button(GuiFactory.Button):
                  """Concrete Product"""

                  def paint(self):
                      print("I am a Linux button")


          class OSXFactory(GuiFactory):
              """Concrete Factory"""

              class Button(GuiFactory.Button):
                  """Concrete Product"""

                  def paint(self):
                      print("I am a OSX button")


          factory = GuiFactory.getFactory()
          factory.getButton().paint()
	#+END_SRC

	#+RESULTS:
	: I am a Linux button

***** Singleton

****** Definition
       #+BEGIN_QUOTE
       In software engineering, the singleton pattern is a software
       design pattern that restricts the instantiation of a class to
       one object. This is useful when exactly one object is needed
       to coordinate actions across the system. The concept is sometimes
       generalized to systems that operate more efficiently when only
       one object exists, or that restrict the instantiation to a
       certain number of objects.
       #+END_QUOTE

****** Only one instance

****** Global variable in an object-oriented way

****** Scenario

******* An information cache

****** Solution

******* Module
	Shared by multiple objects

******* The /Borg/ design pattern

****** Singleton examples
    
******* Strict&narrow
	A kind of =singleton= like a ~hard link~ in the UNIX filesystems
	#+BEGIN_SRC python :results output
          class Singleton(object):

              def __new__(type):
                  if not '_the_instance' in type.__dict__:
                      type._the_instance = object.__new__(type)
                  return type._the_instance

          a = Singleton()
          a.toto = 12

          b = Singleton()
          assert id(a) == id(b) and a.toto == b.toto, "These variables aren't same!!!"
	#+END_SRC

	#+RESULTS:

******* Primitive Borg
	#+BEGIN_SRC python :output results
          class Borg(object):
              __shared_state = {}

              def __init__(self):
                  self.__dict__ = self.__shared_state

          a = Borg()
          a.toto = 12

          b = Borg()
          assert(a.toto == b.toto)
          assert(id(a) != id(b))  # different ! but states are sames
	#+END_SRC
******* Borg with abstract base class
	#+BEGIN_SRC python :results output
          class Borg(object):
              """Borg pattern making the class attributes global"""
              _shared_data_pool = {}

              def __init__(self):
                  self.__dict__ = self._shared_data_pool  # Make it an attribute dictionary


          class Singleton(Borg):  # Inherits from the Borg class
              """This class now shares all its attributes among its various instances"""
              # This essenstially makes the singleton objects an object-oriented global
              # variable

              def __init__(self, **kwargs):
                  Borg.__init__(self)
                  # Update the attribute dictionary by inserting a new key-value pair
                  self._shared_data_pool.update(kwargs)

              def __str__(self):
                  # Returns the attribute dictionary for printing
                  return str(self._shared_data_pool)

          # Let's create a singleton object and add our first acronym
          x = Singleton(a="First shared value")

          # Let's create another singleton object and if it refers to the same
          # attribute dictionary by adding another acronym.
          y = Singleton()
          assert(y.a == x.a)
          y.b = "Second shared value"
          # same values indoors
          assert(y.b == x.b) # compare the objects:
          assert(x != y)  # but they are different!
          assert(x is not y)  # in the same time
	#+END_SRC

	#+RESULTS:

******* A decorator
******* A base class
******* A metaclass
******* Metaclass usage
******* Specific decorator
	returning a class with the same name
****** Caution
***** Builder
      #+BEGIN_QUOTE
      Separates object construction from its representation
      #+END_QUOTE
****** Problem
       #+BEGIN_QUOTE
       The builder pattern is an object creation software design pattern.
       Unlike the abstract factory pattern and the factory method pattern
       whose intention is to enable polymorphism, the intention of the
       builder pattern is to find a solution to the telescoping constructor
       anti-pattern. The telescoping constructor anti-pattern
       occurs when the increase of object constructor parameter combination
       leads to an exponential list of constructors.
       Instead of using numerous constructors, the builder pattern uses another
       object, a /builder/, that receives each initialization parameter step by
       step and then returns the resulting constructed object at once.
       #+END_QUOTE

       The main premise for design is an excessive number of constructors.

       #+BEGIN_QUOTE
       =Builder= often builds a =Composite=. Often, designs start out using =Factory
       Method= (less complicated, more customizable, subclasses proliferate) and
       evolve toward =Abstract Factory=, =Prototype=, or =Builder= (more flexible,
       more complex) as the designer discovers where more flexibility is needed.
       Sometimes creational patterns are complementary: =Builder= can use one of
       the other patterns to implement which components are built.
       #+END_QUOTE
****** Scenario
       Building cars:
       - Tires
       - Engine
       - etc.
****** Solution
******* Director
******* Abstract Builder: interfaces
******* Concrete Builder: implements the interfaces
******* Product: object being built
****** Builder example
******* SkyLark
	#+BEGIN_SRC python :results output
          class Car(object):
              """Product"""

              def __init__(self):
                  self.model = None
                  self.tires = None
                  self.engine = None

              def __str__(self):
                  return '{} | {} | {}'.format(self.model, self.tires, self.engine)


          class Director(object):
              """Director"""

              def __init__(self, builder):
                  self._builder = builder

              def construct_car(self):
                  pass

              def get_car(self):
                  pass


          class Builder(object):
              """Abstract Builder"""

              def __init__(self):
                  self.car = None

              def create_new_car(self):
                  self.car = Car()


          class SkyLarkBuilder(Builder):
              """Concrete Builder --> provides parts and tools to work on the parts """

              def add_model(self):
                  self.car.model = "Skylark"

              def add_tires(self):
                  self.car.tires = "Regular tires"
	#+END_SRC

	#+RESULTS:

******* Building producing at ~faif~
	#+BEGIN_SRC python :results output
          # Director
          class Director(object):

              def __init__(self):
                  self.builder = None

              def construct_building(self):
                  self.builder.new_building()
                  self.builder.build_floor()
                  self.builder.build_size()

              def get_building(self):
                  return self.builder.building


          # Abstract Builder
          class Builder(object):

              def __init__(self):
                  self.building = None

              def new_building(self):
                  self.building = Building()

              def build_floor(self):
                  raise NotImplementedError

              def build_size(self):
                  raise NotImplementedError

          # Concrete Builder


          class BuilderHouse(Builder):

              def build_floor(self):
                  self.building.floor = 'One'

              def build_size(self):
                  self.building.size = 'Big'


          class BuilderFlat(Builder):

              def build_floor(self):
                  self.building.floor = 'More than One'

              def build_size(self):
                  self.building.size = 'Small'


          # Product
          class Building(object):

              def __init__(self):
                  self.floor = None
                  self.size = None

              def __repr__(self):
                  return 'Floor: {0.floor} | Size: {0.size}'.format(self)

          director = Director()
          director.builder = BuilderHouse()
          director.construct_building()
          building = director.get_building()
          print(building)
          director.builder = BuilderFlat()
          director.construct_building()
          building = director.get_building()
          print(building)
	#+END_SRC

	#+RESULTS:
	: Floor: One | Size: Big
	: Floor: More than One | Size: Small

******* Divided builder from ~wklken~
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Product(object):
              """
              What you want to get as a result
              """

              def __init__(self):
                  self.__parts = []

              def add(self, part):
                  self.__parts.append(part)

              def show(self):
                  print('-'.join(self.__parts))


          class Builder(object):
              """
              Empty template with all requrements
              """

              __metaclass__ = ABCMeta

              @abstractmethod
              def build_part_1(self):
                  pass

              @abstractmethod
              def build_part_2(self):
                  pass

              @abstractmethod
              def get_result(self):
                  pass


          class BuilderA(Builder):
              def __init__(self):
                  self.__product = Product()

              def build_part_1(self):
                  self.__product.add("partA1")

              def build_part_2(self):
                  self.__product.add("partA2")

              def get_result(self):
                  return self.__product


          class BuilderB(Builder):
              def __init__(self):
                  self.__product = Product()

              def build_part_1(self):
                  self.__product.add("partB1")

              def build_part_2(self):
                  self.__product.add("partB2")

              def get_result(self):
                  return self.__product


          class Director(object):
              @staticmethod
              def construct(builder):
                  builder.build_part_1()
                  builder.build_part_2()



          ba = BuilderA()
          bb = BuilderB()

          Director.construct(ba)
          product = ba.get_result()
          product.show()

          Director.construct(bb)
          product = bb.get_result()
          product.show()
	#+END_SRC

	#+RESULTS:
	: partA1-partA2
	: partB1-partB2

***** Prototype
****** Problem

******* Creationg many identical objects individually:
	expensive

******* Cloning:
	an alternative

****** Scenario
       Mass production

****** Solution

******* Create a prototypical instance first

******* Simply clone it whenever you need replica

****** Prototype example
******* SkyLark
	#+BEGIN_SRC python :results output
          import copy

          class Prototype:

              def __init__(self):
                  self._objects = {}

              def register_object(self, name, obj):
                  """register an object"""
                  self._objects[name] = obj

              def unregister_object(self, name):
                  """Unregister an object"""
                  del self._objects[name]


              def clone(self, name, **attr):
                  """Clone a registered object and update its attributes"""
                  obj = copy.deepcopy(self._objects.get(name))
                  obj.__dict__.update(attr)
                  return obj


          class Car:

              def __init__(self):
                  self.name = "Skylark"
                  self.color = "Red"
                  self.options = "Ex"

              def __str__(self):
                  return '{} | {} | {}'.format(self.name, self.color, self.options)

          c = Car()
          prototype = Prototype()
          prototype.register_object('skylark', c)

          c1 = prototype.clone('skylark', color='Yellow')
          print(c, '\n', c1)
	#+END_SRC

	#+RESULTS:
	: Skylark | Red | Ex 
	:  Skylark | Yellow | Ex

******* Prototype dispatcher
	#+BEGIN_SRC python :results output
          import copy


          class Prototype(object):
              """
              Default (dummy) values and cloning procedure description there
              """

              value = 'default'

              def clone(self, **attrs):
                  """Clone a prototype and update inner attributes dictionary"""
                  obj = copy.deepcopy(self)
                  obj.__dict__.update(attrs)
                  return obj


          class PrototypeDispatcher(object):
              """
              Accumulates clones by their names
              """

              def __init__(self):
                  self._objects = {}

              def get_objects(self):
                  """Get all objects"""
                  return self._objects

              def register_object(self, name, obj):
                  """Register an object"""
                  self._objects[name] = obj

              def unregister_object(self, name):
                  """Unregister an object"""
                  del self._objects[name]


          dispatcher = PrototypeDispatcher()
          prototype = Prototype()

          d = prototype.clone()
          a = prototype.clone(value='a-value', category='a')
          b = prototype.clone(value='b-value', is_checked=True)
          print(d.value, a.value, b.value)
          dispatcher.register_object('objecta', a)
          dispatcher.register_object('objectb', b)
          dispatcher.register_object('default', d)
          print([{n: p.value} for n, p in dispatcher.get_objects().items()])
	#+END_SRC

	#+RESULTS:
	: default a-value b-value
	: [{'default': 'default'}, {'objecta': 'a-value'}, {'objectb': 'b-value'}]

***** Decorator
****** Problem
******* New features to an existing object
******* Dynamic changes
****** Scenario
       <blink>Hello World!</blink>
****** Solution
******* Functions: objects in Python
******* Built-in decorator feature *@*
****** Decorator example
******* Simple wrapper
	#+BEGIN_SRC python :results output
          from functools import wraps

          def make_blink(function):
                  """Defines the decorator"""

                  #This makes the decorator transparent in terms of its name and docstring


                  #Define the inner function
                  def decorator():
                          #Grab the return value of the function being decorated
                

                          #Add new functionality to the function being decorated
                

                  return decorator

          #Apply the decorator here!

          def hello_world():
                  """Original function! """

                  return "Hello, World!"

          #Check the result of decorating


          #Check if the function name is still the same name of the function being decorated


          #Check if the docstring is still the same as that of the function being decorated



	#+END_SRC
***** Proxy
****** Problem
******* Postpone object creation unless absolutely necessary
******* Find a placeholder
****** Scenario
******* Producer
******* Artist
******* Guest
****** Soluton
******* Clients: interacting with a Proxy
******* Proxy: responsible for creating the resource intensive objects
****** Proxy example
******* Producer time-schedule
	#+BEGIN_SRC python :results output
          import time


          class Producer:
              """Define the 'resource-intensive' object to instantiate!"""

              def produce(self):
                  print("Producer is working hard!")

              def meet(self):
                  print("Producer has time to meet you now!")


          class Proxy:
              """"
              Define the 'relatively less resource-intensive' proxy to 
              instantiate as a middleman
              """

              def __init__(self):
                  self.occupied = 'No'
                  self.producer = None

              def produce(self):
                  """Check if Producer is available"""
                  print("Artist checking if Producer is available ...")

                  if self.occupied == 'No':
                      # If the producer is available, create a producer object!
                      self.producer = Producer()
                      time.sleep(2)

                      # Make the prodcuer meet the guest!
                      self.producer.meet()

                  else:
                      # Otherwise, don't instantiate a producer
                      time.sleep(2)
                      print("Producer is busy!")

          # Instantiate a Proxy
          p = Proxy()

          # Make the proxy: Artist produce until Producer is available
          p.produce()

          # Change the state to 'occupied'
          p.occupied = 'Yes'

          # Make the Producer produce
          p.produce()
	#+END_SRC

	#+RESULTS:
	: Artist checking if Producer is available ...
	: Producer has time to meet you now!
	: Artist checking if Producer is available ...
	: Producer is busy!

***** Adapter
****** Adapter example
******* Korean -> British
	#+BEGIN_SRC python :results output
          class Korean:
              """Korean speaker"""

              def __init__(self):
                  self.name = "Korean"

              def speak_korean(self):
                  return "An-neyong?"


          class British:
              """English speaker"""

              def __init__(self):
                  self.name = "British"

              # Note the different method name here!
              def speak_english(self):
                  return "Hello!"


          class Adapter:
              """This changes the generic method name to individualized method names"""

              def __init__(self, object, **adapted_method):
                  """Change the name of the method"""
                  self._object = object

                  # Add a new dictionary item that establishes the mapping between the generic method name: speak() and the concrete method
                  # For example, speak() will be translated to speak_korean() if the
                  # mapping says so
                  self.__dict__.update(adapted_method)

              def __getattr__(self, attr):
                  """Simply return the rest of attributes!"""
                  return getattr(self._object, attr)

          # List to store speaker objects
          objects = []

          # Create a Korean object
          korean = Korean()

          # Create a British object
          british = British()

          # Append the objects to the objects list
          objects.append(Adapter(korean, speak=korean.speak_korean))
          objects.append(Adapter(british, speak=british.speak_english))


          for obj in objects:
              print("{} says '{}'\n".format(obj.name, obj.speak()))
	#+END_SRC

	#+RESULTS:
	: Korean says 'An-neyong?'
	: 
	: British says 'Hello!'
	: 
******* Target from wkl
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Target(object):
              __metaclass__ = ABCMeta

              @abstractmethod
              def request(self):
                  pass


          class Adaptee(object):

              def special_request(self):
                  print("I am special")


          class Adapter(Target):

              def __init__(self):
                  self.adaptee = Adaptee()

              def request(self):
                  self.adaptee.special_request()


          a = Adapter()
          a.request()
	#+END_SRC

	#+RESULTS:
	: I am special

***** Composite
****** Problem
******* Recursive tree data structure
******* Menu > submenu > sub-submenu
****** Solution
******* Component
******* Child
******* Composite
****** Composites examples
******* Component - Child - Composite
	#+BEGIN_SRC python :results output
          class Component(object):
              """Abstract class"""

              def __init__(self, *args, **kwargs):
                  pass

              def component_function(self):
                  pass


          class Child(Component):  # Inherits from the abstract class, Component
              """Concrete class"""

              def __init__(self, *args, **kwargs):
                  Component.__init__(self, *args, **kwargs)

                  # This is where we store the name of your child item!
                  self.name = args[0]

              def component_function(self):
                  # Print the name of your child item here!
                  print("{}".format(self.name))


          class Composite(Component):  # Inherits from the abstract class, Component
              """Concrete class and maintains the tree recursive structure"""

              def __init__(self, *args, **kwargs):
                  Component.__init__(self, *args, **kwargs)

                  # This is where we store the name of the composite object
                  self.name = args[0]

                  # This is where we keep our child items
                  self.children = []

              def append_child(self, child):
                  """Method to add a new child item"""
                  self.children.append(child)

              def remove_child(self, child):
                  """Method to remove a child item"""
                  self.children.remove(child)

              def component_function(self):

                  # Print the name of the composite object
                  print("{}".format(self.name))

                  # Iterate through the child objects and invoke their component function
                  # printing their names
                  for i in self.children:
                      i.component_function()

          # Build a composite submenu 1
          sub1 = Composite("submenu1")

          # Create a new child sub_submenu 11
          sub11 = Child("sub_submenu 11")
          # Create a new Child sub_submenu 12
          sub12 = Child("sub_submenu 12")

          # Add the sub_submenu 11 to submenu 1
          sub1.append_child(sub11)
          # Add the sub_submenu 12 to submenu 1
          sub1.append_child(sub12)

          # Build a top-level composite menu
          top = Composite("top_menu")

          # Build a submenu 2 that is not a composite
          sub2 = Child("submenu2")

          # Add the composite submenu 1 to the top-level composite menu
          top.append_child(sub1)

          # Add the plain submenu 2 to the top-level composite menu
          top.append_child(sub2)

          # Let's test if our Composite pattern works!
          top.component_function()
	#+END_SRC

	#+RESULTS:
	: top_menu
	: submenu1
	: sub_submenu 11
	: sub_submenu 12
	: submenu2
******* Leaf #1 gennad
	#+BEGIN_SRC python :results output
          class Component(object):

              def __init__(self, *args, **kw):
                  pass

              def component_function(self):
                  pass


          class Leaf(Component):

              def __init__(self, *args, **kw):
                  Component.__init__(self, *args, **kw)

              def component_function(self):
                  print("some function")


          class Composite(Component):

              def __init__(self, *args, **kw):
                  Component.__init__(self, *args, **kw)
                  self.children = []

              def append_child(self, child):
                  self.children.append(child)

              def remove_child(self, child):
                  self.children.remove(child)

              def component_function(self):
                  map(lambda x: x.component_function(), self.children)

          c = Composite()
          l = Leaf()
          l_two = Leaf()
          c.append_child(l)
          c.append_child(l_two)
          c.component_function()
	#+END_SRC

	#+RESULTS:
******* Leaf #2 wkl
	#+BEGIN_SRC python :results output
          class Component(object):

              def __init__(self, name):
                  self.name = name

              def add(self, component):
                  pass

              def remove(self, component):
                  pass

              def display(self, depth):
                  pass


          class Leaf(Component):

              def add(self, component):
                  print("can not add to a leaf")

              def remove(self, component):
                  print("can not remove from a leaf")

              def display(self, depth):
                  print('-' * depth + self.name)


          class Composite(Component):

              def __init__(self, name):
                  super(Composite, self).__init__(name)
                  self.__children = []

              def add(self, component):
                  self.__children.append(component)

              def remove(self, component):
                  self.__children.remove(component)

              def display(self, depth):
                  print('-' * depth + self.name)
                  for c in self.__children:
                      c.display(depth + 2)


          root = Composite("root")
          root.add(Leaf("A"))
          root.add(Leaf("B"))

          comp = Composite("X")
          comp.add(Leaf("XA"))
          comp.add(Leaf("XB"))

          root.add(comp)

          root.display(1)
	#+END_SRC

	#+RESULTS:
	: -root
	: ---A
	: ---B
	: ---X
	: -----XA
	: -----XB

******* Person composing
	#+BEGIN_SRC python :results output
          class Head(object):

              def __init__(self, eye_color, hair_color):
                  self.eye_color = eye_color
                  self.hair_color = hair_color


          class Body(object):

              def __init__(self, weight):
                  self.weight = weight


          class Person(object):

              def __init__(self, eye_color, hair_color, weight):
                  self.head = Head(eye_color, hair_color)
                  self.body = Body(weight)

              def print_eye_color(self):
                  print(self.head.eye_color)

          bucky = Person('blue', 'blonde', 160)
          bucky.print_eye_color()
	#+END_SRC

	#+RESULTS:
	: blue

***** Bridge
****** Problem
******* Two unrelated, parallel, or orthogonal abstractions
******* One: implementation-specific
******* The other: implementation-independent
****** Scenario
****** Solution
******* Separate the abstractions into two different class hierarchies
****** Bridge examples
******* Circle and shapes
	#+BEGIN_SRC python :results output
          # ConcreteImplementor 1/2
          class DrawingAPI1(object):

              def draw_circle(self, x, y, radius):
                  print('API1.circle at {}:{} radius {}'.format(x, y, radius))


          # ConcreteImplementor 2/2
          class DrawingAPI2(object):

              def draw_circle(self, x, y, radius):
                  print('API2.circle at {}:{} radius {}'.format(x, y, radius))


          # Refined Abstraction
          class CircleShape(object):

              def __init__(self, x, y, radius, drawing_api):
                  self._x = x
                  self._y = y
                  self._radius = radius
                  self._drawing_api = drawing_api

              # low-level i.e. Implementation specific
              def draw(self):
                  self._drawing_api.draw_circle(self._x, self._y, self._radius)

              # high-level i.e. Abstraction specific
              def scale(self, pct):
                  self._radius *= pct


          shapes = (CircleShape(1, 2, 3, DrawingAPI1()),
                    CircleShape(5, 7, 11, DrawingAPI2()))

          for shape in shapes:
              shape.scale(2.5)
              shape.draw()
	#+END_SRC

	#+RESULTS:
	: API1.circle at 1:2 radius 7.5
	: API2.circle at 5:7 radius 27.5
******* Implementor and ConcreteImplementor
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Implementor(object):
              __metaclass__ = ABCMeta

              @abstractmethod
              def operation(self):
                  pass


          class ConcreteImplementorA(Implementor):

              def operation(self):
                  print("plan A")


          class ConcreteImplementorB(Implementor):

              def operation(self):
                  print("plan B")


          class Abstraction(object):

              def __init__(self, implementor=None):
                  if implementor is not None:
                      self.__implementor = implementor

              @property
              def implementor(self):
                  return self.__implementor

              @implementor.setter
              def implementor(self, value):
                  self.__implementor = value

              def operation(self):
                  self.__implementor.operation()


          class RefinedAbstraction(Abstraction):
              pass


          ab = RefinedAbstraction()

          ab.implementor = ConcreteImplementorA()
          ab.operation()

          ab.implementor = ConcreteImplementorB()
          ab.operation()
	#+END_SRC

	#+RESULTS:
	: plan A
	: plan B
******* Linux vs Windows
	#+BEGIN_SRC python :results output
          class AbstractInterface:
              """ Target interface.
              This is the target interface, that clients use.
              """


          def someFunctionality(self):
              raise NotImplemented()


          class Bridge(AbstractInterface):
              """ Bridge class.
              This class forms a bridge between the target
              interface and background implementation.
              """


              def __init__(self):
                  self.__implementation = None


          class UseCase1(Bridge):
              """ Variant of the target interface.
              This is a variant of the target Abstract interface.
              It can do something little differently and it can
              also use various background implementations through
              the bridge.
              """


              def __init__(self, implementation):
                  self.__implementation = implementation


              def someFunctionality(self):
                  print("UseCase1: ",
			self.__implementation.anotherFunctionality())


          class UseCase2(Bridge):


              def __init__(self, implementation):
                  self.__implementation = implementation


              def someFunctionality(self):
                  print("UseCase2: ",
			self.__implementation.anotherFunctionality())


          class ImplementationInterface:
              """ Interface for the background implementation.
              This class defines how the Bridge communicates
              with various background implementations.
              """


              def anotherFunctionality(self):
                  raise NotImplemented


          class Linux(ImplementationInterface):
              """ Concrete background implementation.
              A variant of background implementation, in this
              case for Linux!
              """


              def anotherFunctionality(self):
                  print("Linux!")


          class Windows(ImplementationInterface):


              def anotherFunctionality(self):
                  print("Windows.")



          linux = Linux()
          windows = Windows()

          # Couple of variants under a couple
          # of operating systems.
          useCase = UseCase1(linux)
          useCase.someFunctionality()

          useCase = UseCase1(windows)
          useCase.someFunctionality()

          useCase = UseCase2(linux)
          useCase.someFunctionality()

          useCase = UseCase2(windows)
          useCase.someFunctionality()
	#+END_SRC

	#+RESULTS:
	: Linux!
	: UseCase1:  None
	: Windows.
	: UseCase1:  None
	: Linux!
	: UseCase2:  None
	: Windows.
	: UseCase2:  None

***** Observer

****** Problem

******* Subjects to be monitored

******* Observers to be notified

****** Scenario

******* Core temperatures
	Reactors at power plant

******* Registered observers

****** Solution

******* Subject: abstract class
	- Attach
	- Detach
	- Notify
******* Concrete subjects
****** Observer examples
******* Core temperatures
	#+BEGIN_SRC python :results output
          class Subject(object):  # Represents what is being 'observed'

              def __init__(self):
                  self._observers = []  # This where references to all the observers are being kept
                  # Note that this is a one-to-many relationship: there will be one
                  # subject to be observed by multiple _observers

              def attach(self, observer):
                  if observer not in self._observers:  # If the observer is not already in the observers list
                      self._observers.append(observer)  # append the observer to the list

              def detach(self, observer):  # Simply remove the observer
                  try:
                      self._observers.remove(observer)
                  except ValueError:
                      pass

              def notify(self, modifier=None):
                  for observer in self._observers:  # For all the observers in the list
                      if modifier != observer:  # Don't notify the observer who is actually updating the temperature
                          observer.update(self)  # Alert the observers!


          class Core(Subject):  # Inherits from the Subject class

              def __init__(self, name=""):
                  Subject.__init__(self)
                  self._name = name  # Set the name of the core
                  self._temp = 0  # Initialize the temperature of the core

              @property  # Getter that gets the core temperature
              def temp(self):
                  return self._temp

              @temp.setter  # Setter that sets the core temperature
              def temp(self, temp):
                  self._temp = temp
                  self.notify()  # Notify the observers whenever somebody changes the core temperature


          class TempViewer:

              def update(self, subject):  # Alert method that is invoked when the notify() method in a concrete subject is invoked
                  print("Temperature Viewer: {} has Temperature {}".format(
                      subject._name, subject._temp))

          # Let's create our subjects
          c1 = Core("Core 1")
          c2 = Core("Core 2")

          # Let's create our observers
          v1 = TempViewer()
          v2 = TempViewer()

          # Let's attach our observers to the first core
          c1.attach(v1)
          c1.attach(v2)

          # Let's change the temperature of our first core
          c1.temp = 80
          c1.temp = 90
	#+END_SRC

	#+RESULTS:
	: Temperature Viewer: Core 1 has Temperature 80
	: Temperature Viewer: Core 1 has Temperature 80
	: Temperature Viewer: Core 1 has Temperature 90
	: Temperature Viewer: Core 1 has Temperature 90

******* Hex and decimal observers
	#+BEGIN_SRC python :results output
          class Subject(object):

              def __init__(self):
                  self._observers = []

              def attach(self, observer):
                  if observer not in self._observers:
                      self._observers.append(observer)

              def detach(self, observer):
                  try:
                      self._observers.remove(observer)
                  except ValueError:
                      pass

              def notify(self, modifier=None):
                  for observer in self._observers:
                      if modifier != observer:
                          observer.update(self)


          # Example usage
          class Data(Subject):

              def __init__(self, name=''):
                  Subject.__init__(self)
                  self.name = name
                  self._data = 0

              @property
              def data(self):
                  return self._data

              @data.setter
              def data(self, value):
                  self._data = value
                  self.notify()


          class HexViewer:

              def update(self, subject):
                  print('HexViewer: Subject %s has data 0x%x' %
			(subject.name, subject.data))


          class DecimalViewer:

              def update(self, subject):
                  print('DecimalViewer: Subject %s has data %d' %
			(subject.name, subject.data))


          # Example usage...
          data1 = Data('Data 1')
          data2 = Data('Data 2')
          view1 = DecimalViewer()
          view2 = HexViewer()
          data1.attach(view1)
          data1.attach(view2)
          data2.attach(view2)
          data2.attach(view1)

          print("Setting Data 1 = 10")
          data1.data = 10
          print("Setting Data 2 = 15")
          data2.data = 15
          print("Setting Data 1 = 3")
          data1.data = 3
          print("Setting Data 2 = 5")
          data2.data = 5
          print("Detach HexViewer from data1 and data2.")
          data1.detach(view2)
          data2.detach(view2)
          print("Setting Data 1 = 10")
          data1.data = 10
          print("Setting Data 2 = 15")
          data2.data = 15
	#+END_SRC

	#+RESULTS:
	#+begin_example
	Setting Data 1 = 10
	DecimalViewer: Subject Data 1 has data 10
	HexViewer: Subject Data 1 has data 0xa
	Setting Data 2 = 15
	HexViewer: Subject Data 2 has data 0xf
	DecimalViewer: Subject Data 2 has data 15
	Setting Data 1 = 3
	DecimalViewer: Subject Data 1 has data 3
	HexViewer: Subject Data 1 has data 0x3
	Setting Data 2 = 5
	HexViewer: Subject Data 2 has data 0x5
	DecimalViewer: Subject Data 2 has data 5
	Detach HexViewer from data1 and data2.
	Setting Data 1 = 10
	DecimalViewer: Subject Data 1 has data 10
	Setting Data 2 = 15
	DecimalViewer: Subject Data 2 has data 15
  #+end_example

******* Publisher and Subscriber
	#+BEGIN_SRC python :results output
          class Publisher(object):
              users = set()

              def register(self, user):
                  self.users.add(user)

              def unregister(self, user):
                  self.users.discard(user)

              def send_notifications(self, message):
                  for user in self.users:
                      user.notify(message)


          class Subscriber(object):

              def __init__(self, username):
                  self.username = username

              def notify(self, message):
                  print(self.username + ' received message: ' + message)

          publisher = Publisher()

          # Create observers that will receive notifications
          bucky = Subscriber('Bucky')
          sally = Subscriber('Sally')
          publisher.register(bucky)
          publisher.register(sally)

          # Notifications are sent to every observer (subscriber)
          publisher.send_notifications('We updated the website')
          publisher.send_notifications('Make sure to add a profile picture')
	#+END_SRC

	#+RESULTS:
	: Sally received message: We updated the website
	: Bucky received message: We updated the website
	: Sally received message: Make sure to add a profile picture
	: Bucky received message: Make sure to add a profile picture

******* Abstract observer
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Subject(object):

              def __init__(self):
                  self.__observers = []

              def attach(self, observer):
                  self.__observers.append(observer)

              def detach(self, observer):
                  self.__observers.remove(observer)

              def notify(self):
                  for o in self.__observers:
                      o.update()


          class ConcreteSubject(Subject):

              @property
              def status(self):
                  return self.__status

              @status.setter
              def status(self, value):
                  self.__status = value


          class Observer(metaclass=ABCMeta):

              @abstractmethod
              def update(self):
                  pass


          class ConcreteObserver(Observer):

              def __init__(self, subject, name):
                  self.subject = subject
                  self.name = name
                  self.objserver_staus = None

              def update(self):
                  self.objserver_staus = self.subject.status
                  print("the observer: %s status change to %s" %
			(self.name, self.objserver_staus))


          s = ConcreteSubject()

          s.attach(ConcreteObserver(s, "X"))
          s.attach(ConcreteObserver(s, "Y"))
          s.attach(ConcreteObserver(s, "Z"))

          s.status = "A"
          s.notify()

          s.status = "B"
          s.notify()
	#+END_SRC

	#+RESULTS:
	: the observer: X status change to A
	: the observer: Y status change to A
	: the observer: Z status change to A
	: the observer: X status change to B
	: the observer: Y status change to B
	: the observer: Z status change to B

***** Visitor

****** Problem
******* New operations
******* Existing classes
******* All dynamically done
****** Scenario
******* House class
******* HVAC specialist
	Visitor type 1
******* Electrician
	Visitor type 2
****** Solution
******* New operations
******* Various elements of an existing class hierarchy
****** Visitor examples
******* Electrician vs HVAC
	#+BEGIN_SRC python :results output
          class House(object):  # The class being visited

              def accept(self, visitor):
                  """Interface to accept a visitor"""
                  visitor.visit(self)  # Triggers the visiting operation!

              def work_on_hvac(self, hvac_specialist):
                  # Note that we now have a reference to the HVAC specialist object in
                  # the house object!
                  print(self, "worked on by", hvac_specialist)

              def work_on_electricity(self, electrician):
                  # Note that we now have a reference to the electrician object in the
                  # house object!
                  print(self, "worked on by", electrician)

              def __str__(self):
                  """Simply return the class name when the House object is printed"""
                  return self.__class__.__name__


          class Visitor(object):
              """Abstract visitor"""

              def __str__(self):
                  """Simply return the class name when the Visitor object is printed"""
                  return self.__class__.__name__


          class HvacSpecialist(Visitor):  # Inherits from the parent class, Visitor
              """Concrete visitor: HVAC specialist"""

              def visit(self, house):
                  # Note that the visitor now has a reference to the house object
                  house.work_on_hvac(self)


          class Electrician(Visitor):  # Inherits from the parent class, Visitor
              """Concrete visitor: electrician"""

              def visit(self, house):
                  # Note that the visitor now has a reference to the house object
                  house.work_on_electricity(self)

          # Create an HVAC specialist
          first_visitor = HvacSpecialist()
          # Create an electrician
          second_visitor = Electrician()

          # Create a house
          home = House()

          # Let the house accept the HVAC specialist and work on the house by
          # invoking the visit() method
          home.accept(first_visitor)

          # Let the house accept the electrician and work on the house by invoking
          # the visit() method
          home.accept(second_visitor)
	#+END_SRC

	#+RESULTS:
	: House worked on by HvacSpecialist
	: House worked on by Electrician
******* Object structure visitor
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Visitor(metaclass=ABCMeta):

              @abstractmethod
              def visitor_concrete_element_a(self, concrete_element_a):
                  pass

              @abstractmethod
              def visitor_concrete_element_b(self, concrete_element_b):
                  pass


          class ConcreteVisitor1(Visitor):

              def visitor_concrete_element_a(self, concrete_element_a):
                  print("%s visit %s" % (self.__class__.__name__,
					 concrete_element_a.__class__.__name__))

              def visitor_concrete_element_b(self, concrete_element_b):
                  print("%s visit %s" % (self.__class__.__name__,
					 concrete_element_b.__class__.__name__))


          class ConcreteVisitor2(Visitor):

              def visitor_concrete_element_a(self, concrete_element_a):
                  print("%s visit %s" % (self.__class__.__name__,
					 concrete_element_a.__class__.__name__))

              def visitor_concrete_element_b(self, concrete_element_b):
                  print("%s visit %s" % (self.__class__.__name__,
					 concrete_element_b.__class__.__name__))


          class Element(metaclass=ABCMeta):

              @abstractmethod
              def accept(self, visitor):
                  pass


          class ConcreteElementA(Element):

              def accept(self, visitor):
                  visitor.visitor_concrete_element_a(self)


          class ConcreteElementB(Element):

              def accept(self, visitor):
                  visitor.visitor_concrete_element_b(self)


          class ObjectStructure(object):

              def __init__(self):
                  self.__elements = []

              def attach(self, element):
                  self.__elements.append(element)

              def detach(self, element):
                  self.__element.remove(element)

              def accept(self, visitor):
                  for e in self.__elements:
                      e.accept(visitor)


          os = ObjectStructure()

          os.attach(ConcreteElementA())
          os.attach(ConcreteElementB())

          v1 = ConcreteVisitor1()
          os.accept(v1)

          v2 = ConcreteVisitor2()
          os.accept(v2)
	#+END_SRC

	#+RESULTS:
	: ConcreteVisitor1 visit ConcreteElementA
	: ConcreteVisitor1 visit ConcreteElementB
	: ConcreteVisitor2 visit ConcreteElementA
	: ConcreteVisitor2 visit ConcreteElementB

******* Nodes inspector
	#+BEGIN_SRC python :results output
          class Node(object):
              pass


          class A(Node):
              pass


          class B(Node):
              pass


          class C(A, B):
              pass


          class Inspector(object):

              def visit(self, node, *args, **kwargs):
                  method = None
                  for cls in node.__class__.__mro__:
                      method_name = 'visit_' + cls.__name__
                      method = getattr(self, method_name, None)
                      if method:
                          break

                  if not method:
                      method = self.generic_visit
                  return method(node, *args, **kwargs)

              def generic_visit(self, node, *args, **kwargs):
                  print('generic_visit ' + node.__class__.__name__)

              def visit_B(self, node, *args, **kwargs):
                  print('visit_B ' + node.__class__.__name__)

          a = A()
          b = B()
          c = C()
          inspector = Inspector()
          inspector.visit(a)
          inspector.visit(b)
          inspector.visit(c)
	#+END_SRC

	#+RESULTS:
	: generic_visit A
	: visit_B B
	: visit_B C

***** Iterator

****** Problem
       The traversal interfaces of an aggregate object -
       getting overcrowded

****** Solution

******* Isolation

******* Interface

******* Tracking

******* Recommendation

****** Iterator example

******* German numbers
	#+BEGIN_SRC python :results output
          def count_to(count):
              numbers_in_german = ["eins", "zwei", "drei", "vier", "funf"]
              for number in numbers_in_german:
                  yield number

          # Let's test the generator returned by our iterator
          for num in count_to(3):
              print("{}".format(num))

          for num in count_to(4):
              print("{}".format(num))
	#+END_SRC

	#+RESULTS:
	#+begin_example
	eins
	zwei
	drei
	vier
	funf
	eins
	zwei
	drei
	vier
	funf
  #+end_example

******* Custom iteration implementation
	#+BEGIN_SRC python :results output
          from abc import ABCMeta, abstractmethod


          class Iterator(metaclass=ABCMeta):

              @abstractmethod
              def first(self):
                  pass

              @abstractmethod
              def next(self):
                  pass

              @abstractmethod
              def is_done(self):
                  pass

              @abstractmethod
              def current_item(self):
                  pass


          class CustomIterator(Iterator):

              def __init__(self, iterable):
                  self.__iterable = iterable
                  self.current = 0

              def first(self):
                  return self.__iterable[0]

              def next(self):
                  result = None
                  self.current += 1
                  if self.current < len(self.__iterable):
                      result = self.__iterable[self.current]
                  return result

              def is_done(self):
                  return self.current >= len(self.__iterable)

              def current_item(self):
                  return self.__iterable[self.current]


          sample_iterable = ['first', 'second', 'third']

          it = CustomIterator(sample_iterable)
          print('First item in the sample iterable initially is a string:', it.first())
          while not it.is_done():
              print("current:", it.current_item())
              it.next()
          print('First item in the sample iterable remains be a string:', it.first())
	#+END_SRC

	#+RESULTS:
	: First item in the sample iterable initially is a string: first
	: current: first
	: current: second
	: current: third
	: First item in the sample iterable remains be a string: first

***** Strategy
****** Problem
       Need for dynamically changing the behavior
       of an object
****** Scenario
       - Abstract Strategy class with default set of behaviors
       - Concrete Strategy classes with new behaviors
****** Solution
       The =types= module in Python
****** Strategy example
***** Chain of responsibility
****** Chain of responsibility example
***** Consistency
***** Other qualities
* GNU Octave                                                         :octave:
** Simple examples
*** Data output
    #+BEGIN_SRC octave :eval noexport :results output
      pi
    #+END_SRC

    #+RESULTS:
    : ans =  3.1416
*** Ariphmetics
    #+BEGIN_SRC octave :exports both :eval noexport :results output :session intro
    A = [ 1, 1, 2; 3, 5, 8; 13, 21, 34 ]
    B = rand (3, 2); % semicolon supress output
    B
    B = rand (3, 2)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    A =

        1    1    2
        3    5    8
       13   21   34
    B =

       0.90582   0.69117
       0.59903   0.45171
       0.45883   0.86045
    B =

       0.35979   0.93463
       0.26882   0.16515
       0.90550   0.54937
#+end_example
*** Matrix ariphmetics
    #+BEGIN_SRC octave :eval noexport :exports both :results output :session intro
    2 * A
    #+END_SRC

    #+RESULTS:
    : ans =
    : 
    :     2    2    4
    :     6   10   16
    :    26   42   68

    #+BEGIN_SRC octave :eval noexport :exports both :results output :session intro
    A * B
    #+END_SRC

    #+RESULTS:
    : ans =
    : 
    :     2.4396    2.1985
    :     9.6674    8.0246
    :    41.1093   34.2970

    #+BEGIN_SRC octave :eval noexport :exports both :results output :session intro
    A' * A
    #+END_SRC

    #+RESULTS:
    : ans =
    : 
    :     179    289    468
    :     289    467    756
    :     468    756   1224
** Data types
   #+BEGIN_SRC octave :results output
   typeinfo (7.7)
   isa (7.3, "float") % numeric, integer
   #+END_SRC

   #+RESULTS:
   : ans = scalar
   : ans =  1
*** Matrices
    #+BEGIN_SRC octave :results output
    a = [1, 2; 3, 4]
    [ a, a ]
    a' % transpose operator
    rand (3)
    rand(2,10)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    a =

       1   2
       3   4

    ans =

       1   2   1   2
       3   4   3   4

    ans =

       1   3
       2   4

    ans =

       0.755795   0.501541   0.506929
       0.986349   0.782988   0.530405
       0.423253   0.105123   0.068950

    ans =

     Columns 1 through 8:

       0.38564   0.96325   0.64716   0.71333   0.88665   0.63188   0.28302   0.64662
       0.15891   0.83753   0.72418   0.39334   0.54333   0.82450   0.10333   0.53365

     Columns 9 and 10:

       0.35828   0.99565
       0.95491   0.46965

#+end_example
*** Timing
    #+BEGIN_SRC octave :results output
    t1 = clock ();
    pause (3)
    t2 = clock();
    etime (t2,t1)
    #+END_SRC

    #+RESULTS:
    : ans =  3.0013

* AI
** Neural Networks for Machine Learning
*** Why do we need machine learning?
    It is very hard to write programs that solve problems like
    recognizing a three-dimensional object from a novel viewpoint in
    new lighting conditions in a cluttered scene.

    - We don't know what program to write because we don't know
      how its done in our brain;
    - Even if we had a good idea about how to do it, the
      program might be horrendously complicated.


    It is hard to write a program to compute the probability that a
    credit card transaction is fraudulent.

    - There may not be any rules that are both simple and reliable
      We need to combine a very large number of weak rules.
    - Fraud is a moving target. The program needs to /keep changing/


    Instead of writing a program by hand for each specific task,
    we collect lots of examples that specify the correct output
    for a given input.
    A machine learning algorithm then takes these examples
    and produces a program that does the job.

    - The program produced by the /learning algorithm/ may look
      very different from a typical hand-written program. It may
      contain millions of numbers.
    - If we do it right, the program works for new cases as well
      as the ones we trained it on.
    - If the data changes the program can change too by training
      on the new data.

    Massive amounts of computations are now cheaper than paying
    someone to write a task-specific program.

    Some examples of tasks best solved by learning

    Recognizing patterns:
    - Objects in real scenes
    - Facial identities or facial expressions
    - Spoken words


    Recognizing anomalies
    - Unusual sequences of credit card transactions
    - Unusual patterns of sensor readings in a nuclear power plant


    Prediction
    - Future stock prices or currency exchange rates
    - Which movies will a person like?


    A standard example of machine learning is [[https://en.wikipedia.org/wiki/MNIST_database][MNIST database]].

* Elaborate general coding grit                                      :coding:
** CodeWars competition
** [[https://drive.google.com/file/d/0BzoOGnxA0v1FSkFNSXg4MWVpTkE/view?usp%3Dsharing][Crack Coding Interview]]
*** [[http://careercup.com/][Additional information]] on website
*** Programming design questions
**** Software design pattern
     is a general reusable solution to a commonly occurring problem within
     a given context in software design.
**** Singleton pattern
     is a design pattern that restricts the instantiation of a class
     to one object.
**** Already utilized patterns

** [[https://www.hackerrank.com/feed][HackerRank.com]] exercises

* Discover Git work-flow 			:Git:
** Git VC theoretical basement			:theory:
*** Version Control with Git			    :book:Matthew_McCullough:
    #+NAME: VCwG
**** Preface
***** Audience
***** Assumed Framework
***** Book Layout and Omissions
      #+BEGIN_QUOTE
      The concepts covered in Chapter 4 are essential for a firm grasp
      on Gitâs object model.
      #+END_QUOTE
***** Conventions Used in This Book
***** Using Code Examples
***** SafariÂ® Books Online
***** How to Contact Us
***** Acknowledgments
***** Attributions
**** Introduction
***** Background
***** The Birth of Git
***** Precedents
***** Timeline
***** Whatâs in a Name?
**** Installing Git
**** Getting Started
**** Basic Git Concepts
***** Basic Concepts
      Keeping track of multiple repositories may seem like a /daunting/
      prospect, but the fundamentals you learn in this chapter apply
      just the same.
****** Repositories
       Database containing all the information needed to retain and manage
       the revisions and history of a project.
****** Git Object Types
       - blobs
       - trees
       - commits
       - tags
****** Index
****** Content-Addressable Names
****** Git Tracks Content
****** Pathname Versus Content
****** Pack Files
***** Object Store Pictures
***** Git Concepts at Work
****** Inside the .git Directory
****** Objects, Hashes, and Blobs
****** Files and Trees
****** A Note on Gitâs Use of SHA1
****** Tree Hierarchies
****** Commits

**** File Management and the Index
**** Commits
**** Branches
**** Diffs
**** Merges
**** Altering Commits
**** The Stash and the Reflog
**** Remote Repositories
**** Repository Management
**** Patches
**** Hooks
**** Combining Projects
**** Submodule Best Practices
**** Using Git with Subversion Repositories
**** Advanced Manipulations
**** Tips, Tricks, and Techniques
**** Git and GitHub
*** Git Essential Training:					    :essence:
**** Introduction
**** What is Git
**** Installing Git
**** Getting Started
**** Git Concepts and Architecture
***** Exploring the three-trees architecture
	- Two-trees architecture close-up:
       	  + repository
       	  + working copy
	- Three-trees
       	  + staging index
	    /as a middle-ware/ between
***** The Git work-flow
	- change working copy
	- add these changes to staging index
	- commit they into repository
***** Using hash values (SHA-1)
	- Git generates a checksum for each change set
       	  - checksum algorithms convert data into a simple number
       	  - same data always equals same checksum
	- Data integrity is fundamental
       	  - changing data would change checksum
	- Git uses SHA-1 hash algorithm to create checksums
       	  - 40-character hexadecimal string (0-9, a-f)
***** Working with the HEAD pointer
      *HEAD*
      - pointer to *tip* of current branch in repository
      - last state of repository, what was last checked out
      - points to parent of next commit
	/where writing commits takes place/
**** Making Changes to Files
***** Adding files
***** Editing files
***** Viewing changes with diff
      git diff
***** Viewing only staged changes
      git diff --staged
***** Deleting files
      git rm
***** Moving and renaming files
      git mv old_name.txt new_name.txt
**** Undoing Changes
***** Undoing working directory changes
     ~git checkout -- index.html~
***** Unstaging files
     ~git reset HEAD resources.html~
***** Amending commits
     ~git commit --amend -m 'The last commit edit by join the new one'~
     /the same command to change commit message only/
***** Retrieving old versions
     ~git checkout <commit_id> -- <filename>~
***** Reverting a commit
     /mirror changes and invert it/
     ~git revert <commit_id>~
***** Using reset to undo commits
      âxâ     (âmagit-resetâ)

      Reset the head and index to some commit read from the user =and=
      defaulting to the *commit at point*.  The working tree is kept as-is.
      With a prefix argument also reset the working tree.

***** Demonstrating a soft reset
     #+BEGIN_QUOTE
     Just rewind back in time
     #+END_QUOTE
     ~git reset --soft <commit_id>~
     - changes are allocated into the staging index
     - it's possible to:
       ~git reset --soft <recent_id>~
       ~git reset --soft HEAD^~
     - Like a *Time Machine*
     - Moves HEAD pointer among commits
     - Safest solution
***** Demonstrating a mixed reset
     #+BEGIN_QUOTE
     Same as the previous one except that changes move into
     working tree (not staging index)
     #+END_QUOTE
     - Hence it handy to edit it up one more time
***** Demonstrating a hard reset
     - Move project state backward only
     - Leaves no traces of unnecessary commits
     - Really dangerous option *be aware*
***** Removing un-tracked files
     ~git clean~
     thrown away all unstaged files at once
**** Ignoring Files
***** Using .gitignore files
***** Understanding what to ignore
***** Ignoring files globally
***** Ignoring tracked files
     - add to .gitignore
     - tell git to stop tracking it
       ~git rm --cached <filename>~
       /removes the <file> out from staging index/
***** Tracking empty directories
**** Branching
***** Branching overview
***** Viewing and creating branches
***** Switching branches
***** Creating and switching branches
***** Switching branches with uncommitted changes
***** Comparing branches
     ~git diff <branch_1>..<branch_2>~
     ~git diff --color-words <branch_1>..<branch_2>^~
     ~git branch --merged~
***** Renaming branches
     ~git branch -m <old_b_name> <new_b_name>~
***** Deleting branches
     ~git branch -d <b_name>~
***** Configuring the command prompt to show the branch
**** Merging Branches
***** Merging code
***** Using fast-forward merge vs. true merge
***** Merging conflicts
***** Resolving merge conflicts
****** Abort
       ~git merge --abort~
****** Resolve the conflict manually
       It is necessary to test how to resolve it
******* Switch on custom branch
******* Make changes
	{this changes from the custom branch}
******* Commit changes
******* Return on master branch
******* Change the same hunk of code
******* Commit this changes
******* Merge branches
****** Use a merge tool
       ~git mergetool <Enter>~
***** Exploring strategies to reduce merge conflicts
****** keep lines short
****** keep commits small and focused
****** beware stray edits to whitespace
       - spaces;
       - tab;
       - line returns
****** merge often
****** track changes to master

**** Stashing Changes
     Special fourth area in git repository

***** Save changes
      ~git stash save "message~

***** View stashed changes
      ~git stash list~
      Changes in stash available to review from all branches
      ~git stash show [-p(atch)] stash@{0}~

***** Retrieve changes out from stash
      ~git stash pop~ removes stashed changes out from stash
      ~git stash apply~ leaves a copy in the stash

***** Deleting stashed changes
      ~git stash drop stash@{0}~
      ~git stash clear~ delete all existing stashed changes

**** Remotes
     The remote branch *master* mirrored by the local
     *origin/master*
     and it's possible to sync with your custom-made
     branch with the same name *master*

     ~git remote -v~
     ~git remote add~
     ~git remote add <shortname> <url>~
     etc.

     ~git branch -r(emotes)~
     ~git branch -a(ll)~
    
**** Tools and Next Steps
     ~git config --global credential.helper 'cache --timeout=3600'~
**** Conclusion

** Original implementation			:practice:
   [[https://github.com/petervanderdoes/gitflow-avh][Git-Flow (AVH edition)]]

** MaGit plugin					:efficiency:
   Git-Flow [[https://github.com/jtatarik/magit-gitflow][plugin]] for magit.el

* Open-Source contributing			:OpenSource:
** Fork useful projects				:forks:
*** Manual how to fork
**** Forking itself
     Just by pushing the button on useful project
     page. It's enough to get its fork in your
     repo.
**** Sync your fork
     Sometimes in fork's ancestor occure changes.
     Exactly to pull it on your local version of
     repo do [[https://help.github.com/articles/syncing-a-fork/][this]] or something like this:
     #+BEGIN_SRC sh
     git remote -v # check up does upstream configured ever
     # add it
     git remote add upstream https://github.com/mikeckennedy/talk-python-transcripts.git
     git remote -v
     git fetch upstream
     git checkout master
     git merge upstream/master     
     #+END_SRC
     
*** EffectivePython
    [[/usr/local/share/DVCS/lib/Python/edu/effectivepython][fork]]
*** Python-Patterns
    [[/usr/local/share/DVCS/lib/Python/edu/python-patterns][fork]]
*** Talk Python to Me
    [[file:/usr/local/share/DVCS/talk-python-transcripts/][fork]]
*** [[https://github.com/faif/python-patterns][python-patterns]]
** Evaluate it in educational purposes
** Open pull request

  https://github.com/milkypostman/melpa

* Publish your posts out from org-mode
** at Github pages at [[http://0--key.github.io/][this address]]
** Jekyll full-fledged [[https://acaird.github.io/computers/2013/05/24/blogging-with-org-and-git][solution]] based on this [[https://github.com/plusjade/jekyll-bootstrap.git][template]]
*** Guides how to blogging with Emacs			       :html:publish:
**** Scientific usage [[illustration][sample]] proves that it might be awesome

       *Installation Guide*

       Evaluate expression below to determine where org expects
       to seek its libraries:

       #+BEGIN_SRC elisp
         (expand-file-name
         "ditaa.jar"
         (file-name-as-directory
         (expand-file-name
         "scripts"
         (file-name-as-directory
         (expand-file-name
         "../contrib"
         (file-name-directory (org-find-library-dir "org")))))))
       #+END_SRC

       #+RESULTS:
       : /home/antony/.emacs.d/elpa/contrib/scripts/ditaa.jar

       [[http://netix.dl.sourceforge.net/project/ditaa/ditaa/0.9/ditaa0_9.zip][Download]], unzip, rename and locate into above path
       Add ~(ditaa .t)~ into org-babel-load-languages

       *Test it*:
       #+BEGIN_SRC ditaa :file ./color_test.png
         /----\ /----\
         |c33F| |cC02|
         |    | |    |
         \----/ \----/

         /----\ /----\
         |c1FF| |c1AB|
         |    | |    |
         \----/ \----/
       #+END_SRC

       #+RESULTS:
       [[file:./color_test.png]]

       #+BEGIN_SRC ditaa :file ./second_color_test.png
         Color codes
         /-------------+-------------\
         |cRED RED     |cBLU BLU     |
         +-------------+-------------+
         |cGRE GRE     |cPNK PNK     |
         +-------------+-------------+
         |cBLK BLK     |cYEL YEL     |
         \-------------+-------------/


         New string there
       #+END_SRC

       #+RESULTS:
       [[file:./second_color_test.png]]

       #+BEGIN_SRC plantuml :file tryout.png
       Alice -> Bob: synchronous call
       Alice ->> Bob: asynchronous call
       #+END_SRC

       #+RESULTS:
       [[file:tryout.png]]

       #+BEGIN_SRC plantuml :file comp.png
       package "Some Group" {
       HTTP - [First Component]
       [Another Component]
       }

       node "Other Groups" {
       FTP - [Second Component]
       [First Component] --> FTP
       }

       cloud {
       [Example 1]
       }


       database "MySql" {
       folder "This is my folder" {
       [Folder 3]
       }
       frame "Foo" {
       [Frame 4]
       }
       }


       [Another Component] --> [Example 1]
       [Example 1] --> [Folder 3]
       [Folder 3] --> [Frame 4]
       #+END_SRC

       #+RESULTS:
       [[file:comp.png]]

       #+BEGIN_SRC plantuml :file gradient.png
       skinparam backgroundcolor AntiqueWhite/Gold
       skinparam classBackgroundColor Wheat|CornflowerBlue

       class Foo #red-green
       note left of Foo #blue\9932CC
       this is my
       note on this class
       end note

       package example #GreenYellow/LightGoldenRodYellow {
       class Dummy
       }
       #+END_SRC

       #+RESULTS:
       [[file:gradient.png]]

**** Org-mode template for *technical specification documents* &
       [[https://github.com/thi-ng/org-spec][HTML publishing]]

**** One [[https://github.com/LeslieZhu/OrgNote][another]] implementation *OrgNote* nice, but =without RSS=

** Make a separate repo for blog's org-sources

