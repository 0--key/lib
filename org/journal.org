
* 2016
** 2016-03 March
*** 2016-03-24 Thursday
**** Next capture
   Entered on [2016-03-24 Thu 18:25]
	Before we give the formal description of template definitions, let's
     look at an example.  Say you would like to use one template to create
     general TODO entries, and you want to put these entries under the
     heading `Tasks' in your file `~/org/gtd.org'.  Also, a date tree in the
     file `journal.org' should capture journal entries.  A possible
     configuration would look like:
     [[info:org#Capture%20templates][info:org#Capture templates]]
**** And the next one
   Entered on [2016-03-24 Thu 18:26]
     If you then press `C-c c t', Org will prepare the template for you like
     this:
	  * TODO
            [[file:LINK TO WHERE YOU INITIATED CAPTURE]]
  
     During expansion of the template, `%a' has been replaced by a link to
     the location from where you called the capture command.  This can be
     extremely useful for deriving tasks from emails, for example.  You fill
     in the task definition, press `C-c C-c' and Org returns you to the same
     place where you started the capture process.
     [[info:org#Capture%20templates][info:org#Capture templates]]

*** 2016-03-26 Saturday
** 2016-06 June
*** 2016-06-28 Tuesday
**** Tortoise and hare
   Entered on [2016-06-28 Tue 12:42]
     As the tortoise said to the hare, slow and steady wins the race.
** 2016-07 July
*** 2016-07-01 Friday
**** :-)
   Entered on [2016-07-01 Fri 17:57]
     Actions speak louder than words. Consequences matter more than
     intentions.
*** 2016-07-02 Saturday
**** !=!
   Entered on [2016-07-02 Sat 17:27]
     “All men are created equal,”
** 2016-11 November
*** 2016-11-24 Thursday
**** http://perfectimpulse.com/
   Entered on [2016-11-24 Thu 20:38]
     P.S. Please feel free to visit Perfect Impulse where I share
     handpicked thoughts on self-improvement, productivity and life.
**** https://en.wikipedia.org/wiki/Trie#/media/File:Trie_example.svg
   Entered on [2016-11-24 Thu 20:43]
     My favorite data structure is a digital tree or trie (trie comes from
     the center of the word “retrieve”). Sadly not all data structures
     courses cover this kind of trees and is a pity because they have many
     interesting properties.
*** 2016-11-25 Friday
**** Nathan Yergler about PDB
   Entered on [2016-11-25 Fri 12:47]
   http://presentotron.com/nyergler/pdb/
* Rockstar programmer
   Entered on [2016-03-26 Sat 18:49]
* 2017
** 2017-02 February
*** 2017-02-07 Tuesday
**** epub only
   Entered on [2017-02-07 Tue 19:45]
     ereader            20161119.652  available  melpa      Major mode for reading ebooks with org-mode integration
*** 2017-02-10 Friday
**** TDD(!)
   Entered on [2017-02-10 Fri 16:21]
       abl-mode           20170208.647  available  melpa      Python TDD minor mode
*** 2017-02-23 Thursday
**** Project switching
     Entered on [2017-02-23 Thu 18:32]
     In particular, note that you can use the following kinds of bookmarks to
     quickly switch among different projects (sets of bookmarks): Dired, Dired
     tree, bookmark-list, bookmark-file, and desktop bookmarks.
**** Seems like a killer feature for code refactoring
     Entered on [2017-02-23 Thu 18:40]
     You can regexp-search (‘M-a’) or query-replace (‘M-q’) the targets
     (destination files or buffers) of the marked bookmarks, in the current
     bookmark-list sort order. For Emacs 23 and later, you can even search
     incrementally (‘M-s a C-s’, or ‘M-s a C-M-s’ for regexp).
*** 2017-02-26 Sunday
**** Noam Ben-Ami
     Entered on [2017-02-26 Sun 13:58]
      1 First and foremost, many engineers simply write Bad Code: They inappropriately use recursion, they pick inappropriate data structures,
       they don’t document their code, they pick poor variable names, they violate single responsibility like it’s going out of style, they use
       inheritance as if it is a #include directive, god save us, they don’t understand synchronization and concurrency, they don’t think about
       the memory and time implications of their algorithms, they don’t write tests, they violate least knowledge, etc etc etc. The most
       fundamental skill is the ability to write solid code. This is the hardest skill and the one that requires the most work and experience.
      2 Communication. Learn how to speak clearly, ask proper questions, listen carefully and pay attention to details.
      3 Packaging and deployment. Learn how to properly package, version, and deploy code. Learn how to set up continuous integration and
       deployment pipelines. It’s not sexy but it’s absolutely critical.
      4 Testing. Learn how to properly test code. Understand the difference between unit, integration, soak, performance, smoke, and other test
       types. Learn how to write code that is unit testable. Learn how to build proper integration harnesses and how to set up code coverage
       reporting and how to automate test execution as part of your CI/CD pipeline.
      5 Security. Learn how to write truly secure code. One interview question I have is how to prevent sql injection attacks. Most developers
       get this flat out wrong and are flat out removed from any consideration: I consider their lack of basic knowledge to be a real and
       present threat to any company that they work for.
      6 Functional programming. Learn how to work within that paradigm. It’s taking over on both the front- and back-end and most developers
       haven’t a clue about it and think that if they use lambdas then they are functional programmers.
      7 Ok, this is the last one, but I think potentially the most important: Learn to teach and collaborate. There are amazing engineers out
       there, but they don’t spread the love around, or they don’t keep up with the ecosystem. If you can teach the people around you new
       things, if you can tell them “well, the way the industry is moving is like this, let me show you some new approaches” then you’re really
       going to differentiate yourself. This means keeping up with developments in your sector - e.g. if you use Spark, know it well, and then
       know what the latest version added and what the roadmap is and what potential technologies may displace it, then be prepared to carefully
       talk about all that.
      8 Well, well, apparently, much like Trump, I’m a liar. Here’s another crucial one: Be curious, for f*ck’s sake. I interview a lot of
       people. And when I say a lot I mean I’ve screened literally hundreds of people for a dozen companies ranging from a single person doing
       an MVP to Microsoft. Lack of curiosity crops up all the time, and it’s lethal. For example, I’ll speak to someone who has Spark on their
       resume. Great, explain to me what makes Spark special. How do RDDs work? What are the different kinds of RDDs? How does Spark SQL work?
       How does the streaming subsystem work? What are the tricky things you need to do in streaming that you don’t need to do in batch? If the
       answer is “oh…um…sorry, I just wrote a Python script to count items in a log file,” then you’ve just a lot of damage to your credibility.
       This used to happen a lot more often, until I learned how to detect lack of curiosity from the resume.
*** 2017-02-27 Monday
**** Data Structures
     Entered on [2017-02-27 Mon 18:05]
     The knowledge of data structures like Hash Tables, Trees, Tries,
     Graphs and various algorithms goes a long way in solving these
     problems efficiently.
