#+AUTHOR:    Anton S. Kosinov
#+TITLE:     Mental Athlete ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     a.s.kosinov@gmail.com
#+LANGUAGE: en
#+STARTUP: showall
#+PROPERTY:header-args :results output :exports both
# :session :cache yes :tangle yes :comments org 

* Main data-flow
  :LOGBOOK:
  CLOCK: [2017-03-10 Fri 09:52]--[2017-03-10 Fri 10:17] =>  0:25
  CLOCK: [2017-03-08 Wed 16:51]--[2017-03-08 Wed 17:16] =>  0:25
  CLOCK: [2017-02-11 Sat 17:34]--[2017-02-11 Sat 17:54] =>  0:20
  CLOCK: [2017-02-10 Fri 16:36]--[2017-02-10 Fri 17:06] =>  0:30
  :END:

** Learning
   CLOCK: [2017-02-18 Sat 17:58]--[2017-02-18 Sat 18:23] =>  0:25
   - [[https://apps.ankiweb.net/docs/manual.html][Anki]]
   - [[https://www.supermemo.com/en/frontpage][SuperMemo]]

** English
*** DONE Vocabulary
    captured by voca-builder and [[file://usr/local/share/DVCS/lib/eng.org][stored into file]]

*** DONE Thoughts
    Extracted and [[file:/usr/local/share/DVCS/lib/thoughts.org][collected here]]

*** DONE Idioms
    captured and [[file:/usr/local/share/DVCS/lib/idioms.org][stored here]]

*** Quotations

*** TODO Proverbs

    :LOGBOOK:
    CLOCK: [2017-03-11 Sat 12:34]--[2017-03-11 Sat 12:59] =>  0:25
    :END:

** Python
*** Warnings
*** Logging
*** Context manager
*** TimeIt
    :LOGBOOK:
    CLOCK: [2017-04-27 Thu 06:25]--[2017-04-27 Thu 06:50] =>  0:25
    :END:
*** Coding
    :LOGBOOK:
    CLOCK: [2017-04-24 Mon 10:17]--[2017-04-24 Mon 10:42] =>  0:25
    CLOCK: [2017-04-23 Sun 10:21]--[2017-04-23 Sun 10:46] =>  0:25
    CLOCK: [2017-03-12 Sun 19:05]--[2017-03-12 Sun 19:30] =>  0:25
    :END:
*** CookBook
    :LOGBOOK:
    CLOCK: [2017-04-02 Sun 21:05]--[2017-04-02 Sun 21:30] =>  0:25
    CLOCK: [2017-03-24 Fri 11:19]--[2017-03-24 Fri 11:44] =>  0:25
    :END:
    
*** Design patterns
    :LOGBOOK:
    CLOCK: [2017-03-16 Thu 18:31]--[2017-03-16 Thu 18:56] =>  0:25
    CLOCK: [2017-03-12 Sun 21:32]--[2017-03-12 Sun 21:57] =>  0:25
    CLOCK: [2017-03-12 Sun 11:55]--[2017-03-12 Sun 12:20] =>  0:25
    CLOCK: [2017-03-12 Sun 11:06]--[2017-03-12 Sun 11:31] =>  0:25
    CLOCK: [2017-03-12 Sun 10:30]--[2017-03-12 Sun 10:55] =>  0:25
    :END:
**** Study existing solution
***** DONE Recursion
***** DONE Clone python-patterns repositories
      into =DVCS/pp= folder

***** DONE Rename all repositories by their author nick

***** DONE Create =Emacs= deskop file there

***** DONE Read all repos

***** DONE Compile theirs gist into my own motto

***** DONE Elaborate these addition

***** DONE Contribute it into faif
****** Observer test syntax fix
****** Context manager test
**** Elaborate my own
***** Choose the name for repo
***** Create structure
      :LOGBOOK:
      CLOCK: [2017-03-22 Wed 18:20]--[2017-03-22 Wed 18:45] =>  0:25
      :END:
      
***** Fulfill it by relevant content
      :LOGBOOK:
      CLOCK: [2017-05-07 Sun 16:39]--[2017-05-07 Sun 17:04] =>  0:25
      CLOCK: [2017-04-09 Sun 10:33]--[2017-04-09 Sun 10:58] =>  0:25
      CLOCK: [2017-04-09 Sun 10:00]--[2017-04-09 Sun 10:25] =>  0:25
      CLOCK: [2017-04-06 Thu 15:55]--[2017-04-06 Thu 16:20] =>  0:25
      CLOCK: [2017-03-17 Fri 12:20]--[2017-03-17 Fri 12:45] =>  0:25
      :END:
***** Include code snippets
      and satellite comments into 0--key blog
***** Switch Travis-CI on
      :LOGBOOK:
      CLOCK: [2017-03-25 Sat 11:57]--[2017-03-25 Sat 12:22] =>  0:25
      :END:
***** Cross-linkage with 0--key.io
      :LOGBOOK:
      CLOCK: [2017-04-10 Mon 11:19]--[2017-04-10 Mon 11:44] =>  0:25
      :END:

*** String formatting in Python3
    
    https://www.python.org/dev/peps/pep-3101/
*** Scrapy
**** Installation
     #+BEGIN_SRC sh
     pip install Scrapy
     #+END_SRC
**** Forking
**** Overview
**** Contribution

*** NLTK
*** AI
    :LOGBOOK:
    CLOCK: [2017-03-23 Thu 13:59]--[2017-03-23 Thu 14:40] =>  0:41
    CLOCK: [2017-03-22 Wed 09:57]--[2017-03-22 Wed 10:22] =>  0:25
    CLOCK: [2017-03-20 Mon 17:12]--[2017-03-20 Mon 17:37] =>  0:25
    :END:
   
    http://aima.cs.berkeley.edu/python/readme.html
    https://people.eecs.berkeley.edu/~russell/code/doc/overview.html
    https://people.eecs.berkeley.edu/~russell/code/doc/user.html
**** ML

***** Scikit
      :LOGBOOK:
      CLOCK: [2017-03-22 Wed 10:46]--[2017-03-22 Wed 11:11] =>  0:25
      :END:

***** Bayesian learning
      :LOGBOOK:
      CLOCK: [2017-04-15 Sat 08:25]--[2017-04-15 Sat 08:50] =>  0:25
      :END:
     
***** Coursera
****** Lecture 1: Introduction
       :LOGBOOK:
       CLOCK: [2017-05-02 Tue 16:21]--[2017-05-02 Tue 16:46] =>  0:25
       :END:

****** Lecture 2: The Perceptron learning procedure
       :LOGBOOK:
       CLOCK: [2017-04-27 Thu 16:44]--[2017-04-27 Thu 17:09] =>  0:25
       CLOCK: [2017-04-27 Thu 16:03]--[2017-04-27 Thu 16:28] =>  0:25
       CLOCK: [2017-04-06 Thu 09:27]--[2017-04-06 Thu 09:42] =>  0:15
       CLOCK: [2017-04-04 Tue 14:39]--[2017-04-04 Tue 15:08] =>  0:29
       CLOCK: [2017-04-04 Tue 14:08]--[2017-04-04 Tue 14:33] =>  0:25
       CLOCK: [2017-04-02 Sun 08:40]--[2017-04-02 Sun 09:05] =>  0:25
       :END:

****** Lecture 3: The backpropagation learning procedure
       :LOGBOOK:
       CLOCK: [2017-04-11 Tue 10:38]--[2017-04-11 Tue 11:03] =>  0:25
       CLOCK: [2017-04-07 Fri 17:12]--[2017-04-07 Fri 17:12] =>  0:00
       CLOCK: [2017-04-07 Fri 16:37]--[2017-04-07 Fri 17:02] =>  0:25
       :END:
      
****** Lecture 4: Learning feature vectors for words
       :LOGBOOK:
       CLOCK: [2017-04-16 Sun 12:24]--[2017-04-16 Sun 12:49] =>  0:25
       CLOCK: [2017-04-15 Sat 18:00]--[2017-04-15 Sat 18:25] =>  0:25
       :END:
      

****** Lecture 5: Object recognition with neural nets
       :LOGBOOK:
       CLOCK: [2017-04-29 Sat 17:02]--[2017-04-29 Sat 17:27] =>  0:25
       CLOCK: [2017-04-25 Tue 10:34]--[2017-04-25 Tue 10:59] =>  0:25
       :END:

****** Lecture 6: Optimization: How to make the learning go faster

****** Lecture 7: Recurrent neural networks
       :LOGBOOK:
       CLOCK: [2017-05-09 Tue 09:45]--[2017-05-09 Tue 10:10] =>  0:25
       CLOCK: [2017-05-02 Tue 12:13]--[2017-05-02 Tue 12:38] =>  0:25
       CLOCK: [2017-05-02 Tue 11:37]--[2017-05-02 Tue 12:02] =>  0:25
       :END:

****** Lecture 8: More recurrent neural networks

****** Lecture 9: Ways to make neural networks generalize better

****** Lecture 10: Combining multiple neural networks to improve generalization

****** Lecture 11: Hopfield nets and Boltzmann machines

****** Lecture 12: Restricted Boltzmann machines (RBMs)

****** Lecture 13: Stacking RBMs to make Deep Belief Nets

****** Lecture 14: Deep neural nets with generative pre-training

****** Lecture 15: Modeling hierarchical structure with neural nets

****** Lecture 16: Recent applications of deep neural nets (optional videos)


***** Convolutional Neural Network

***** Deep Belief Network

***** Restricted Boltzman Machine

***** Deep Reinforcement Learning

***** Deep Q Learning

***** Hierarchical Temporal Memory

***** Stacked Denoising Autoencoders

*** Matplotlib
    :LOGBOOK:
    CLOCK: [2017-05-10 Wed 10:11]--[2017-05-10 Wed 10:36] =>  0:25
    CLOCK: [2017-05-10 Wed 09:33]--[2017-05-10 Wed 09:58] =>  0:25
    CLOCK: [2017-05-09 Tue 10:34]--[2017-05-09 Tue 11:02] =>  0:28
    CLOCK: [2017-05-07 Sun 09:27]--[2017-05-07 Sun 09:52] =>  0:25
    CLOCK: [2017-05-07 Sun 08:50]--[2017-05-07 Sun 09:15] =>  0:25
    CLOCK: [2017-05-02 Tue 17:10]--[2017-05-02 Tue 17:35] =>  0:25
    :END:

** Emacs
*** Elisp
    :LOGBOOK:
    CLOCK: [2017-05-06 Sat 16:34]--[2017-05-06 Sat 16:59] =>  0:25
    CLOCK: [2017-04-04 Tue 18:47]--[2017-04-04 Tue 19:12] =>  0:25
    CLOCK: [2017-03-24 Fri 08:55]--[2017-03-24 Fri 09:20] =>  0:25
    CLOCK: [2017-03-11 Sat 11:33]--[2017-03-11 Sat 11:58] =>  0:25
    :END:
**** UnitTest
     https://www.emacswiki.org/emacs/UnitTesting
     https://www.emacswiki.org/emacs/ErtTestLibrary
**** An Introduction to Programming in Emacs Lisp
     :LOGBOOK:
     CLOCK: [2017-03-20 Mon 17:47]--[2017-03-20 Mon 18:12] =>  0:25
     CLOCK: [2017-03-11 Sat 12:03]--[2017-03-11 Sat 12:28] =>  0:25
     :END:
     by Robert J. Chassell

*** ox-epub
    Export org mode projects to EPUB

*** Tags
    :LOGBOOK:
    CLOCK: [2017-03-28 Tue 03:09]--[2017-03-28 Tue 03:34] =>  0:25
    :END:
*** abl-mode
    Python TDD minor mode

*** Speach synthesis

*** M-C-\
*** Capture templates for
**** quotation
**** snippet
**** point
*** 25.1 overview
    - https://www.masteringemacs.org/article/whats-new-in-emacs-25-1
*** DONE Bookmarks+
    Set a separate folder for desktops files =~/.emacs.d/desktops/=
    :LOGBOOK:
    CLOCK: [2017-02-18 Sat 21:06]--[2017-02-18 Sat 21:31] =>  0:25
    :END:
**** TODO Portability and synchronizing concept
***** Create library
***** Build the tree
****** Settings
****** Library
****** Repositories
**** DONE EWW bookmarks are in
     - as ~urls~
     - but disappeared in =eww=
**** DONE desktops
     Allow to customize your environment for particular
     task. This feature allows you to:
***** share
      - bookmarks
      - eww bookmarks
***** custom
      - registers
      - buffers
      - frames & windows
***** desktop+
      /it is buggy and often ruins a buffers list in the desktop/
*** DONE ereader
    - nice tool to get in the hands
*** DONE Man
*** DONE registers
*** DONE version control
*** DONE Org-mode 9
    Several significant [[http://orgmode.org/Changes.html][changes]] and backward compatibility lost.
**** DONE Virtual environment for testing
**** DONE Test 25.1 version
     - Pre-built packages [[http://emacs.secretsauce.net/][there]]
     - Change log [[https://www.gnu.org/software/emacs/index.html#Releases][there]]
**** DONE PROPERTIES testing
     #+BEGIN_SRC python
       print('Does it work properly?')
     #+END_SRC

     #+RESULTS:
     : Does it work properly?

**** DONE Sparse trees
**** DONE org-trello
     CLOCK: [2017-02-17 Fri 16:33]--[2017-02-17 Fri 16:55] =>  0:22
     - Main [[https://org-trello.github.io/][page]]
     - [[https://org-trello.github.io/install.html][Installation]]
**** DONE Code blocks color
     Just modify =org-src-fontify-natively= to *on*
*** DONE Install Emacs25.1 on Ubuntu 14.04
*** DONE Install Emacs24.5 on Ubuntu 14.04
    [[Follow the link][Emacs24.5]]
    [[Git update][Upgrade git]]
** Git
*** DONE Accomplish request-pull with Vikky
    This is a first pull request
    This is repo's actual state test
*** Python <src> rendering
    :LOGBOOK:
    CLOCK: [2017-03-14 Tue 21:43]--[2017-03-14 Tue 22:08] =>  0:25
    CLOCK: [2017-03-14 Tue 20:23]--[2017-03-14 Tue 20:48] =>  0:25
    :END:
    
** Jekyll
*** DONE Table of content with links to all posts
*** DONE Internal links test
    It's necessary to compose the absolute links only
*** DONE Org-src export colorization
    - Existing [[http://emacs.stackexchange.com/questions/7629/the-syntax-highlight-and-indentation-of-source-code-block-in-exported-html-file][theme]]
*** Img scaling
*** MathJax
    <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'></script>


** RDBMS

*** Theory

*** Practice

**** Postgres

***** DONE SQL in Emacs

***** TODO Python connector


* Satellite
** DONE Porteus
*** [[https://forum.porteus.org/viewtopic.php?f=81&t=6312&p=51379&hilit=ram+restore+changes#p51379][Save]] session's changes
*** /boot/docs/cheatcodes.txt
** DONE Maemo5
*** Install SDK
*** Compile Emacs24.5 on armel
*** Create key-chords to
**** read EWW or ElFeed
**** DONE translate unknown words
     'google-translate-at-point
**** DONE Extend vocabulary
     'voca-builder/search-popup
**** DONE return into single buffer on the frame view
     'delete-other-windows
**** DONE mark regions
     'set-mark-command
**** DONE copy region into kill-ring
     'kill-ring-save
**** DONE capture region
     'org-capture
** JobSeeking
*** TODO CV composing
    :LOGBOOK:
    CLOCK: [2017-04-19 Wed 20:14]--[2017-04-19 Wed 20:39] =>  0:25
    CLOCK: [2017-04-13 Thu 21:58]--[2017-04-13 Thu 22:23] =>  0:25
    CLOCK: [2017-04-11 Tue 09:59]--[2017-04-11 Tue 10:24] =>  0:25
    CLOCK: [2017-04-06 Thu 11:21]--[2017-04-06 Thu 11:46] =>  0:25
    CLOCK: [2017-03-24 Fri 09:42]--[2017-03-24 Fri 10:07] =>  0:25
    CLOCK: [2017-03-22 Wed 08:38]--[2017-03-22 Wed 09:03] =>  0:25
    CLOCK: [2017-03-20 Mon 16:03]--[2017-03-20 Mon 16:28] =>  0:25
    :END:
    =CV as .py code=
    #+BEGIN_SRC python
      class Engineer():
          """General-purpose problem-solver"""

          def review_issue(self, issue):
              return corollary

          def solve_issue(self, issue):
              return solution

      class SoftwareEngineer(Engineer):
          """
          Software-specific problems resolver
          Inherits all general-purpose engineer's
          functions and has the specific ones:
          """

          def guess_algorithm(self, issue):
              return pertinent_algorithm

          def complexity_control(self, software):
              pass
    #+END_SRC
**** ORG into PDF export
     not resolved yet
**** StackOverFlow propositions:
     https://stackoverflow.com/users/story/create?r=JobsSidebar
**** LinkedIn version
     :LOGBOOK:
     CLOCK: [2017-04-02 Sun 10:15]--[2017-04-02 Sun 10:40] =>  0:25
     :END:
    
   

* Miscellaneous
** Make resume
   http://bit.ly/hE8j3k
** Quora employment
   - https://www.quora.com/about
   - https://www.quora.com/about/challenges
   - https://www.quora.com/about/challenges#python_uri
   - https://www.quora.com/topic/Engineering-Recruiting
   - https://www.quora.com/topic/Hiring
   - https://www.quora.com/topic/Internship-Hiring
** PyGame
   http://www.pygame.org/hifi.html
** Big-Charge-Init approach
*** Foreword
    Distributed computational units design with data-driven bias.
    Based on Emacs text editor and free-distributed. 
*** Brief description
    In recent years there are a plenty of tools and technologies drastically
    simplified user's data generation. Nowadays it it a cool feature to have is
    to know your visitor's metadata. It's such natural to serves your master in
    a much useful way. And, in another side of this user data generation and perhaps
    alongside with it, there is a data size issue become to rule in charge.
*** Data Size
    It's a hard question to answer precisely. Because it's all about precision.
**** All data
     Strictly speaking it's a false impression. Data always less than you're expected.
     In most cases it is something around how to separate the wheat from
     the chaff. And separation is a primitive process, what about how to
     prepare the dough and cook a few cakes?
**** In a trusted state
     - It's checking before writing in DB.
     - It's integrity testing twice a day (week).
     - Garbage strategy is the last thing to do.
     - Well-composed data-sets are usually stable.
*** Preliminary statistical computation
    - Avg, Max, Min, Sqrt, Med, Sigma, 6Sigmas
    - For sorted various ways lists
    - In 3D
*** Additional model re-factoring
    It's a bit recursive task and in several cases it should be helpful
    to refocus your attention on a bit different kind of data (concept)
    honing (approving)
*** Data processing algorithm optimization
    Sometimes (and very often) the speed is significant. And, as it is
    necessary to do in real world - you'll train speed up. It's impossible
    to achieve any results in speed in ignore /practice/.
*** Data-Set deployment
    Locate your data separately, please.


* Current
  :LOGBOOK:
  CLOCK: [2017-03-11 Sat 17:32]--[2017-03-11 Sat 17:57] =>  0:25
  :END:
  - zygospore          20140703.152  available  melpa      reversible C-x 1 (delete-other-windows)
  - *info* files Linux documentation
  - Anki
  - Org-drill
  - http://mnemosyne-proj.org/category/english
  - Time management
  - Empathy
    - Two-step auth at Google requred


* Org-Babel test suite
** Python2 test

   #+BEGIN_SRC elisp
   (pyvenv-deactivate)
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC python :results output
     print "Hi!"
   #+END_SRC

   #+RESULTS:
   : Hi!

** Python3 test

*** Activate py3 virtual environment
    #+BEGIN_SRC elisp
    (pyvenv-activate "/usr/local/share/DVCS/venv3.5/")
    #+END_SRC

    #+RESULTS:

*** Sample output
    #+BEGIN_SRC python :results output
      print("Hi!")
    #+END_SRC

    #+RESULTS:
    : Hi!

*** Session variables
    #+BEGIN_SRC python :session :results none
      def print_hi():
	  return "Hello, I'm alive!"

      # another session variable
      session_variable = "I'm living inside session"
    #+END_SRC

    #+BEGIN_SRC python :session
    print(print_hi())
    print(session_variable)
    #+END_SRC

    #+RESULTS:
    : Hello, I'm alive!
    : I'm living inside session

** Shell test
   #+BEGIN_SRC sh
   echo "Hello"
   #+END_SRC

   #+RESULTS:
   : Hello
