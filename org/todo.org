#+AUTHOR:    Anton S. Kosinov
#+TITLE:     Mental Athlete ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     a.s.kosinov@gmail.com
#+LANGUAGE: en
# #+STARTUP: showall
#+PROPERTY:header-args :results output :exports both
# :session :cache yes :tangle yes :comments org 

* Main data-flow
  :LOGBOOK:
  CLOCK: [2017-02-11 Sat 17:34]--[2017-02-11 Sat 17:54] =>  0:20
  CLOCK: [2017-02-10 Fri 16:36]--[2017-02-10 Fri 17:06] =>  0:30
  :END:

** Learning
   CLOCK: [2017-02-18 Sat 17:58]--[2017-02-18 Sat 18:23] =>  0:25
   - [[https://apps.ankiweb.net/docs/manual.html][Anki]]
   - [[https://www.supermemo.com/en/frontpage][SuperMemo]]

** English
*** DONE Vocabulary
    captured by voca-builder and [[file://usr/local/share/DVCS/lib/eng.org][stored into file]]

*** DONE Thoughts
    Extracted and [[file:/usr/local/share/DVCS/lib/thoughts.org][collected here]]

*** DONE Idioms
    captured and [[file:/usr/local/share/DVCS/lib/idioms.org][stored here]]

*** Quotations

** Python
*** Warnings
*** Logging
*** Context manager
*** Coding
*** Code snippets
*** Design patterns
**** Study existing solution
***** DONE Recursion
***** DONE Clone python-patterns repositories
      into =DVCS/pp= folder

***** DONE Rename all repositories by their author nick

***** DONE Create =Emacs= deskop file there

***** DONE Read all repos

***** DONE Compile theirs gist into my own motto

***** DONE Elaborate these addition

***** DONE Contribute it into faif
****** Observer test syntax fix
****** Context manager test
**** Elaborate my own
***** Choose the name for repo
***** Create structure
***** Fulfill it by relevant content
** Elisp
*** UnitTest
    https://www.emacswiki.org/emacs/UnitTesting
    https://www.emacswiki.org/emacs/ErtTestLibrary
** Emacs
*** Capture templates for
**** quotation
**** snippet
**** point
*** 25.1 overview
    - https://www.masteringemacs.org/article/whats-new-in-emacs-25-1
*** TODO Bookmarks+
    CLOCK: [2017-02-20 Mon 08:11]
    CLOCK: [2017-02-18 Sat 21:06]--[2017-02-18 Sat 21:31] =>  0:25
**** TODO Portability and synchronizing concept
***** Create library
***** Build the tree
****** Settings
****** Library
****** Repositories
**** DONE EWW bookmarks are in
     - as ~urls~
     - but disappeared in =eww=
**** DONE desktops
     Allow to customize your environment for particular
     task. This feature allows you to:
***** share
      - bookmarks
      - eww bookmarks
***** custom
      - registers
      - buffers
      - frames & windows
***** desktop+
      /it is buggy and often ruins a buffers list in the desktop/
*** DONE ereader
    - nice tool to get in the hands
*** DONE Man
*** DONE registers
*** DONE version control
*** DONE Org-mode 9
    Several significant [[http://orgmode.org/Changes.html][changes]] and backward compatibility lost.
**** DONE Virtual environment for testing
**** DONE Test 25.1 version
     - Pre-built packages [[http://emacs.secretsauce.net/][there]]
     - Change log [[https://www.gnu.org/software/emacs/index.html#Releases][there]]
**** DONE PROPERTIES testing
     #+BEGIN_SRC python
       print('Does it work properly?')
     #+END_SRC

     #+RESULTS:
     : Does it work properly?

**** DONE Sparse trees
**** DONE org-trello
     CLOCK: [2017-02-17 Fri 16:33]--[2017-02-17 Fri 16:55] =>  0:22
     - Main [[https://org-trello.github.io/][page]]
     - [[https://org-trello.github.io/install.html][Installation]]
**** DONE Code blocks color
     Just modify =org-src-fontify-natively= to *on*
*** DONE Install Emacs25.1 on Ubuntu 14.04
*** DONE Install Emacs24.5 on Ubuntu 14.04
    [[Follow the link][Emacs24.5]]
    [[Git update][Upgrade git]]
** Git
*** DONE Accomplish request-pull with Vikky
    This is a first pull request
    This is repo's actual state test
** Jekyll
*** DONE Table of content with links to all posts
*** DONE Internal links test
    It's necessary to compose the absolute links only
*** DONE Org-src export colorization
    - Existing [[http://emacs.stackexchange.com/questions/7629/the-syntax-highlight-and-indentation-of-source-code-block-in-exported-html-file][theme]]
** NLTK
** AI
   http://aima.cs.berkeley.edu/python/readme.html
   https://people.eecs.berkeley.edu/~russell/code/doc/overview.html
   https://people.eecs.berkeley.edu/~russell/code/doc/user.html


* Satellite
** DONE Porteus
*** [[https://forum.porteus.org/viewtopic.php?f=81&t=6312&p=51379&hilit=ram+restore+changes#p51379][Save]] session's changes
*** /boot/docs/cheatcodes.txt
** DONE Maemo5
*** Install SDK
*** Compile Emacs24.5 on armel
*** Create key-chords to
**** read EWW or ElFeed
**** DONE translate unknown words
     'google-translate-at-point
**** DONE Extend vocabulary
     'voca-builder/search-popup
**** DONE return into single buffer on the frame view
     'delete-other-windows
**** DONE mark regions
     'set-mark-command
**** DONE copy region into kill-ring
     'kill-ring-save
**** DONE capture region
     'org-capture



* Miscellaneous
** Make resume
   http://bit.ly/hE8j3k
** Quora employment
   - https://www.quora.com/about
   - https://www.quora.com/about/challenges
   - https://www.quora.com/about/challenges#python_uri
   - https://www.quora.com/topic/Engineering-Recruiting
   - https://www.quora.com/topic/Hiring
   - https://www.quora.com/topic/Internship-Hiring
** PyGame
   http://www.pygame.org/hifi.html
** Big-Charge-Init approach
*** Foreword
    Distributed computational units design with data-driven bias.
    Based on Emacs text editor and free-distributed. 
*** Brief description
    In recent years there are a plenty of tools and technologies drastically
    simplified user's data generation. Nowadays it it a cool feature to have is
    to know your visitor's metadata. It's such natural to serves your master in
    a much useful way. And, in another side of this user data generation and perhaps
    alongside with it, there is a data size issue become to rule in charge.
*** Data Size
    It's a hard question to answer precisely. Because it's all about precision.
**** All data
     Strictly speaking it's a false impression. Data always less than you're expected.
     In most cases it is something around how to separate the wheat from
     the chaff. And separation is a primitive process, what about how to
     prepare the dough and cook a few cakes?
**** In a trusted state
     - It's checking before writing in DB.
     - It's integrity testing twice a day (week).
     - Garbage strategy is the last thing to do.
     - Well-composed data-sets are usually stable.
*** Preliminary statistical computation
    - Avg, Max, Min, Sqrt, Med, Sigma, 6Sigmas
    - For sorted various ways lists
    - In 3D
*** Additional model re-factoring
    It's a bit recursive task and in several cases it should be helpful
    to refocus your attention on a bit different kind of data (concept)
    honing (approving)
*** Data processing algorithm optimization
    Sometimes (and very often) the speed is significant. And, as it is
    necessary to do in real world - you'll train speed up. It's impossible
    to achieve any results in speed in ignore /practice/.
*** Data-Set deployment
    Locate your data separately, please.


* Current
  - zygospore          20140703.152  available  melpa      reversible C-x 1 (delete-other-windows)
  - *info* files Linux documentation
