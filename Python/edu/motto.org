
* Knowledge is power;						       :True:
** it is product of education;					       :True:

*** TODO reading;

*** TODO thinking;

*** TODO practicing;

** all knowledges reside in the memory;

*** they require repetition;

*** the spaced repetition is the best approach;
* Jargon & definition
    
** PP4E
*** Let’s step back for a moment and consider how far ’ve come.

**** 

*** If you’ve already studied Python in any sort of depth,
    you probably already know that this is where its OOP support begins
    to become attractive:

    Structure
    With OOP,  can naturally associate processing logic with record data—classes
    provide both a program unit that combines logic and data in a single package and
    a hierarchy that allows code to be easily factored to avoid redundancy.

    Encapsulation
    With OOP,  can also wrap up details such as name processing and pay increases
    behind method functions—i.e.,  are free to change method implementations
    without breaking their users.

    Customization
    And with OOP,  have a natural growth path. Classes can be extended and cus-
    tomized by coding n subclasses, without changing or breaking already working
    code.

** PfDA
*** Munge/Munging/Wrangling
    Describes the overall process of manipulating unstructured and/or messy data
    into a structured or clean form. The word has snuck its way into the jargon
    of many modern day data hackers. Munge rhymes with “lunge”.

*** Interacting with the outside world
    Reading and writing with a variety of file formats and databases.

*** Preparation
    Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis.

*** Transformation
    Applying mathematical and statistical operations to groups of data sets to
    derive new data sets. For example, aggregating a large table by group variables.

*** Modeling and computation
    Connecting your data to statistical models, machine learning algorithms, or other
    computational tools

*** Presentation
    Creating interactive or static graphical visualizations or textual summaries

    
** Cracking Interview
*** A hiring committee typically wants to see one interviewer
    who is an "enthusiastic endorser"
*** Be ready to code on a whiteboard and make sure all of your
    thoughts are clearly communicated
*** Well, I may be embellishing a little, but hear me out.
*** I am not exaggerating to say that I did not understand
    a single answer she gave during the interview p.16
*** One of the most important messages that you, as a candidate,
    can convey in your intervi is hiring me will make your lives easier
*** It was a real mess; we'd inherited a nasty ball of spaghetti,
    and we needed people who could jump in, figure things out,
    and be part of the solution.
*** 

** Writing Idiomatic Python

*** Oftentimes,
    functions need to accept an arbitrary list of positional parameters
    and/or keyword parameters , use a subset of them, and forward the rest to
    another function.

** Effective Python

*** Python3

**** bytes
     raw 8-bit values
**** str
     Unicode characters
*** Python2

**** str
     raw 8-bit values
**** Unicode
     Unicode characters
*** 

* Dive deeper into Python programming language

** in six months
   
** with:

*** Python3++
**** DONE Install and test Python3 devEnv
     virtualenv -p /usr/bin/python3 yourenv
     source yourenv/bin/activate
     pip install ipython
     DEADLINE: <2016-01-19 Tue>
**** DONE Install into devEnv:
     DEADLINE: <2016-01-20 Wed>
***** numpy
      sudo apt-get install python3-dev
      pip install numpy
***** pandas
      pip install pandas
***** nltk
      pip install -U nltk
      
***** matplotlib
      sudo apt-get install libfreetype6-dev
      sudo apt-get install libxft-dev
      pip install matplotlib 

http://github.com/pydata/pydata-book

** by studying:

*** Python for Data Analyse
**** DONE Preliminaries
**** TODO Introductory Examples <2016-01-18 Mon>
***** collections pack
**** TODO IPython: An Interactive Computing and Development Environment
     <2016-01-18 
*** Official Python documentation
**** http://docs.python.org
**** http://pypi.python.org/pypi
**** http://pyvideo.org
*** Programming Python 4th Edition
**** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
**** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
*** NLP with Python
    
*** Effective Python

**** [[https://github.com/bslatkin/effectivepython][Git]]
*** Fluent Python
*** Python Anti-Patterns
**** [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
**** [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
     [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
**** [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
     
*** Writing Idiomatic Python

* Discover Git

** Fork useful projects

*** DONE EffectivePython
*** DONE Python-Patterns
** Evaluate it in educational purposes
** Open pull request

* Enhance general coding grit
** [[https://drive.google.com/file/d/0BzoOGnxA0v1FSkFNSXg4MWVpTkE/view?usp%3Dsharing][Crack Coding Interview]]
*** [[http://careercup.com/][Additional information]] on website
** [[https://www.hackerrank.com/feed][HackerRank.com]] exercises
* Enlarge Emacs toolbox
** DONE [[http://elpy.readthedocs.org/en/latest/ide.html#documentation][Elpy]]
** DONE [[http://capitaomorte.github.io/yasnippet/][YaSnippet]]
*** predefined snippets for PyMode ~/.emacs.d/elpa/elpy-1.10.0/snippets/python-mode/
** DONE OrgMode [[http://orgmode.org/orgcard.pdf][refCard]] <2016-01-18 Mon>
** DONE [[http://www.emacswiki.org/emacs/key-chord.el][KeyChord]] <2016-01-18 Mon>
*** mkdir ~/.emacs.d/lisp/
**** put into it key-chord.el
**** and key-chord-map.el:
     (key-chord-define-global "hj"     'undo)
     (provide 'key-chord-map)
*** add into init.el:
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    (require 'key-chord)
    (key-chord-mode 1)
    (require 'key-chord-map)





This is a sample text to reveiw key-chords
How it works
** DONE [[Spelling checkinghttps://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling check]]
   DEADLINE: <2016-01-25 Mon>
** TODO New shortcuts
   C-x Left/Right
   M-x $
   M-x ispell
   M-g g, M-g M-g
   C-h b, d, k, v(ariable)
   M-x eval-buffer
** TODO Reveal OrgMode BaBel
*** http://orgmode.org/worg/org-contrib/babel/intro.html
*** http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
*** http://orgmode.org/worg/org-contrib/babel/languages.html#configure
*** http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
** TODO Embedding Python source code into Org document
*** This is the first and successful attempt			       :CODE:
    #+begin_src python :results output
      import sys
      print(sys.version)
      print("Hello, world!")
      print("This is a test")
      for i in range(4):
	  print(i)
    #+end_src python

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : Hello, world!
    : This is a test
    : 0
    : 1
    : 2
    : 3
*** Lets try to embed code snippet from outside
    #+INCLUDE: "./include_test.py"
*** Examples from real world
    #+name: session_init
    #+begin_src python :results output :session test
      # Example from Slatkin's book
      a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
      print('First four:', a[:4])
      print('Last four: ', a[-4:])
      print('Middle two:', a[3:-3])
    #+end_src

    #+RESULTS: session_init
    : First four: ['a', 'b', 'c', 'd']
    : Last four:  ['e', 'f', 'g', 'h']
    : Middle two: ['d', 'e']

    #+BEGIN_SRC python :results output :session test
      # it's the session test
      print('This is a session variable a : ')
    #+END_SRC

    #+RESULTS:
    : This is a session variable a : 

*** Session test

** TODO [[https://github.com/tsgates/git-emacs][Emacs+Git]] 
   DEADLINE: <2016-01-31 Sun>

* Enhance English
** Grammar
** Pronounce
** Vocabulary
