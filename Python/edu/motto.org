
* Knowledge is power ©				      :True:InitialPostulate:
** it is product of education;					       :True:

*** TODO reading;

*** TODO thinking;

*** TODO practicing;

** all knowledges reside in the memory;

*** they require repetition;

*** the spaced repetition is the best approach;
   
* Enhance English [0%] 						    :English:
** TODO Grammar [%]
*** Tutorial [%]
    [[http://learnenglish.britishcouncil.org/en/book-english-grammar][British Council]]
**** TODO Pronouns [72%]
***** DONE Personal pronouns
***** DONE it and there
***** DONE you and they
***** DONE possessive pronouns (see possessives:- pronouns)

      | subject | object | pos.adj | pos.pron |
      |---------+--------+---------+----------|
      | I       | me     | my      | mine     |
      |---------+--------+---------+----------|
      | you     | you    | your    | yours    |
      |---------+--------+---------+----------|
      | he      | him    | his     | his      |
      |---------+--------+---------+----------|
      | she     | her    | her     | hers     |
      |---------+--------+---------+----------|
      | we      | us     | our     | ours     |
      |---------+--------+---------+----------|
      | they    | them   | their   | theirs   | 
  
***** DONE this, that, these and those
      What was that you said?
      This chicken tastes very good.
      Hello, this is Sandra speaking, how may I help you?
      These throuses aren't the right size.
      Whose is that silver Mersedes over there?
      I'm John and these are my children Molly and Jake.
      What are those men doing on the roof?
      Do you take this woman to be your lawfully wedded wife?
***** DONE one and ones
      How old are my children? The younger one is four and the older
      one is seven.
      The new mobiles are much lighter than the old ones.
      I don't mind what kind of car it is, I just want one that gets
      me there.
      Which do you prefer? This one, or that one?
      I need some new glasses. The ones I have at the moment are broken.
      I hope this holiday will be one to remember.
***** DONE questions
      What you are afraid of?
      Which train did you come on?
      Who they are playing against?
      Which party are you going to vote for?
      What kind of music do you listen to?
      Who does she remaind you of?
***** DONE reflexive pronouns
      The reflecxive pronouns are:

      | singular | myself - yourself - himself - herself - itself |
      |----------+------------------------------------------------|
      | plural   | ourselves - yourselves - themselves            |

      Most common transitive verbs:
      | amuse     | blame | cut     | dry     | enjoy | help | hurt |
      |-----------+-------+---------+---------+-------+------+------|
      | introduce | kill  | prepare | satisfy | teach | see  | find |

      We do not use a reflexive pronoun after verbs which describe
      things people usually do for themselves, such as wash, shave, dress.

      Mary, you shouldn't blame yourself about the accident.
      Don't worry about us. We can amuse ourselves for an hour or two.
      I never really had lessons, I just taught myself.
      I thought it was a bit rude. She never introduced herself.
      It's long time since they've enjoyed themselves so much.
      It's a very clever machine. It turns itself off.
      He cut himself shaving today.
      Ladies and gentlemen. There's masses of food, so please help yourselves.

***** TODO reciprocal pronouns: each other and one another
***** TODO indefinite pronouns
***** TODO relative pronouns
**** TODO Determiners and quantifiers [0%]
***** TODO interrogative determiners: which and what
***** TODO indefinite article: a and an
***** TODO definite article: the
***** TODO quantifiers
** TODO Pronounce [0%]
*** TODO Reading aloud at the regualr base [33%]
**** TODO Adventures of Hucklberry Finn
**** TODO My Family and Other Animals
**** DONE Python Talk to Me podcast
** TODO Vocabulary [0%]
*** TODO Vocabla repetition

* Jargon & definition						    :corpora:
** PP4E
*** Let’s step back for a moment and consider how far ’ve come.

**** 

*** If you’ve already studied Python in any sort of depth,
    you probably already know that this is where its OOP support begins
    to become attractive:

    Structure
    With OOP,  can naturally associate processing logic with record data—classes
    provide both a program unit that combines logic and data in a single package and
    a hierarchy that allows code to be easily factored to avoid redundancy.

    Encapsulation
    With OOP,  can also wrap up details such as name processing and pay increases
    behind method functions—i.e.,  are free to change method implementations
    without breaking their users.

    Customization
    And with OOP,  have a natural growth path. Classes can be extended and cus-
    tomized by coding n subclasses, without changing or breaking already working
    code.

** PfDA
*** Munge/Munging/Wrangling
    Describes the overall process of manipulating unstructured and/or messy data
    into a structured or clean form. The word has snuck its way into the jargon
    of many modern day data hackers. Munge rhymes with “lunge”.

*** Interacting with the outside world
    Reading and writing with a variety of file formats and databases.

*** Preparation
    Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis.

*** Transformation
    Applying mathematical and statistical operations to groups of data sets to
    derive new data sets. For example, aggregating a large table by group variables.

*** Modeling and computation
    Connecting your data to statistical models, machine learning algorithms, or other
    computational tools

*** Presentation
    Creating interactive or static graphical visualizations or textual summaries

** OrgMode
*** Curious thought
    #+BEGIN_QUOTE
        Let us change our traditional attitude to the construction of
	programs: Instead of imagining that our main task is to instruct
	a computer what to do, let us concentrate rather on explaining
	to human beings what we want a computer to do.

	The practitioner of literate programming can be regarded as an
	essayist, whose main concern is with exposition and excellence of
	style. Such an author, with thesaurus in hand, chooses the names
	of variables carefully and explains what each variable means.
	He or she strives for a program that is comprehensible because
	its concepts have been introduced in an order that is best for
	human understanding, using a mixture of formal and informal
	methods that reinforce each other.

    – Donald Knuth
    #+END_QUOTE
** Cracking Interview
*** A hiring committee typically wants to see one interviewer
    who is an "enthusiastic endorser"
*** Be ready to code on a whiteboard and make sure all of your
    thoughts are clearly communicated
*** Well, I may be embellishing a little, but hear me out.
*** I am not exaggerating to say that I did not understand
    a single answer she gave during the interview p.16
*** One of the most important messages that you, as a candidate,
    can convey in your intervi is hiring me will make your lives easier
*** It was a real mess; we'd inherited a nasty ball of spaghetti,
    and we needed people who could jump in, figure things out,
    and be part of the solution.
*** Sometimes, I don’t have a very good attention to detail.
    While that’s good because it lets me execute quickly, it also means
    that I sometimes make careless mistakes. Because of that, I make
    sure to always have someone else double check my work.
*** Table 1
*** Table 2
*** I can go into more details if you’d like
*** I asked him open-ended questionson how he felt it was going,
    and which components he was excited about tackling.
*** Handling Technical Questions
**** So when you get a hard question, don’t panic.
     Just start talking aloud about how you would solve it.
*** Five Algorithm Approaches
**** I: EXAMPLIFY
**** II: PATTERN MATCHING
**** III: SIMPLIFY & GENERALIZE
**** IV: BASE CASE AND BUILD
**** V: DATA STRUCTURE BRAINSTORM
*** If what you want is to stay an engineer for life, then there is
    absolutely nothing wrong with that.
*** Top Ten Mistakes Candidates Make
    #+BEGIN_QUOTE
    Quality beats quantity
    #+END_QUOTE
    When asked a question, break your answer into three parts
    (Situation / Action / Response, Issue 1 / Issue 2 / Issue 3, etc)
    and speak for just a couple sentences about each. If I want more
    details, I’ll ask!
    
    
** Writing Idiomatic Python

*** Oftentimes,
    functions need to accept an arbitrary list of positional parameters
    and/or keyword parameters , use a subset of them, and forward the rest to
    another function.

** Effective Python

*** Python3

**** bytes
     raw 8-bit values
**** str
     Unicode characters
*** Python2

**** str
     raw 8-bit values
**** Unicode
     Unicode characters
*** 								    :corpora:
* Enlarge Emacs toolbox 					      :Emacs:
** DONE Elpy
   [[http://elpy.readthedocs.org/en/latest/ide.html#documentation][Elpy]]
** DONE YaSnippet
   [[http://capitaomorte.github.io/yasnippet/][YaSnippet]]
*** predefined snippets for PyMode
    ~/.emacs.d/elpa/elpy-1.10.0/snippets/python-mode/
** DONE OrgMode
   [[http://orgmode.org/orgcard.pdf][refCard]] <2016-01-18 Mon>
*** DONE Reveal OrgMode BaBel <2016-03-01 Tue> 
**** Intro
     http://orgmode.org/worg/org-contrib/babel/intro.html
**** Tutorial
     http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
**** Configure languages
     http://orgmode.org/worg/org-contrib/babel/languages.html#configure
**** Supported languages
     http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
**** shortcuts
     |----------+------------------|
     | Sequence | Expands to       |
     |----------+------------------|
     | <s       | #+BEGIN_SRC      |
     | <e       | #+BEGIN_EXAMPLE  |
     | <q       | #+BEGIN_QUOTE    |
     | <v       | #+BEGIN_VERSE    |
     | <V       | #+BEGIN_VERBATIM |
     | <c       | #+BEGIN_CENTER   |
     | <l       | #+BEGIN_LaTeX    |
     | <L       | #+LaTeX          |
     | <h       | #+BEGIN_HTML     |
     | <H       | #+HTML           |
     | <a       | #+BEGIN_ASCII    |
     | <A       | #+ASCII:         |
     | <i       | #+INDEX:         |
     | <I       | #+INCLUDE:       |
     |----------+------------------|



*** Dates <2016-02-03 Wed>
*** Tags <2016-02-04 Thu>
** DONE KeyChord
   [[http://www.emacswiki.org/emacs/key-chord.el][KeyChord]] <2016-01-18 Mon>
*** mkdir ~/.emacs.d/lisp/
**** put into it key-chord.el
**** and key-chord-map.el:
     (key-chord-define-global "hj"     'undo)
     (provide 'key-chord-map)
*** add into init.el:
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    (require 'key-chord)
    (key-chord-mode 1)
    (require 'key-chord-map)





This is a sample text to reveiw key-chords
How it works
** DONE ISpell
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling check]]
   DEADLINE: <2016-01-25 Mon>
** DONE Embedding Python source code into Org document
   Demands to install Org recent version 
*** This is the first and successful attempt			       :CODE:
    #+begin_src python :results output
      import sys
      print(sys.version)
      print("Hello, world!")
      print("This is a test")
      for i in range(4):
	  print(i)
    #+end_src python

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : Hello, world!
    : This is a test
    : 0
    : 1
    : 2
    : 3
*** Lets try to embed code snippet from outside
    #+BEGIN_SRC python
      print(sys.version)
          
    #+END_SRC

    #+RESULTS:

*** Examples from real world
    #+name: session_init
    #+begin_src python :results output :session test
      # Example from Slatkin's book
      a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
      print('First four:', a[:4])
      print('Last four: ', a[-4:])
      print('Middle two:', a[3:-3])
    #+end_src

    #+RESULTS: session_init
    : 
    : >>> First four: ['a', 'b', 'c', 'd']
    : Last four:  ['e', 'f', 'g', 'h']
    : Middle two: ['d', 'e']

    #+BEGIN_SRC python :results output :session test
      import sys
      # it's the session test
      print('This is a session variable a : ', a)
    #+END_SRC

    #+RESULTS:
    : 
    : ... This is a session variable a :  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

*** Session test
    #+BEGIN_SRC python :results output :session test 
      print(sys.version)
      print('How it might be possible!', a[2:5])
    #+END_SRC

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : How it might be possible! ['c', 'd', 'e']

*** Full-Fledged
    #+BEGIN_SRC python :results output
      # initialize data to be stored in files, pickles, shelves

      # records
      bob = {'name': 'Bob Smith', 'age': 42, 'pay': 30000, 'job': 'dev'}
      sue = {'name': 'Sue Jones', 'age': 45, 'pay': 40000, 'job': 'hdw'}
      tom = {'name': 'Tom',       'age': 50, 'pay': 0,     'job': None}

      # database
      db = {}
      db['bob'] = bob
      db['sue'] = sue
      db['tom'] = tom

      print('\n')
      for key in db:
          print(key, '=>\n  ', db[key])


    #+END_SRC

    #+RESULTS:
    : 
    : 
    : bob =>
    :    {'pay': 30000, 'job': 'dev', 'age': 42, 'name': 'Bob Smith'}
    : sue =>
    :    {'pay': 40000, 'job': 'hdw', 'age': 45, 'name': 'Sue Jones'}
    : tom =>
    :    {'pay': 0, 'job': None, 'age': 50, 'name': 'Tom'}

** TODO New shortcuts						       :keys:
*** General								:gen:
**** Switch buffer in the stack C-x Left/Right
**** Word spell check M-x $
**** M-x ispell
**** GoTo M-g g, M-g M-g
**** Help with keys C-h b, d, k, v(ariable)
**** Elisp evaluation
     M-x eval-buffer
**** Bookmarks (set/goto/list/del:
     C-x r m/b/l/M-x [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]]-delete
**** Some keys in ‘*Bookmark List*’:
     ‘a’ – show annotation for the current bookmark
     ‘A’ – show all annotations for your bookmarks
     ‘d’ – mark various entries for deletion (‘x’ – to delete them)
     ‘e’ – edit the annotation for the current bookmark
     ‘m’ – mark various entries for display and other operations, (‘v’ – to visit)
     ‘o’ – visit the current bookmark in another window, keeping the bookmark list open
     ‘C-o’ – switch to the current bookmark in another window
     ‘r’ – rename the current bookmark
**** Text accumulation
     [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Accumulating-Text.html][==>]]
***** M-x append-to:
      buffer, register or file
***** M-x prepend-to:
      buffer or register
**** Read-only mode
     C-x C-r RET (view-mode)
     C-x C-q read-only mode toggle
**** Nero browser					       :nero:browser:
     M-x nero
**** Lynx inside					       :lynx:browser:
     M-x ansi-term RET lynx
**** Replace new line
     C-q C-j
**** Move forward/backward sentence
     M-e/a
**** Delete word/character
     M/C-d
     M-Del previous word
**** Delete sentence
     M-k next
     C-x Del previous
**** Kill line
     C-k
     M-C-k from end of the line up to the cursor
**** TODO Manipulation with frames
     C-x 5 b switch to buffer other frame
*** Orgmode
**** Tags
     Set C-c C-q
**** Tables
***** |header|...
***** Table header closing
      C-c <RET>
**** Babel
***** Execute code in the current subtree
      C-c C-v s
***** Backward to higher level heading
      C-c C-u
** DONE MELPA installation
** DONE Helm-dictionary install and test it up
* Dive deeper into Python programming language 			     :Python:

** in six months <2016-06-15 Wed> 
** with:

*** Python3++
**** DONE Install and test Python3 devEnv
     virtualenv -p /usr/bin/python3 yourenv
     source yourenv/bin/activate
     pip install ipython
     DEADLINE: <2016-01-19 Tue>
**** DONE Install into devEnv:
     DEADLINE: <2016-01-20 Wed>
***** numpy
      sudo apt-get install python3-dev
      pip install numpy
***** pandas
      pip install pandas
***** nltk
      pip install -U nltk
      
***** matplotlib
      sudo apt-get install libfreetype6-dev
      sudo apt-get install libxft-dev
      pip install matplotlib 

http://github.com/pydata/pydata-book

** by studying with slope to hone:

*** Python's Theory						     :theory:
**** Official Python documentation			      :documentation:
***** The Python Tutorial [25%]
****** DONE Whetting Your Appetite

****** DONE Using the Python Interpreter

******* Invoking the Interpreter

******** Argument Passing

******** Interactive Mode

******* The Interpreter and Its Environment

******** Source Code Encoding

****** DONE An Informal Introduction to Python

******* Using Python as a Calculator

******** Numbers
	 #+BEGIN_SRC python :results output :session intro
	   2 + 2
	   tax = 12.5 / 100
	   price = 100.50
	   price + _  # last result in interactive mode
	   round(_, 2)

	 #+END_SRC

	 #+RESULTS:
	 : 4
	 : >>> >>> 104.5
	 : 104.5

******** Strings
	 #+BEGIN_SRC python :results output :session intro
	   'spam eggs'  # single quotes
	   s = 'First line.\nSecond line.'  # \n means newline
	   s
	   print(s)
	 #+END_SRC

	 #+RESULTS:
	 : 'spam eggs'
	 : >>> 'First line.\nSecond line.'
	 : First line.
	 : Second line.

	 +---+---+---+---+---+---+
	 | P | y | t | h | o | n |
	 +---+---+---+---+---+---+
	 0   1   2   3   4   5   6
	-6  -5  -4  -3  -2  -1

	String Methods
	Strings Formatting
	printf-style String Formatting

******** Lists
	 #+BEGIN_QUOTE
	 Mutable, indexed and ordered sequence
	 #+END_QUOTE

	 + features
	   shallow copy [:]
	   slicing [n:m]
	   concatenation

******* First Steps Towards Programming
	    #+BEGIN_SRC python :results output
	      # Fibonacci series
              a, b = 0, 1
              while b < 10:
		  print(b, end=", ")
		  a, b = b, a + b
	    #+END_SRC

****** DONE More Control Flow Tools

******* "if" Statements
	#+BEGIN_EXAMPLE
    	    x = int(input("Please enter an integer: "))
	#+END_EXAMPLE
******* "for" Statements
	#+BEGIN_SRC python :results output
	  # Measure some strings:
	  words = ['cat', 'window', 'defenestrate']
	  for w in words:
	      print(w, len(w))
	  print('==============')
	  for w in words[:]:
	      if len(w) > 6:
		  words.insert(0, w)
	  print(words)

	#+END_SRC

	#+RESULTS:
	: cat 3
	: window 6
	: defenestrate 12
	: ==============
	: ['defenestrate', 'cat', 'window', 'defenestrate']

******* The "range()" Function
	    #+BEGIN_SRC python :results output
              for i in range(5):
		 print(i, end=", ")
              print('==============')
	    #+END_SRC

	    #+RESULTS:
	    : 0, 1, 2, 3, 4, ==============

******* "break" and "continue" Statements, and "else" Clauses on Loops
	    #+BEGIN_SRC python :results output
              for n in range(2, 10):
		  for x in range(2, n):
                      if n % x == 0:
			  print(n, 'equals', x, '*', n//x)
			  break
		  else:
		      # loop fell through without finding a factor
		      print(n, 'is a prime number')

	    #+END_SRC

	    #+RESULTS:
	    : 2 is a prime number
	    : 3 is a prime number
	    : 4 equals 2 * 2
	    : 5 is a prime number
	    : 6 equals 2 * 3
	    : 7 is a prime number
	    : 8 equals 2 * 4
	    : 9 equals 3 * 3

	    #+BEGIN_SRC python :results output
              # continue example
              for num in range(2, 10):
		  if num % 2 == 0:
                      print("Found an even number", num)
                      continue
		  print("Found a number", num)
	    #+END_SRC

	    #+RESULTS:
	    : Found an even number 2
	    : Found a number 3
	    : Found an even number 4
	    : Found a number 5
	    : Found an even number 6
	    : Found a number 7
	    : Found an even number 8
	    : Found a number 9

******* "pass" Statements
	    #+BEGIN_QUOTE
	    Does nothing
	    #+END_QUOTE

******* Defining Functions
	#+BEGIN_SRC python :results output
	  # example
	  def fib(n):    # write Fibonacci series up to n
	      """Print a Fibonacci series up to n."""
	      a, b = 0, 1
	      while a < n:
		  print(a, end=' ')
		  a, b = b, a+b
	      print()

	  # Now call the function we just defined:
	  fib(2000)
	#+END_SRC

	#+RESULTS:
	: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

	#+BEGIN_SRC python :results output
	  def fib2(n): # return Fibonacci series up to n
	      """Return a list containing the Fibonacci series up to n."""
	      result = []
	      a, b = 0, 1
	      while a < n:
		  result.append(a)    # see below
		  a, b = b, a+b
	      return result

	  f100 = fib2(100)    # call it
	  print(f100)                # write the result
	#+END_SRC

	#+RESULTS:
	: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
******* More on Defining Functions
******** Default Argument Values
	   The default value is evaluated only once.
	   #+BEGIN_SRC python :results output

	     def f(a, L=[]):
		 L.append(a)
		 return L

	     print(f(1))
	     print(f(2))
	     print(f(3))
	   #+END_SRC

	   #+RESULTS:
	   : [1]
	   : [1, 2]
	   : [1, 2, 3]

	   To prevent this behaviour:
	   #+BEGIN_SRC python :results output
	     def f(a, L=None):
		 if L is None:
		     L = []
		 L.append(a)
		 return L

	     print(f(1))
	     print(f(2))
	     print(f(3))
	   #+END_SRC

	   #+RESULTS:
	   : [1]
	   : [2]
	   : [3]

******** Keyword Arguments
	   #+BEGIN_SRC python :results output
	     def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
		 print("-- This parrot wouldn't", action, end=' ')
		 print("if you put", voltage, "volts through it.")
		 print("-- Lovely plumage, the", type)
		 print("-- It's", state, "!")

	     # this are correct usage
	     parrot(1000)                                          # 1 positional argument
	     parrot(voltage=1000)                                  # 1 keyword argument
	     parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
	     parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
	     parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
	     parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

	     # and this are incorrect -->
	     #parrot()                     # required argument missing
	     #parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
	     #parrot(110, voltage=220)     # duplicate value for the same argument
	     #parrot(actor='John Cleese')  # unknown keyword argument
	   #+END_SRC

	   #+RESULTS:
	   #+begin_example
	   -- This parrot wouldn't voom if you put 1000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't voom if you put 1000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't jump if you put a million volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's bereft of life !
	   -- This parrot wouldn't voom if you put a thousand volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's pushing up the daisies !
    #+end_example

******** Arbitrary Argument Lists
	 #+BEGIN_SRC python :results output
           def write_multiple_items(file, separator, *args):
               file.write(separator.join(args))


           def concat(*args, sep="/"):  # keyword-only might occur after
              return sep.join(args)

           print(concat("earth", "mars", "venus"))
           print('==============')
           print(concat("earth", "mars", "venus", sep="."))
	 #+END_SRC

	 #+RESULTS:
	 : earth/mars/venus
	 : ==============
	 : earth.mars.venus

******** Unpacking Argument Lists
	 #+BEGIN_SRC python :results output
           p = list(range(3, 6))            # normal call with separate arguments
           print(p)
           print('==============')
           args = [3, 6]
           q = list(range(*args))            # call with arguments unpacked from a list
           print(q)
	   print('==============')

           # same fashion, dictionaries can deliver keyword arguments with
           # the "**"-operator:

           def parrot(voltage, state='a stiff', action='voom'):
               print("-- This parrot wouldn't", action, end=' ')
               print("if you put", voltage, "volts through it.", end=' ')
               print("E's", state, "!")

           d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
           print(parrot(**d))
	 #+END_SRC

	 #+RESULTS:
	 : [3, 4, 5]
	 : ==============
	 : [3, 4, 5]
	 : ==============
	 : -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !
	 : None
	 #+BEGIN_SRC python :results output
           # test with argument passing
           def arg_test(*args, **kwargs):
               print('This is a first positional argument: %s' % (args[0],))
               print('This is artument value with key "last_name": %s' %
                     (kwargs['last_name'],))
               print('This is a second positional argument: %s' % (args[1],))

           # arg_test('Tony', last_name='Kosinov', 'WebDev')  # wrong
           arg_test('Tony', 'WebDev', last_name='Kosinov')
	 #+END_SRC

	 #+RESULTS:
	 : This is a first positional argument: Tony
	 : This is artument value with key "last_name": Kosinov
	 : This is a second positional argument: WebDev

******** Lambda Expressions
	 #+BEGIN_SRC python :results output
           def make_incrementor(n):
               return lambda x: x + n

           f = make_incrementor(42)
           print(f(0))
           print(f(1))
           print('==============')

           pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
           pairs.sort(key=lambda pair: pair[1])  # sort by second element in the tuple
           print(pairs)
           print('==============')

           mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
	 #+END_SRC

	 #+RESULTS:
	 : 42
	 : 43
	 : ==============
	 : [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
	 : ==============
	 #+BEGIN_SRC python :results output
           import sys

           summ = lambda x, y: x + y   #  def sum(x,y): return x + y
           out = lambda *x: sys.stdout.write(" ".join(map(str,x)))

           print(summ(4, 5))
           print(out("a", "b", "c", "D"))

	 #+END_SRC

	 #+RESULTS:
	 : 9
	 : a b c D7
	 #+NAME: jump_table
	 #+BEGIN_SRC python :results output
           # jump table implementation
           L = [lambda x: x ** 2,
                lambda x: x ** 3,
                lambda x: x ** 4]
           # Inline function definition
           # A list of three callable functions
           for f in L:
               print(f(2)) # Prints 4, 8, 16
           print(L[0](3)) # Prints 9

	 #+END_SRC

	 #+RESULTS: jump_table
	 : 4
	 : 8
	 : 16
	 : 9

******** Documentation Strings
	 #+BEGIN_SRC python :results output
           def my_function():
               """Do nothing, but document it.

               No, really, it doesn't do anything.
               """
               pass

           print(my_function.__doc__)

	 #+END_SRC

	 #+RESULTS:
	 : Do nothing, but document it.
	 : 
	 :     No, really, it doesn't do anything.
	 :     

******** Function Annotations
	 #+BEGIN_QUOTE
	 completely optional metadata information
	 about the types used by user-defined functions
	 #+END_QUOTE
	 
******* Intermezzo: Coding Style
	Making it easy for others to read your code
	is always a good idea, and adopting a nice coding style helps
	tremendously for that.
	+ Suggestions:
	  - When possible, put comments on a line of their own;
	  - Name your classes and functions consistently; the convention is to
	use "CamelCase" for classes and "lower_case_with_underscores" for
	functions and methods.

****** TODO Data Structures
******* Terse manual
******** list.append(x)
	  Add an item to the end of the list.
	  Equivalent to "a[len(a):] = [x]".
	  #+BEGIN_SRC python :results output :session lists
            a = [66.25, 333]
            a.append(333)
            print(a)
	  #+END_SRC

	  #+RESULTS:
	  : 
	  : >>> [66.25, 333, 333]

******** list.extend(L)
	 Extend the list by appending all the items in the given list.
	 Equivalent to "a[len(a):] = L".
	 #+BEGIN_SRC python :results output :session lists
	 b = [1, 1234.5]
	 a.extend(b)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> [66.25, 333, 333, 1, 1234.5]

******** list.insert(i, x)
	 Insert an item at a given position.  The first argument is the
	 index of the element before which to insert, so "a.insert(0, x)"
	 inserts at the front of the list, and "a.insert(len(a), x)" is
	 equivalent to "a.append(x)".
	 #+BEGIN_SRC python :results output :session lists
	 a.insert(2, -1)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [66.25, 333, -1, 333, 1, 1234.5]

******** list.remove(x)
	 Remove the first item from the list whose value is *x*.  It is an
	 error if there is no such item.
	 #+BEGIN_SRC python :results output :session lists
	 a.remove(66.25)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 1, 1234.5]

******** list.pop([i])
	 Remove the item at the given position in the list, and return it.
	 If no index is specified, "a.pop()" removes and returns the last
	 item in the list.
	 #+BEGIN_SRC python :results output :session lists
	 a.pop(4)
	 a.pop()
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 1234.5
	 : 1
	 : [333, -1, 333]

******** list.clear()
	 Remove all items from the list.  Equivalent to "del a[:]".
******** list.index(x, [n])
	 Return the index in the list of the [n] item whose value is *x*.
	 It is an error if there is no such item.
	 #+BEGIN_SRC python :results output :session lists
	 a.index(333)
	 a.index(333, 2)
	 #+END_SRC

	 #+RESULTS:
	 : 0
	 : 2

******** list.count(x)
	 Return the number of times *x* appears in the list.
	 #+BEGIN_SRC python :results output :session lists
	 a.extend([2, 2, 2])
	 print(a)
	 a.count(333)
	 a.count(2)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 2, 2, 2, 2, 2, 2]
	 : 2
	 : 6

******** list.reverse()
	 Reverse the elements of the list in place.
	 #+BEGIN_SRC python :results output :session lists
	 a.reverse()
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 2, 2, 2, 2, 2, 2]

******** list.copy()
	 Return a shallow copy of the list. Equivalent to "a[:]".
******* More on Lists
******** Using Lists as Stacks
	 #+BEGIN_SRC python :results output :session stack
           stack = [3, 4, 5]
           stack.append(6)
           stack.append(7)
           stack
           '============='
           stack.pop()
           stack
           stack.pop()
           '============='
           stack.pop()
           '============='
           stack
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 >>> >>> [3, 4, 5, 6, 7]
	 '============='
	 7
	 [3, 4, 5, 6]
	 6
	 '============='
	 5
	 '============='
	 [3, 4]
#+end_example

******** Using Lists as Queues
	 #+NAME: Queue
	 #+BEGIN_SRC python :results output :session queue
           from collections import deque
           queue = deque(["Eric", "John", "Michael"])
           queue.append("Terry")           # Terry arrives
           queue.append("Graham")          # Graham arrives
           queue.popleft()                 # The first to arrive now leaves
           print('=============')
           queue.popleft()                 # The second to arrive now leaves
           print('=============')
           queue                           # Remaining queue in order of arrival
	 #+END_SRC

	 #+RESULTS: Queue
	 : 
	 : >>> >>> >>> 'Eric'
	 : =============
	 : 'John'
	 : =============
	 : deque(['Michael', 'Terry', 'Graham'])

******** List Comprehensions
	 #+BEGIN_QUOTE
	 provide a concise way to create lists.
	 #+END_QUOTE
	 #+BEGIN_SRC python :results output :session lists
           squares = list(map(lambda x: x**2, range(10)))
           squares_alt = [x**2 for x in range(10)]

           print(squares)
           print('=============')
           print(squares_alt)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> >>> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 : =============
	 : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 #+NAME Recombination
	 #+BEGIN_SRC python :results output :session lists
	 [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
	 #+END_SRC

	 #+RESULTS:
	 : [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
	 #+BEGIN_SRC python :results output :session lists
           vec = [-4, -2, 0, 2, 4]
           # create a new list with the values doubled
           [x*2 for x in vec]
           print('=============')
           # filter the list to exclude negative numbers
           [x for x in vec if x >= 0]
           print('=============')
           # apply a function to all the elements
           [abs(x) for x in vec]
           print('=============')
           # call a method on each element
           freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
           [weapon.strip() for weapon in freshfruit]
           print('=============')
           # create a list of 2-tuples like (number, square)
           [(x, x**2) for x in range(6)]
           print('=============')
           # the tuple must be parenthesized, otherwise an error is raised
           ###!!! [x, x**2 for x in range(6)]
           # flatten a list using a listcomp with two 'for'
           vec = [[1,2,3], [4,5,6], [7,8,9]]
           [num for elem in vec for num in elem]
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 ... [-8, -4, 0, 4, 8]
	 =============
	 ... [0, 2, 4]
	 =============
	 ... [4, 2, 0, 2, 4]
	 =============
	 ... >>> ['banana', 'loganberry', 'passion fruit']
	 =============
	 ... [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
	 =============
	 ... ... ... >>> [1, 2, 3, 4, 5, 6, 7, 8, 9]
#+end_example


	 List comprehensions can contain complex expressions and nested
	 functions:

	 #+BEGIN_SRC python :results output :session lists
	 from math import pi
	 [str(round(pi, i)) for i in range(1, 6)]
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ['3.1', '3.14', '3.142', '3.1416', '3.14159']

******** Nested List Comprehensions			  :transposition:zip:
	 #+BEGIN_SRC python :results output :session lists
           matrix = [
               [1, 2, 3, 4],
               [5, 6, 7, 8],
               [9, 10, 11, 12],
           ]
           [[row[i] for row in matrix] for i in range(4)]
           # sinonym:
           list(zip(*matrix))
           # few zip() scrutiny
           list(zip(matrix[0], ['a', 'c', 'f'], [21, 22]))
	   print('=============')
	   # only two elements on output (smallest full-fledged number)
	   from itertools import zip_longest
	   list(zip_longest(matrix[0], ['a', 'c', 'f'], [21, 22]))
	   # four elements with None as tap on empty cells
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... >>> [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
	 : ... [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
	 : ... [(1, 'a', 21), (2, 'c', 22)]
	 : =============
	 : ... >>> [(1, 'a', 21), (2, 'c', 22), (3, 'f', None), (4, None, None)]

******* The "del" statement
	#+BEGIN_SRC python :results output :session lists
          a = [-1, 1, 66.25, 333, 333, 1234.5]
          del a[0]
          a
          print('=============')
          del a[2:4]
          a
          print('=============')
          del a[:]
          a
	#+END_SRC

	#+RESULTS:
	: 
	: >>> [1, 66.25, 333, 333, 1234.5]
	: =============
	: >>> [1, 66.25, 1234.5]
	: =============
	: >>> []

******* Tuples and Sequences
	A tuple consists of a number of values separated by commas
	#+BEGIN_SRC python :results output :session tuples
          t = 12345, 54321, 'hello!'
          t[0]
          print('=============')
          t
          print('=============')
          # Tuples may be nested:
          u = t, (1, 2, 3, 4, 5)
          u
          print('=============')
          # Tuples are immutable:
          # t[0] = 88888 !!
          # but they can contain mutable objects:
          v = ([1, 2, 3], [3, 2, 1])
          v
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>> >>> >>> 12345
	: =============
	: (12345, 54321, 'hello!')
	: =============
	: ... >>> ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
	: =============
	: ... ... ... >>> ([1, 2, 3], [3, 2, 1])
	#+BEGIN_SRC python :results output :session tuples
          empty = ()
	  # possible syntax
          singleton = 'hello',    # <-- note trailing comma
          len(empty)
          print('=============')
          len(singleton)
          print('=============')
          singleton
	  print('=============')
	  #sequence unpacking
          x, y, z = t  # equal num of arguments on both sides
	  print(x, y, z)
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> 0
	: =============
	: 1
	: =============
	: ('hello',)
	: =============
	: ... >>> 12345 54321 hello!

******* Sets
	A set is an unordered collection with no duplicate elements.
	Basic uses include membership testing and eliminating duplicate
	entries.
	#+BEGIN_SRC python :results output :session sets
          basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
          print(basket)                      # show that duplicates have been removed
          print('=============')
          'orange' in basket                 # fast membership testing
          print('=============')
          'crabgrass' in basket
	#+END_SRC

	#+RESULTS:
	: Type "help", "copyright", "credits" or "license" for more information.
	: >>> >>> >>> >>> {'orange', 'apple', 'pear', 'banana'}
	: =============
	: True
	: =============
	: False

	+ Set objects also support mathematical operations like:
	  union
	  intersection
	  difference
	  symmetric difference
	  #+BEGIN_SRC python :results output :session sets
            # Demonstrate set operations on unique letters from two words

            a = set('abracadabra')
            b = set('alacazam')
            print(a)                                  # unique letters in a
            print('======unique letters in a=====')
            a - b                              # letters in a but not in b
            print('======letters in a but not in b=======')
            a | b                              # letters in either a or b
            print('=======letters in either a or b======')
            a & b                              # letters in both a and b
            print('=======letters in both a and b======')
            a ^ b                              # letters in a or b but not both
            print('======letters in a or b but not both=======')

	  #+END_SRC

	  #+RESULTS:
	  #+begin_example

	  >>> >>> >>> {'r', 'a', 'c', 'b', 'd'}
	  ======unique letters in a=====
	  {'r', 'b', 'd'}
	  ======letters in a but not in b=======
	  {'r', 'a', 'd', 'b', 'm', 'z', 'c', 'l'}
	  =======letters in either a or b======
	  {'a', 'c'}
	  =======letters in both a and b======
	  {'r', 'd', 'z', 'm', 'b', 'l'}
	  ======letters in a or b but not both=======
#+end_example
	  #+NAME: set comprehensions
	  #+BEGIN_SRC python :results output :session sets
	  a = {x for x in 'abracadabra' if x not in 'abc'}
	  print(a)
	  #+END_SRC

	  #+RESULTS: set comprehensions
	  : 
	  : {'r', 'd'}

******* Dictionaries
	#+BEGIN_QUOTE
	Unlike
	sequences, which are indexed by a range of numbers, dictionaries are
	indexed by keys, which can be any immutable type; strings and
	numbers can always be keys.  Tuples can be used as keys if they
	contain only strings, numbers, or tuples; if a tuple contains any
	mutable object either directly or indirectly, it cannot be used as a
	key. You can't use lists as keys, since lists can be modified in place
	using index assignments, slice assignments, or methods like "append()"
	and "extend()".
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session dicts
          tel = {'jack': 4098, 'sape': 4139}
          tel['guido'] = 4127
          tel
          print('=============')
          tel['jack']

          del tel['sape']
          tel['irv'] = 4127
          tel
          print('=============')
          list(tel.keys())
          print('=============')
          sorted(tel.keys())
          print('=============')
          'guido' in tel
          print('=============')
          'jack' not in tel
	#+END_SRC
	#+BEGIN_SRC python :results output :session dicts
          # The "dict()" constructor builds dictionaries directly from sequences
          # of key-value pairs:

          dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
          print('=============')

          # In addition, dict comprehensions can be used to create dictionaries
          # from arbitrary key and value expressions:

          {x: x**2 for x in (2, 4, 6)}
          print('=============')

          # When the keys are simple strings, it is sometimes easier to specify
          # pairs using keyword arguments:

          dict(sape=4139, guido=4127, jack=4098)
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}
	: =============
	: >>> ... ... >>> {2: 4, 4: 16, 6: 36}
	: =============
	: >>> ... ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}


******* Looping Techniques

******* More on Conditions

******* Comparing Sequences and Other Types

****** TODO Modules

******* More on Modules

******** Executing modules as scripts

******** The Module Search Path

******** "Compiled" Python files

******* Standard Modules

******* The "dir()" Function

******* Packages

******** Importing * From a Package

******** Intra-package References

******** Packages in Multiple Directories

****** TODO Input and Output

******* Fancier Output Formatting

******** Old string formatting

******* Reading and Writing Files

******** Methods of File Objects

******** Saving structured data with "json"

****** TODO Errors and Exceptions

******* Syntax Errors

******* Exceptions

******* Handling Exceptions

******* Raising Exceptions

******* User-defined Exceptions

******* Defining Clean-up Actions

******* Predefined Clean-up Actions

****** TODO Classes

******* A Word About Names and Objects

******* Python Scopes and Namespaces

******** Scopes and Namespaces Example

******* A First Look at Classes

******** Class Definition Syntax

******** Class Objects

******** Instance Objects

******** Method Objects

******** Class and Instance Variables

******* Random Remarks

******* Inheritance

******** Multiple Inheritance

******* Private Variables

******* Odds and Ends

******* Exceptions Are Classes Too

******* Iterators

******* Generators

******* Generator Expressions

****** TODO Brief Tour of the Standard Library

******* Operating System Interface

******* File Wildcards

******* Command Line Arguments

******* Error Output Redirection and Program Termination

******* String Pattern Matching

******* Mathematics

******* Internet Access

******* Dates and Times

******* Data Compression

******* Performance Measurement

******* Quality Control

******* Batteries Included

****** TODO Brief Tour of the Standard Library -- Part II

******* Output Formatting

******* Templating

******* Working with Binary Data Record Layouts

******* Multi-threading

******* Logging

******* Weak References

******* Tools for Working with Lists

******* Decimal Floating Point Arithmetic

****** TODO Virtual Environments and Packages

******* Introduction

******* Creating Virtual Environments

******* Managing Packages with pip

****** TODO What Now?

****** TODO Interactive Input Editing and History Substitution

******* Tab Completion and History Editing

******* Alternatives to the Interactive Interpreter

****** TODO Floating Point Arithmetic:  Issues and Limitations

******* Representation Error

****** TODO Appendix

******* Interactive Mode

******** Error Handling

******** Executable Python Scripts

******** The Interactive Startup File

******** The Customization Modules


********* Official tutorial [18%]				   :tutorial:
	  https://docs.python.org/3/tutorial/
********** DONE 1. Whetting Your Appetite
********** DONE 2. Using the Python Interpreter
            2.1. Invoking the Interpreter
		2.1.1. Argument Passing
		2.1.2. Interactive Mode
            2.2. The Interpreter and Its Environment
		2.2.1. Source Code Encoding
********** DONE 3. An Informal Introduction to Python
            3.1. Using Python as a Calculator
		3.1.1. Numbers
		#+BEGIN_SRC python :results output :session intro
		  2 + 2
		  tax = 12.5 / 100
		  price = 100.50
		  price + _  # last result in interactive mode
		  round(_, 2)

		#+END_SRC

		#+RESULTS:
		: 4
		: >>> >>> 104.5
		: 104.5
	    
		3.1.2. Strings
		#+BEGIN_SRC python :results output :session intro
		  'spam eggs'  # single quotes
		  s = 'First line.\nSecond line.'  # \n means newline
		  s
		  print(s)
		#+END_SRC

		#+RESULTS:
		: 'spam eggs'
		: >>> 'First line.\nSecond line.'
		: First line.
		: Second line.

		+---+---+---+---+---+---+
		| P | y | t | h | o | n |
		+---+---+---+---+---+---+
		0   1   2   3   4   5   6
	       -6  -5  -4  -3  -2  -1

	       String Methods
	       Strings Formatting
	       printf-style String Formatting
		3.1.3. Lists

		#+BEGIN_QUOTE
		Mutable, indexed and ordered sequence
		#+END_QUOTE

		+ features
		  shallow copy [:]
		  slicing [n:m]
		  concatenation
	      
            3.2. First Steps Towards Programming
	    #+BEGIN_SRC python :results output
	      # Fibonacci series
              a, b = 0, 1
              while b < 10:
		  print(b, end=", ")
		  a, b = b, a + b
	    #+END_SRC

	    #+RESULTS:
	    : 1, 1, 2, 3, 5, 8, 

********** TODO 4. More Control Flow Tools			      :input:
            4.1. if Statements
	    #+BEGIN_SRC python
	    x = int(input("Please enter an integer: "))
	    #+END_SRC
            4.2. for Statements
	
	    #+BEGIN_SRC python :results output
              # Measure some strings:
              words = ['cat', 'window', 'defenestrate']
              for w in words:
		  print(w, len(w))
              print('==============')
              for w in words[:]:
		  if len(w) > 6:
                      words.insert(0, w)
              print(words)

	    #+END_SRC

	    #+RESULTS:
	    : cat 3
	    : window 6
	    : defenestrate 12
	    : ==============
	    : ['defenestrate', 'cat', 'window', 'defenestrate']

            4.3. The range() Function
	    #+BEGIN_SRC python :results output
              for i in range(5):
		 print(i, end=", ")
              print('==============')
	    #+END_SRC

	    #+RESULTS:
	    : 0, 1, 2, 3, 4, ==============

            4.4. break and continue Statements, and else Clauses on Loops
	    #+BEGIN_SRC python :results output
              for n in range(2, 10):
		  for x in range(2, n):
                      if n % x == 0:
			  print(n, 'equals', x, '*', n//x)
			  break
		  else:
		      # loop fell through without finding a factor
		      print(n, 'is a prime number')

	    #+END_SRC

	    #+RESULTS:
	    : 2 is a prime number
	    : 3 is a prime number
	    : 4 equals 2 * 2
	    : 5 is a prime number
	    : 6 equals 2 * 3
	    : 7 is a prime number
	    : 8 equals 2 * 4
	    : 9 equals 3 * 3

	    #+BEGIN_SRC python :results output
              # continue example
              for num in range(2, 10):
		  if num % 2 == 0:
                      print("Found an even number", num)
                      continue
		  print("Found a number", num)
	    #+END_SRC

	    #+RESULTS:
	    : Found an even number 2
	    : Found a number 3
	    : Found an even number 4
	    : Found a number 5
	    : Found an even number 6
	    : Found a number 7
	    : Found an even number 8
	    : Found a number 9

            4.5. pass Statements
	    #+BEGIN_QUOTE
	    Does nothing
	    #+END_QUOTE
            4.6. Defining Functions
	    #+BEGIN_SRC python :results output
              # example
              def fib(n):    # write Fibonacci series up to n
		  """Print a Fibonacci series up to n."""
		  a, b = 0, 1
		  while a < n:
                      print(a, end=' ')
                      a, b = b, a+b
		  print()

              # Now call the function we just defined:
              fib(2000)
	    #+END_SRC

	    #+RESULTS:
	    : 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

	    #+BEGIN_SRC python :results output
              def fib2(n): # return Fibonacci series up to n
		  """Return a list containing the Fibonacci series up to n."""
		  result = []
		  a, b = 0, 1
		  while a < n:
                      result.append(a)    # see below
                      a, b = b, a+b
		  return result

              f100 = fib2(100)    # call it
              print(f100)                # write the result
	    #+END_SRC

	    #+RESULTS:
	    : [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

            4.7. More on Defining Functions
		4.7.1. Default Argument Values
		The default value is evaluated only once.
		#+BEGIN_SRC python :results output

		  def f(a, L=[]):
                      L.append(a)
                      return L

		  print(f(1))
		  print(f(2))
		  print(f(3))
		#+END_SRC

		#+RESULTS:
		: [1]
		: [1, 2]
		: [1, 2, 3]

		To prevent this behaviour:
		#+BEGIN_SRC python :results output
		  def f(a, L=None):
                      if L is None:
			  L = []
                      L.append(a)
                      return L

		  print(f(1))
		  print(f(2))
		  print(f(3))
		#+END_SRC

		#+RESULTS:
		: [1]
		: [2]
		: [3]

		4.7.2. Keyword Arguments
		#+BEGIN_SRC python :results output
		  def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
                      print("-- This parrot wouldn't", action, end=' ')
                      print("if you put", voltage, "volts through it.")
                      print("-- Lovely plumage, the", type)
                      print("-- It's", state, "!")

		  # this are correct usage
		  parrot(1000)                                          # 1 positional argument
		  parrot(voltage=1000)                                  # 1 keyword argument
		  parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
		  parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
		  parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
		  parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

		  # and this are incorrect -->
		  #parrot()                     # required argument missing
		  #parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
		  #parrot(110, voltage=220)     # duplicate value for the same argument
		  #parrot(actor='John Cleese')  # unknown keyword argument
		#+END_SRC

		#+RESULTS:
		#+begin_example
		-- This parrot wouldn't voom if you put 1000 volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's a stiff !
		-- This parrot wouldn't voom if you put 1000 volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's a stiff !
		-- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's a stiff !
		-- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's a stiff !
		-- This parrot wouldn't jump if you put a million volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's bereft of life !
		-- This parrot wouldn't voom if you put a thousand volts through it.
		-- Lovely plumage, the Norwegian Blue
		-- It's pushing up the daisies !
		#+end_example

		4.7.3. Arbitrary Argument Lists
		4.7.4. Unpacking Argument Lists
		4.7.5. Lambda Expressions
		4.7.6. Documentation Strings
		4.7.7. Function Annotations
            4.8. Intermezzo: Coding Style
********** TODO 5. Data Structures
            5.1. More on Lists
		5.1.1. Using Lists as Stacks
		5.1.2. Using Lists as Queues
		5.1.3. List Comprehensions
		5.1.4. Nested List Comprehensions
            5.2. The del statement
            5.3. Tuples and Sequences
            5.4. Sets
            5.5. Dictionaries
            5.6. Looping Techniques
            5.7. More on Conditions
            5.8. Comparing Sequences and Other Types
********** TODO 6. Modules
            6.1. More on Modules
		6.1.1. Executing modules as scripts
		6.1.2. The Module Search Path
		6.1.3. “Compiled” Python files
            6.2. Standard Modules
            6.3. The dir() Function
            6.4. Packages
		6.4.1. Importing * From a Package
		6.4.2. Intra-package References
		6.4.3. Packages in Multiple Directories
********** TODO 7. Input and Output
            7.1. Fancier Output Formatting
		7.1.1. Old string formatting
            7.2. Reading and Writing Files
		7.2.1. Methods of File Objects
		7.2.2. Saving structured data with json
********** TODO 8. Errors and Exceptions
            8.1. Syntax Errors
            8.2. Exceptions
            8.3. Handling Exceptions
            8.4. Raising Exceptions
            8.5. User-defined Exceptions
            8.6. Defining Clean-up Actions
            8.7. Predefined Clean-up Actions
********** TODO 9. Classes
            9.1. A Word About Names and Objects
            9.2. Python Scopes and Namespaces
		9.2.1. Scopes and Namespaces Example
            9.3. A First Look at Classes
		9.3.1. Class Definition Syntax
		9.3.2. Class Objects
		9.3.3. Instance Objects
		9.3.4. Method Objects
		9.3.5. Class and Instance Variables
            9.4. Random Remarks
            9.5. Inheritance
		9.5.1. Multiple Inheritance
            9.6. Private Variables
            9.7. Odds and Ends
            9.8. Exceptions Are Classes Too
            9.9. Iterators
            9.10. Generators
            9.11. Generator Expressions
********** TODO 10. Brief Tour of the Standard Library
            10.1. Operating System Interface
            10.2. File Wildcards
            10.3. Command Line Arguments
            10.4. Error Output Redirection and Program Termination
            10.5. String Pattern Matching
            10.6. Mathematics
            10.7. Internet Access
            10.8. Dates and Times
            10.9. Data Compression
            10.10. Performance Measurement
            10.11. Quality Control
            10.12. Batteries Included
********** TODO 11. Brief Tour of the Standard Library – Part II
            11.1. Output Formatting
            11.2. Templating
            11.3. Working with Binary Data Record Layouts
            11.4. Multi-threading
            11.5. Logging
            11.6. Weak References
            11.7. Tools for Working with Lists
            11.8. Decimal Floating Point Arithmetic
********** TODO 12. Virtual Environments and Packages
            12.1. Introduction
            12.2. Creating Virtual Environments
            12.3. Managing Packages with pip
********** TODO 13. What Now?
********** TODO 14. Interactive Input Editing and History Substitution
            14.1. Tab Completion and History Editing
            14.2. Alternatives to the Interactive Interpreter
********** TODO 15. Floating Point Arithmetic: Issues and Limitations
            15.1. Representation Error
********** TODO 16. Appendix
            16.1. Interactive Mode
		16.1.1. Error Handling
		16.1.2. Executable Python Scripts
		16.1.3. The Interactive Startup File
		16.1.4. The Customization Modules

********* Official documentation
	  http://docs.python.org
********* http://pypi.python.org/pypi
********* http://pyvideo.org

******** Programming Python 4th Edition				:programming:
********* [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
********* [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
******** Python Anti-Patterns				      :anti:patterns:
********* [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
********* [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
	  [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
********* [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
******** Fluent Python						     :fluent:
********* Preface
********** TODO [[https://docs.python.org/3.0/whatsnew/3.0.html][What’s N In Python 3.0]]
********** TODO [[https://docs.python.org/3/tutorial/][Python Tutorial]]
	   #+BEGIN_QUOTE
	   Premature abstraction is as bad as premature optimization.
	   #+END_QUOTE
******** Writing Idiomatic Python				     :idioma:

******** Effective Python					     :effect:

********* [[https://github.com/bslatkin/effectivepython][Git]]


******* Applied Python

******** NLP with Python
******** Python for Data Analyse
********* DONE Preliminaries
********* TODO Introductory Examples <2016-01-18 Mon>
********** collections pack
********* TODO IPython: An Interactive Computing and Development Environment
	  <2016-01-18 
      

***** Official documentation
      http://docs.python.org
***** http://pypi.python.org/pypi
***** http://pyvideo.org

**** Programming Python 4th Edition				:programming:
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
**** Python Anti-Patterns				      :anti:patterns:
***** [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
***** [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
      [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
***** [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
**** Fluent Python						     :fluent:
***** Preface
****** TODO [[https://docs.python.org/3.0/whatsnew/3.0.html][What’s N In Python 3.0]]
****** TODO [[https://docs.python.org/3/tutorial/][Python Tutorial]]
       #+BEGIN_QUOTE
       Premature abstraction is as bad as premature optimization.
       #+END_QUOTE
**** Writing Idiomatic Python					     :idioma:
***** 1 Control Structures and Functions
****** 1.1 If Statements
       1.1.1 Avoid comparing directly to True , False , or None
       #+BEGIN_SRC python :results output
         def raise_shields():
             return True

         def number_of_evil_robots_attacking():
             return 10

         def should_raise_shields():
             # "We only raise Shields when one or more giant robots attack,
             # so I can just return that value..."
             return number_of_evil_robots_attacking()

         if should_raise_shields() == True:
             raise_shields()
             print ('Shields raised')
         else:
             print("Function isn't True")
       #+END_SRC

       #+RESULTS:
       : Function isn't True

       1.1.2 Avoid repeating variable name in compound if statement
       1.1.3 Avoid placing conditional branch code on the same line as
       the colon
****** 1.2 For loops
       1.2.1 Use the enumerate function in loops instead of creating an
       “index” variable
       1.2.2 Use the in keyword to iterate over an iterable
       1.2.3 Use else to execute code after a for loop concludes
****** 1.3 Functions
       1.3.1 Avoid using '' , [] , and {} as default parameters to func-
       tions
       1.3.2 Use *args and **kwargs to accept arbitrary arguments
***** 2 Working with Data
****** 2.1 Lists
       2.1.1 Use a list comprehension to create a transformed version
       of an existing list
       2.1.2 Use the * operator to represent the “rest” of a list
****** 2.2 Dictionaries
       2.2.1 Use the default parameter of dict.get to provide default
       values
       2.2.2 Use a dict comprehension to build a dict clearly and
       efficiently
****** 2.3 Strings
       2.3.1 Prefer the format function for formatting strings
       2.3.2 Use ''.join when creating a single string for list elements
       2.3.3 Chain string functions to make a simple series of transfor-
       mations more clear
****** 2.4 Classes
       2.4.1 Use underscores in function and variable names to help mark
       “private” data
       2.4.2 Define __str__ in a class to show a human-readable repre-
       sentation
****** 2.5 Sets
       2.5.1 Use sets to eliminate duplicate entries from Iterable con-
       tainers
       2.5.2 Use a set comprehension to generate sets concisely
       2.5.3 Understand and use the mathematical set operations
****** 2.6 Generators
       2.6.1 Use a generator to lazily load infinite sequences
       2.6.2 Prefer a generator expression to a list comprehension
       for simple iteration
****** 2.7. Context Managers
       2.7.1 Use a context manager to ensure resources are properly
       managed
****** 2.8. Tuples
       2.8.1 Use tuples to unpack data
       2.8.2 Use _ as a placeholder for data in a tuple that should be
       ignored
****** 2.9 Variables
       2.9.1 Avoid using a temporary variable when performing a swap
       of two values
***** 3 Organizing Your Code
****** 3.1 Modules and Packages
       3.1.1 Use modules for encapsulation where other languages would
       use Objects
****** 3.2 Formatting
       3.2.1 Use all capital letters when declaring global constant values
       3.2.2 Avoid placing multiple statements on a single line
       3.2.3 Format your code according to PEP8
****** 3.3. Executable Scripts
       3.3.1 Use sys.exit in your script to return proper error codes
       3.3.2 Use the if __name__ == '__main__' pattern to allow a
       file to be both imported and run directly
****** 3.4 Imports
       3.4.1 Prefer absolute imports to relative imports
       3.4.2 Do not use from foo import * to import the contents of a
       module.
       3.4.3 Arrange your import statements in a standard order
***** 4 General Advice
****** 4.1 Avoid Reinventing the Wheel
       4.1.1 Learn the Contents of the Python Standard Library
       4.1.2 Get to know PyPI (the Python Package Index)
****** 4.2 Modules of Note
       4.2.1 Learn the contents of the itertools module
       4.2.2 Use functions in the os.path module when working with
       directory paths

**** Effective Python						     :effect:

***** [[https://github.com/bslatkin/effectivepython][Git]]


*** Applied Python

**** TODO Python HOWTOs

***** Porting Python 2 Code to Python 3

****** The Short Explanation

****** Details

******* Drop support for Python 2.6 and older

******* Make sure you specify the proper version support in your
           "setup.py" file

******* Have good test coverage

******* Learn the differences between Python 2 & 3

******* Update your code

******** Division

******** Text versus binary data

******* Prevent compatibility regressions

******* Check which dependencies block your transition

******* Update your "setup.py" file to denote Python 3 compatibility

******* Use continuous integration to stay compatible

****** Dropping Python 2 support completely

***** Porting Extension Modules to Python 3

****** Conditional compilation

****** Changes to Object APIs

******* str/unicode Unification

******* long/int Unification

****** Module initialization and state

****** CObject replaced with Capsule

****** Other options

***** Curses Programming with Python

****** What is curses?

******* The Python curses module

****** Starting and ending a curses application

****** Windows and Pads

****** Displaying Text

******* Attributes and Color

****** User Input

****** For More Information

***** Descriptor HowTo Guide

****** Abstract

****** Definition and Introduction

****** Descriptor Protocol

****** Invoking Descriptors

****** Descriptor Example

****** Properties

****** Functions and Methods

****** Static Methods and Class Methods

***** Functional Programming HOWTO

****** Introduction

******* Formal provability

******* Modularity

******* Ease of debugging and testing

******* Composability

****** Iterators

******* Data Types That Support Iterators

****** Generator expressions and list comprehensions

****** Generators

******* Passing values into a generator

****** Built-in functions

****** The itertools module

******* Creating new iterators

******* Calling functions on elements

******* Selecting elements

******* Combinatoric functions

******* Grouping elements

****** The functools module

******* The operator module

****** Small functions and the lambda expression

****** Revision History and Acknowledgements

****** References

******* General

******* Python-specific

******* Python documentation

***** Logging HOWTO

****** Basic Logging Tutorial

******* When to use logging

******* A simple example

******* Logging to a file

******* Logging from multiple modules

******* Logging variable data

******* Changing the format of displayed messages

******* Displaying the date/time in messages

******* Next Steps

****** Advanced Logging Tutorial

******* Logging Flow

******* Loggers

******* Handlers

******* Formatters

******* Configuring Logging

******* What happens if no configuration is provided

******* Configuring Logging for a Library

****** Logging Levels

******* Custom Levels

****** Useful Handlers

****** Exceptions raised during logging

****** Using arbitrary objects as messages

****** Optimization

***** Logging Cookbook

****** Using logging in multiple modules

****** Multiple handlers and formatters

****** Logging to multiple destinations

****** Configuration server example

****** Dealing with handlers that block

****** Sending and receiving logging events across a network

****** Adding contextual information to your logging output

******* Using LoggerAdapters to impart contextual information

******** Using objects other than dicts to pass contextual
             information

******* Using Filters to impart contextual information

****** Logging to a single file from multiple processes

****** Using file rotation

****** Use of alternative formatting styles

****** Customizing "LogRecord"

****** Subclassing QueueHandler - a ZeroMQ example

****** Subclassing QueueListener - a ZeroMQ example

****** An example dictionary-based configuration

****** Using a rotator and namer to customize log rotation processing

****** A more elaborate multiprocessing example

****** Inserting a BOM into messages sent to a SysLogHandler

****** Implementing structured logging

****** Customizing handlers with "dictConfig()"

****** Using particular formatting styles throughout your application

******* Using LogRecord factories

******* Using custom message objects

****** Configuring filters with "dictConfig()"

****** Customized exception formatting

****** Speaking logging messages

****** Buffering logging messages and outputting them conditionally

****** Formatting times using UTC (GMT) via configuration

***** Regular Expression HOWTO

****** Introduction

****** Simple Patterns

******* Matching Characters

******* Repeating Things

****** Using Regular Expressions

******* Compiling Regular Expressions

******* The Backslash Plague

******* Performing Matches

******* Module-Level Functions

******* Compilation Flags

****** More Pattern Power

******* More Metacharacters

******* Grouping

******* Non-capturing and Named Groups

******* Lookahead Assertions

****** Modifying Strings

******* Splitting Strings

******* Search and Replace

****** Common Problems

******* Use String Methods

******* match() versus search()

******* Greedy versus Non-Greedy

******* Using re.VERBOSE

****** Feedback

***** Socket Programming HOWTO

****** Sockets

******* History

****** Creating a Socket

******* IPC

****** Using a Socket

******* Binary Data

****** Disconnecting

******* When Sockets Die

****** Non-blocking Sockets

***** Sorting HOW TO

****** Sorting Basics

****** Key Functions

****** Operator Module Functions

****** Ascending and Descending

****** Sort Stability and Complex Sorts

****** The Old Way Using Decorate-Sort-Undecorate

****** The Old Way Using the *cmp* Parameter

****** Odd and Ends

***** Unicode HOWTO

****** Introduction to Unicode

******* History of Character Codes

******* Definitions

******* Encodings

******* References

****** Python's Unicode Support

******* The String Type

******* Converting to Bytes

******* Unicode Literals in Python Source Code

******* Unicode Properties

******* Unicode Regular Expressions

******* References

****** Reading and Writing Unicode Data

******* Unicode filenames

******* Tips for Writing Unicode-aware Programs

******** Converting Between File Encodings

******** Files in an Unknown Encoding

******* References

****** Acknowledgements

***** HOWTO Fetch Internet Resources Using The urllib Package

****** Introduction

****** Fetching URLs

******* Data

******* Headers

****** Handling Exceptions

******* URLError

******* HTTPError

******** Error Codes

******* Wrapping it Up

******** Number 1

******** Number 2

****** info and geturl

****** Openers and Handlers

****** Basic Authentication

****** Proxies

****** Sockets and Layers

****** Footnotes

***** HOWTO Use Python in the web

****** The Low-Level View

******* Common Gateway Interface

******** Simple script for testing CGI

******** Setting up CGI on your own server

******** Common problems with CGI scripts

******* mod_python

******* FastCGI and SCGI

******** Setting up FastCGI

******* mod_wsgi

****** Step back: WSGI

******* WSGI Servers

******* Case study: MoinMoin

****** Model-View-Controller

****** Ingredients for Websites

******* Templates

******* Data persistence

****** Frameworks

******* Some notable frameworks

******** Django

******** TurboGears

******** Zope

******** Other notable frameworks

***** Argparse Tutorial

****** Concepts

****** The basics

****** Introducing Positional arguments

****** Introducing Optional arguments

******* Short options

****** Combining Positional and Optional arguments

****** Getting a little more advanced

******* Conflicting options

****** Conclusion

***** An introduction to the ipaddress module

****** Creating Address/Network/Interface objects

******* A Note on IP Versions

******* IP Host Addresses

******* Defining Networks

******* Host Interfaces

****** Inspecting Address/Network/Interface Objects

****** Networks as lists of Addresses

****** Comparisons

****** Using IP Addresses with other modules

****** Getting more detail when instance creation fails

***** Argument Clinic How-To

****** The Goals Of Argument Clinic

****** Basic Concepts And Usage

****** Converting Your First Function

****** Advanced Topics

******* Symbolic default values

******* Renaming the C functions and variables generated by Argument
           Clinic

******* Converting functions using PyArg_UnpackTuple

******* Optional Groups

******* Using real Argument Clinic converters, instead of "legacy
           converters"

******* Py_buffer

******* Advanced converters

******* Parameter default values

******* The "NULL" default value

******* Expressions specified as default values

******* Using a return converter

******* Cloning existing functions

******* Calling Python code

******* Using a "self converter"

******* Writing a custom converter

******* Writing a custom return converter

******* METH_O and METH_NOARGS

******* tp_new and tp_init functions

******* Changing and redirecting Clinic's output

******* The #ifdef trick

******* Using Argument Clinic in Python files

**** NLP with Python
**** Python for Data Analyse
***** DONE Preliminaries
***** TODO Introductory Examples <2016-01-18 Mon>
****** collections pack
***** TODO IPython: An Interactive Computing and Development Environment
      <2016-01-18 
      
* Enhance general coding grit
** [[https://drive.google.com/file/d/0BzoOGnxA0v1FSkFNSXg4MWVpTkE/view?usp%3Dsharing][Crack Coding Interview]]
*** [[http://careercup.com/][Additional information]] on website
** [[https://www.hackerrank.com/feed][HackerRank.com]] exercises

* Discover Git workflow subtleties

** Fork useful projects

*** DONE EffectivePython
*** DONE Python-Patterns
** Evaluate it in educational purposes
** Open pull request
* OpenSource contributing
  https://github.com/milkypostman/melpa
