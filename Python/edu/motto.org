
* Knowledge is power Â©				      :True:InitialPostulate:
** it is product of education;					       :True:

*** TODO reading;

*** TODO thinking;

*** TODO practicing;

** all knowledges reside in the memory;

*** they require repetition;

*** the spaced repetition is the best approach;
   
* Enhance English [0%] 						    :English:
** TODO Grammar [0%]
*** TODO Tutorial [37%]
    [[http://learnenglish.britishcouncil.org/en/book-english-grammar][British Council]]
**** DONE Pronouns [100%]
***** DONE Personal pronouns
***** DONE it and there
***** DONE you and they
***** DONE possessive pronouns (see possessives:- pronouns)

      | subject | object | pos.adj | pos.pron |
      |---------+--------+---------+----------|
      | I       | me     | my      | mine     |
      |---------+--------+---------+----------|
      | you     | you    | your    | yours    |
      |---------+--------+---------+----------|
      | he      | him    | his     | his      |
      |---------+--------+---------+----------|
      | she     | her    | her     | hers     |
      |---------+--------+---------+----------|
      | we      | us     | our     | ours     |
      |---------+--------+---------+----------|
      | they    | them   | their   | theirs   | 
  
***** DONE this, that, these and those
      What was that you said?
      This chicken tastes very good.
      Hello, this is Sandra speaking, how may I help you?
      These throuses aren't the right size.
      Whose is that silver Mersedes over there?
      I'm John and these are my children Molly and Jake.
      What are those men doing on the roof?
      Do you take this woman to be your lawfully wedded wife?
***** DONE one and ones
      How old are my children? The younger one is four and the older
      one is seven.
      The new mobiles are much lighter than the old ones.
      I don't mind what kind of car it is, I just want one that gets
      me there.
      Which do you prefer? This one, or that one?
      I need some new glasses. The ones I have at the moment are broken.
      I hope this holiday will be one to remember.
***** DONE questions
      What you are afraid of?
      Which train did you come on?
      Who they are playing against?
      Which party are you going to vote for?
      What kind of music do you listen to?
      Who does she remaind you of?
***** DONE reflexive pronouns
      The reflecxive pronouns are:

      | singular | myself - yourself - himself - herself - itself |
      |----------+------------------------------------------------|
      | plural   | ourselves - yourselves - themselves            |

      Most common transitive verbs:
      | amuse     | blame | cut     | dry     | enjoy | help | hurt |
      |-----------+-------+---------+---------+-------+------+------|
      | introduce | kill  | prepare | satisfy | teach | see  | find |

      We do not use a reflexive pronoun after verbs which describe
      things people usually do for themselves, such as wash, shave, dress.

      Mary, you shouldn't blame yourself about the accident.
      Don't worry about us. We can amuse ourselves for an hour or two.
      I never really had lessons, I just taught myself.
      I thought it was a bit rude. She never introduced herself.
      It's long time since they've enjoyed themselves so much.
      It's a very clever machine. It turns itself off.
      He cut himself shaving today.
      Ladies and gentlemen. There's masses of food, so please help yourselves.

***** DONE reciprocal pronouns: each other and one another
      The animals looked at each other.
      Romeo and Juliet loved each other.
      You and Jack didn't talk to each other.
      We gave present to each other.
      My girlfriend and I met one another's parents last night.
      My brother and I used to borrow each other's clothes.
***** DONE indefinite pronouns

      | somebody  | someone  | something  |
      |-----------+----------+------------|
      | anybody   | anyone   | anything   |
      | nobody    | no one   | nothing    |
      | everybody | everyone | everything |

      I went to Baker's house this morning but there was nobody home.
      The fridge is empty. We need to buy something for dinner tonight.
      I don't want to talk with Stewart. I don't have anything to say to him.
      I've left my wallet at home. Can anybody lend me a bit of money?
      Isabelle is a really popular manager. Everybody likes and respects her.
      Hello? Is anybody there?
      Louise is a huge fan of Elvis Prestley. She knows everything about him.
      I've had flue for the past three weeks, and nothing seems to make it
      any better.
      >>
      Everybody is saying that Nadal will win the match, but I'm not so sure.
      If anybody has any questions, they're very welcome to come and ask me.
      Nobody in my family eats meat.
      Somebody stole my wallet yesterday. They took it from my desk.
      Helena sent twenty job applications but nobody replied.
      My home town is the same as it was twenty years ago; nothing has changed.
      
***** DONE relative pronouns
      
      | Subject | Object | Posessive |
      |---------+--------+-----------|
      | who     | who(m) | whose     |
      |---------+--------+-----------|
      | which   | which  | whose     |
      |---------+--------+-----------|
      | that    | that   |           |

      He is the artist whose paintings sell for millions.
      That's a song that reminds me of my youth.
      She's only person who really understands me.
      He tore up the photograph, who upset me.
      They had four children, all of whom went to university.
      She wrote a best-selling book, the name of which I've completely
      forgotten.
      Where's the girl who is selling the ice-cream?
      Isn't that the man, whose brother was a famous pianist?
**** DONE Determiners and quantifiers [100%]
     - Determiners
       #+BEGIN_QUOTE
       D are words wich come at the beginning of the noun phrase.
       They tell use whether the noun is specific or general.
       #+END_QUOTE
       + Specific D:
	 - the definite article: the
	 - possesives: my, your, his, her, its, our, their, whose
	 - demonstratives: this, that, these, those
	 - interrogatives: which
       + General D:
	 - a, an, any, another, other, what
	   + we use any with a singular noun or an uncount noun when
	     we are talking about all of those people or things
	   + we use another to talk about an additional person or thing
	   + other is the plural form of another
       + With no D:
	 - uncount nouns
	 - plural nouns
     - Quantifiers
       #+BEGIN_QUOTE
       We use quantifiers when we want to give someone information about
       the number of something: how much or how many.
       #+END_QUOTE
***** DONE interrogative determiners: which and what
      - We use 'which' as a determiner to ask a question about a specific
	group of people or things:
	+ Which restaurant did you go to?
	+ Which countries in South America have you visited?
      - When we are asking a general question we use 'what' as a determiner:
	+ What films do you like?
	+ What university did you go to?
***** DONE indefinite article: a and an
      1. We use the indefinite article, a/an, with count nouns when the 
	 hearer/reader does not know exactly which one we are referring to:
	 - Police are searching for a 14 year-old girl.
      2. We also use it to show the person or thing is one of a group:
	 - She is a pupil at London Road School.
      3. We do not use an indefinite article with plural nouns and uncount
	 nouns:
	 - She was wearing blue shoes. (=plural noun)
	 - She has short blonde hair. (=uncount noun)
      4. We use a/an to say what someone is or what job they do:
	 - My brother is a doctor.
	 - George is a student.
      5. We use a/an with a singular noun to say something about all things
	 of that kind:
	 - A man needs friends.
	 - A dog likes to eat meat.
      Train set:
      - A woman has the right to a career. (5)
      - Pandas eat only one specific type of bamboo. (3)
      - The house was bought by Italian couple. (3)
      - She worked as a waitress to help pay for her course. (4)
      - He's been a Chelsea fan for years. (2)
      - I was talking to a guy about that the other day. (1)
      - He seems to know a lot about wine. (3)

***** DONE definite article: the
      We use the definite article in front of a noun when we believe the
      hearer/reader knows exactly what we are referring to.
      - because there is only one:
	+ The Pope is visiting Russia.
	+ The Moon is very bright tonight.
	+ The Shah of Iran was deposed in 1979.
	+ This is why we use the definite article with a superlative
	  adjective:
	  = He is the tallest boy in the class.
	  = It is the oldes building in the town.
      - because there is only one in that place or in those surroundings:
        | We live in a small vilage next to the church  | The church in our village |
        |-----------------------------------------------+---------------------------|
        | Dad, can I borrow the car?                    | The car that belongs to   |
        |                                               | our family                |
        | When we stayed at my grandmother's house we   |                           |
        | went to the beach every day.                  | The beach near my         |
        |                                               | grandmother's house       |
        | Look at the boy in the blue shirt over there. | The boy I am pointing at  |
      - because we have already mentioned it;
	+ A woman who fell 10 meters from High Peak was lifted to safety by
	  helicopter. The woman fell while climbing.
	+ The rescue is the latest in a series of incidents on High Peak.
	  In January last year two men walking the peak were killed in a fall.
	  
	  We also use the definite article:
	  
      - to say something about all the things referred by a noun:
	+ The wolf is not really a dangerous animal (= Wolves are not 
	  really dangerous animals)
	+ The kangaroo is found only in Australia (= Kangaroos are found
	  only in Australia)
	+ The heart pumps blood around the body. (= Hearts pump blood 
	  around bodies)
      - We use definite article in this way to talk about musical instruments:
	+ Joe plays the piano really well. (= Joe can play any piano)
	+ She is learning the guitar.(=She is learning to play any guitar)
      - to refer to a system or service:
	+ How long does it take on the train?
	+ I heard it on the radio.
	+ You should tell the police.
      - With adjectives like rich, poor, elderly, unemployed to talk about 
	groups of people:
	+ Life can be very hard for the poor.
	+ I think the rich should pay more taxes.
	+ She works for a group to help the disabled.

	  The definite article with names:
	  
      - We do not normally use the definite article with names:
	+ William Shakespeare wrote Hamlet.
	+ Paris is the capital of France.
	+ Iran is in Asia.
      - But we do use the definite article with:
	+ countries whose names include words like kingdom, states or republic:
	  + the United Kingdom, the Kingdom of Nepal, the United States
	+ countries which have pluran nouns in their names:
	  - the Netherlands, the Philippines.
	+ geographical features, like as mountain ranges, groups of islands
	  rivers, seas, oceans and canals: 
	  + the Himalayas, the Canaries, the Atlantic, the Amazon, the Panama
	    Canal
	+ newspapers;
	+ well known buildings or works of art;
	+ organisations;
	+ hotels, pubs and restaurants (we do not use the definite article 
	  in the name of the hotel or restaurant is the name of the owner)
	+ families: the Obamas, the Jacksons
	  
***** DONE quantifiers
      #+BEGIN_QUOTE
      We use quantifiers when we want to give someone information about
      the number of something: how much or how many.
      #+END_QUOTE

      Sometimes we use a quantifier in the  place of a determiner:
      - Most children start school at the age of five.
      - We ate some bread and butter.
      - We saw lots of birds.
	
      We use these quantifiers with both count and uncount nouns:
      | all  | any  | enough | less    | a lot of | lots of |
      | more | most | no     | none of | some     |         |

      and some more colloquial forms:
      | plenty of | heaps of | a load of | loads of | tons of | etc |

      some quantifiers can be used only with count nouns:
      | both | each | either | (a) few | fewer | neither | several |

      and some more colloquial forms:
      | a couple of | hundreds of | thousands of | etc |

      some quantifiers can be used only with uncount nouns:
      | a little | (not) much | a bit of | 

      and, particularly with abstract nouns such as time, money, trouble,
      etc:, we often use:
      | a great deal of | a good deal of | 

      Members of groups
      
      You can put a noun after a quantifier when you are talking about
      members of a group in general:
      - Few snakes are dangerous.
      - Both brothers work with their father.
      - I never have enough money.

      ...but if you are talking about a specific group of people or things,
      use of the... as well:
      - Few of the snakes are dangerous.
      - All of the children live at home.
      - He has spent all of his money.

      Note that, if we are talking about two people or things we use
      quantifiers both, either and neither.
      | One supermarket | Two supermarkets     | More than two supermarkets |
      |-----------------+----------------------+----------------------------|
      | The supermarket | Both supermarkets    | All the supermarkets were  |
      | was closed      | were closed.         | closed.                    |
      |-----------------+----------------------+----------------------------|
      | The supermarket | Neither of the       | None of the supermarkets   |
      | wasn't open.    | supermarkets was     | were open.                 |
      |                 | open.                |                            |
      |-----------------+----------------------+----------------------------|
      | I don't think   | I don't think either | I don't think any of the   |
      | the supermarket | of the supermarkets  | supermarkets were open.    |
      | was open.       | was open.            |                            | 

      & Nouns with either and neither have a singular verb.

      Singular quantifiers:

      We use every or each with a singular noun to mean all:
      | There was a party in every street      | = | There were parties in all the streets      |
      |----------------------------------------+---+--------------------------------------------|
      | Every shop was decorated with          |   | All the shops were decorated with          |
      | flowers                                | = | flowers.                                   |
      |----------------------------------------+---+--------------------------------------------|
      | Each child was given a prize.          | = | All the children were given a prize.       |
      |----------------------------------------+---+--------------------------------------------|
      | There was a prize in each competition. | = | There were prizes in all the competitions. |

      We often use every to talk about times like days, weeks and years:
      - When we were children we had holidays at our grandmother's every year.
      - When we stayed at my grandmother's house we went to the beach every day.
      - We visit our daughter every Christmas.

      BUT: We do not use a determiner with every and each. We DO NOT say:
      -- The every shop was decorated with flowers.
      -- The each child was given a prize.

      Activities:

      - Could you dive me some advice?
      - There are only a few players in the world with his skill.
      - Every year I promise myself I will lose some weight.
      - When I got there both the banks had closed.
      - Can you give me a couple of pounds for the bus fare?
      - I went to a great deal of trouble to get those tickets.
      - Either that dog goes or I do!

**** DONE Possessives [100%]
***** DONE nouns
      We use a noun with 's with a singular noun show possession:
      - We are having a party at John's house.
      - Michael drove his friend's car.
	
      We use s' with plural noun ending in -s:
      - This is my parents' house.
      - Those are ladies' shoes.

      But we use 's with other plural nouns:
      - These are men's shoes.
      - Children's clothes are very expensive.

      We can use a possessive instead of a noun phrase to avoid repeating
      words:
      | Is that John's car? | No, it's Mary's [car]. |
      |---------------------+------------------------|
      | Whose coat is this? | It's my wife's [coat]. |   

***** DONE adjectives

      | Subject | Object | Possesive |
      |---------+--------+-----------|
      | I       | me     | my        |
      | You     | you    | your      |
      | He      | him    | his       |
      | She     | her    | her       |
      | It      | it     | its       |
      | We      | us     | our       |
      | They    | them   | their     |

      We use possessive adjectives:
      - to show something belongs to somebody:
	+ That's our house.
	+ My car is very old.
      - for relations and friends:
	+ My mother is a doctor.
	+ How old is your sister?
      - for parts of the body:
	+ He's broken his arm.
	+ She's washing her hair.
	+ I need to clean my teeth.

      Examples:
      - She brushes her teeth three times a day.
      - We are checking our luggage in. Can I call you
	back in a five minutes?
      - The dog wagged its tail when it saw the postman.
      - He's almost bald, so he never combs his hair.
      - Did you know cyclists shave their legs?
      - Do you open your eyes under water?
      - I can't touch my toes any more. Time to go to the gym.

***** DONE pronouns
      | Subject | Object | Possessive adj. | Possessive pronouns |
      |---------+--------+-----------------+---------------------|
      | I       | me     | my              | mine                |
      | You     | you    | your            | yours               |
      | He      | him    | his             | his                 |
      | She     | her    | her             | hers                |
      | It      | it     | its             | its                 |
      | We      | us     | our             | ours                |
      | They    | them   | their           | theirs              |

      We can use a possessive pronoun instead of a noun phrase:

      | Is that John's car? |   | No, it's [my car] | > | No, it's mine  |
      |---------------------+---+-------------------+---+----------------|
      | Whose coat is this? |   | It is [your coat] | > | Is it yours?   |
      |---------------------+---+-------------------+---+----------------|
      | Her coat is grey,   |   | Her coat is grey, |   | mine is brown. |
      | [my coat] is brown  |   |                   |   |                | 

      We can use possessive pronouns after of.
      We can say:
      - Susan is one of my friends.
      - Susan is a friend of mine.

      - I am one of Susan's friends.
      - I am a friend of Susan's.

      Exercises:
      - This is your room and that is hers.
      - Shall we watch the match at their house or ours?
      - That's George's car and this is mine.
      - Her birthday is on the 12th and his is on the 13th.
      - Is the party at our place or theirs?
      - My dessert was the ice cream and yours was the mousse.

***** TODO questions

***** TODO pronouns

** TODO Pronounce [0%]
*** TODO Reading aloud at the regualr base [33%]
**** TODO Adventures of Hucklberry Finn
**** TODO My Family and Other Animals
**** DONE Python Talk to Me podcast
** TODO Vocabulary [50%]
*** DONE Vocabla repetition
*** TODO Quora reading
**** TODO Quotations about life sense
     #+BEGIN_QUOTE
     One easy way to create a unique skill is to combine two
     seemingly unrelated skills into one skill.  Being the best
     computer scientist in the world is really hard.  Being the
     person who knows the most about dolphins is really hard.
     But being the person who best knows about the intersection
     of software and dolphins is accomplishable.

     But if you and I have a debate and we argue two sides, and
     you are proven wrong, that doesn't make me right.  I could
     be just as wrong as you.
     #+END_QUOTE
**** TODO Software Engineering maroon
     #+BEGIN_QUOTE
     Decorators are convenient for factoring out common prologue,
     epilogue, and/or exception-handling code in similar functions
     (much like context managers and the "with" statement), such
     as:
     - Acquiring and releasing locks (e.g. a "@with_lock(x)" decorator);
     - Entering a database transaction (and committing if successful, 
       or rolling back upon encountering an unhandled exception);
     - Asserting pre- or post-conditions (e.g. "@returns(int)");
     - Parsing arguments or enforcing authentication (especially in web 
       application servers like Pylons where there's a global request 
       and/or cookies object that might accompany formal parameters 
       to a function);
     - Instrumentation, timing or logging, e.g. tracing every time a 
       function runs;
     - They are also used as shorthand to define class methods 
       (@classmethod) and static methods (@staticmethod) in Python 
       classes.
     #+END_QUOTE
     
***** DONE questions
      We use whose to ask questions:
      | Pattern A             | Pattern B             |
      |-----------------------+-----------------------|
      | Whoswe coat is this?  | Whose is this coat?   |
      | Whose book is that?   | Whose is that book?   |
      | Whose bags are those? | Whose are those bags? | 

***** DONE reciprocal pronouns (Ð¾Ð±Ð¾ÑÐ´Ð½ÑÐ¹)
      - They helped to look after each other's children.
      - We often stayed in one another's houses.
      One another refers to group larger than two members.
**** DONE Adjectives [66%]
     We use adjectives to describe nouns.
     Most adjectives can be used in front of a noun:
     - They have a beautiful house.
     - We saw a very exciting film last night.

     or after a link verb like be, look and feel:
     - Their house is beautiful.
     - That film looks interesting.

     Examples:
     - I saw a really good program me on TV last night.
     - My sister's got two young children.
     - I didn't know your mother was French.
     - Are you OK? You look terrible!
     - I've just bought a new printer.
     - This chicken doesn't smell very good. How old is it?
     - They're building a big factory next to our home.
     - Poland can be a very cold country in the winter.
     - Sorry, can you stop the car? I feel sick.
     - I'd like to see than new Michael Moore film. It sounds
       interesting.
***** DONE adjectives: -ed and -ing
      A lot of adjectives are made from verbs by adding -ing or -ed:
      - ing adjectives:
	the commonest -ing adjectives are:
	+ amusing
	+ shocking
	+ surprising
	+ frightening
	+ interesting
	+ disappointing
	  
      If you call something interesting you mean it interests you.
      If you call something frightening you mean it frightening you.

      Examples:
      - I read very interesting article in the newspaper today.
      - That Dracula film was absolutely terrifying.
	
      -ed adjectives:

      The commonest -ed adjectives are:
      + annoyed
      + bored
      + frightened
      + worried
      + tried

	If something annoys you, you can say you feel annoyed. If something
	interests you, you can say you are interested.

	Example:
	- The children had nothing to do. They are bored.

***** DONE order of adjectives
      Sometimes we use more than one adjective in front of a noun:
      - He was a nice intelligent young man.
      - She had a small round black wooden box.

      Opinion adjectives:

      Some adjectives give a general opinion. we can use these adjectives to
      describe almost any noun:

      | good      | bad       | lovely | strange   | beautiful | nice  |
      |-----------+-----------+--------+-----------+-----------+-------|
      | brilliant | excellent | awful  | important | wonderful | nasty | 

      Some adjectives give a specific opinion. We only use these adjectives
      to describe particular kinds of noun:
      - Food:
	+ tasty
	+ delicious
      - Furniture, buildings:
	+ comfortable
	+ uncomfortable
      - People, animals:
	+ clever
	+ friendly
	+ intelligent

      We usually put a general opinion in front of a specific opinion:
      - Nice tasty soup.
      - A nasty uncomfortable armchair.
      - A lovely intelligent animal.

      Usually we put an adjective that gives an opinion in front of an adjective
      that is descriptive:
      - a nice red dress;
      - a silly old man;
      - those horrible yellow curtains

      We often have two adjectives in front of a noun:
      - a handsome young man;
      - a big black car;
      - that horrible big dog

      Sometimes we have three adjectives, but it is unusual:
      - a nice handsome young man;
      - a big black American car;
      - that horrible big fierce dog

      It is very unusual to have more than three adjectives.

      Adjectives usually come in this order:

      | 1       | 2        |    3 |     4 |   5 |      6 |           7 |        8 |
      |---------+----------+------+-------+-----+--------+-------------+----------|
      | General | Specific | Size | Shape | Age | Colour | Nationality | Material |
      | opinion | opinion  |      |       |     |        |             |          |

      We use some adjectives only after a link verb:

      | afraid | alive | alone | asleep | content | glad |
      |--------+-------+-------+--------+---------+------|
      | ill    | ready | sorry | sure   | unable  | well |

      Some of the commonest -ed adjectives are normally used only after a
      link verb:
      - annoyed;
      - finished;
      - bored;
      - pleased;
      - thrilled

      We say:
      - Our teacher was ill.
      - My uncle was very glad when he heard the news.
      - The policeman seemed to be very annoyed.

      A few adjectives are used only in front of a noun:
      | north | northern | countless  | eventful |
      | south | southern | occasional | indoor   |
      | east  | eastern  | lone       | outdoor  |
      | west  | western  |            |          |

      We say:
      - He lives in the eastern district.
      - There were countless problems with the new machinery.

***** DONE comparative and superlative adjectives
      We use comparative adjectives to describe people and things:
      - This car is certainly better but it's much more expensive.
      - I'm feeling happier now.
      - We need a bigger garden.

      We use than when we want to compare one thing with another:
      - She us two years older than me.
      - New York is much bigger than Boston.
      - He is a better player than Ronaldo.
      - France is a bigger country than Britain.

      When we want to describe how something or someone changes we can
      use two comparatives with and:
      - The balloon got bigger and bigger.
      - Everything is getting more and more expensive.
      - Grandfather is looking older and older.

      We often use the with comparative adjectives to show that one
      thing depends on another:
      - When you drive faster it is more dangerous.
	+ The faster you drive, the more dangerous it is.
      - When they climbed higher it got colder.
	+ The higher they climbed, the colder it got.

      Superlative adjectives:

      We use the with a superlative:
      - It was the happiest day of my life.
      - Everest is the highest mountain in the world.
      - That's the best film I've seen this year.
      - I have three sisters, Jan is the oldest and Angela is the youngest.

***** DONE intensifiers

      We use words like very, really and extremely to make adjectives
      stronger:
      - It's a very interesting story.
      - Everyone was very excited.
      - It's a really interesting story.
      - Everyone was extremely excited.

      We call these words intensifiers. Other intensifiers are:

      | amazingly  | exceptionally | incredibly |
      |------------+---------------+------------|
      | remarkably | particularly  | unusually  |

      We also use enough to say more about an adjective, but enough comes
      after its adjective:
      - If you are seventeen you are old enough to drive a car.
      - I can't wear those shoes. They're not big enough.

      Intensifiers with strong adjectives:

      Strong adjectives are words like:

      | enormous, huge             | very big    |
      |----------------------------+-------------|
      | tiny                       | very small  |
      |----------------------------+-------------|
      | brilliant                  | very clever |
      |----------------------------+-------------|
      | awful, terrible,           |             |
      | disgusting, dreadful       | very bad    |
      |----------------------------+-------------|
      | certain                    | very sure   |
      |----------------------------+-------------|
      | excellent, perfect, ideal, |             |
      | wonderful, splendid        | very good   |
      |----------------------------+-------------|
      | delicious                  | very tasty  |

      We do not use very with these adjectives.
      With strong adjectives, we normally use intensifiers like:

      | absolutely | completely    | totally      | utterly |
      |------------+---------------+--------------+---------|
      | really     | exceptionally | particularly | quite   | 

      - The film was absolutely awful.
      - He was an exceptionally brilliant child.
      - The food smelled really disgusting.

      Advanced:

      Some intensifiers go with particular adjectives depending on
      the meaning of the adjective:

      - Iâm afraid your wife is dangerously ill.
      - He was driving dangerously fast.
      - The car was seriously damaged.
      - Fortunately none of the passengers was seriously hurt.

      Some intensifiers go with particular adjectives. For example we
      use the intensifier highly with the adjectives successful,
      intelligent, likely and unlikely:

      - He was highly intelligent.
      - Sheâs a highly successful businesswoman

      but we do not say:

      - We had a highly tasty meal.
      - That is a highly good idea.

      We use the intensifier bitterly with the adjectives disappointed,
      unhappy and cold:

      - I was bitterly unhappy at school.
      - We were bitterly disappointed to lose the match.
      - It can get bitterly cold in winter.

      Activities:

      - My mother was a highly successful tennis player in her time. She
	won loads of tournaments.
      - The car was so seriously damaged in the  accident that it had to be
	scrapped.
      - Tom was deliriously happy when he heard he'd become a grandfather.
	He can't stop smiling.
      - I was deeply disappointed by my team's performance last night.
	It was terrible.
      - The restaurant was shut down when three people fell gravely ill
	after eating there.
      - Esther's desperately unhappy working at the bank so she's looking
	for a new job.
      - In order to be a successful detective, you need to be keenly
	observant.
      - Have I met Maria's new boyfriend? No, but I've seen him and he's
	drop-dead gorgeous!
      - Professor Jones was a universally popular head of department.
	Everyone was truly sorry to see him retire.
      - The government is firmly committed to reducing public debt, and
	is therefore bitterly opposed to any increases.  

      You need to use your dictionary to find what sort of nouns these
      intensifiers go with.
***** TODO mitigators
***** TODO noun modifiers

**** TODO Adverbials
**** TODO Nouns
**** TODO Verbs
**** TODO Clause, phrase and sentence
*** TODO Exercises

* Jargon & definition 						    :corpora:
** PP4E
*** Letâs step back for a moment and consider how far âve come.

**** 

*** If youâve already studied Python in any sort of depth,
    you probably already know that this is where its OOP support begins
    to become attractive:

    Structure
    With OOP,  can naturally associate processing logic with record dataâclasses
    provide both a program unit that combines logic and data in a single package and
    a hierarchy that allows code to be easily factored to avoid redundancy.

    Encapsulation
    With OOP,  can also wrap up details such as name processing and pay increases
    behind method functionsâi.e.,  are free to change method implementations
    without breaking their users.

    Customization
    And with OOP,  have a natural growth path. Classes can be extended and cus-
    tomized by coding n subclasses, without changing or breaking already working
    code.

** PfDA
*** Munge/Munging/Wrangling
    Describes the overall process of manipulating unstructured and/or messy data
    into a structured or clean form. The word has snuck its way into the jargon
    of many modern day data hackers. Munge rhymes with âlungeâ.

*** Interacting with the outside world
    Reading and writing with a variety of file formats and databases.

*** Preparation
    Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis.

*** Transformation
    Applying mathematical and statistical operations to groups of data sets to
    derive new data sets. For example, aggregating a large table by group variables.

*** Modeling and computation
    Connecting your data to statistical models, machine learning algorithms, or other
    computational tools

*** Presentation
    Creating interactive or static graphical visualizations or textual summaries

** Python Beyond
   A read-eval-print loop (REPL)
** OrgMode
*** Curious thought
    #+BEGIN_QUOTE
        Let us change our traditional attitude to the construction of
	programs: Instead of imagining that our main task is to instruct
	a computer what to do, let us concentrate rather on explaining
	to human beings what we want a computer to do.

	The practitioner of literate programming can be regarded as an
	essayist, whose main concern is with exposition and excellence of
	style. Such an author, with thesaurus in hand, chooses the names
	of variables carefully and explains what each variable means.
	He or she strives for a program that is comprehensible because
	its concepts have been introduced in an order that is best for
	human understanding, using a mixture of formal and informal
	methods that reinforce each other.

    â Donald Knuth
    #+END_QUOTE
*** Getting Things Done is a time-management method, described in a book of the same title
    by productivity consultant David Allen. It is often referred to as GTD. The GTD method
    rests on the idea of moving planned tasks and projects out of the mind by recording
    them externally and then breaking them into actionable work items. This allows one to
    focus attention on taking action on tasks, instead of on recalling them.
** Cracking Interview
*** A hiring committee typically wants to see one interviewer
    who is an "enthusiastic endorser"
*** Be ready to code on a whiteboard and make sure all of your
    thoughts are clearly communicated
*** Well, I may be embellishing a little, but hear me out.
*** I am not exaggerating to say that I did not understand
    a single answer she gave during the interview p.16
*** One of the most important messages that you, as a candidate,
    can convey in your intervi is hiring me will make your lives easier
*** It was a real mess; we'd inherited a nasty ball of spaghetti,
    and we needed people who could jump in, figure things out,
    and be part of the solution.
*** Sometimes, I donât have a very good attention to detail.
    While thatâs good because it lets me execute quickly, it also means
    that I sometimes make careless mistakes. Because of that, I make
    sure to always have someone else double check my work.
*** Table 1
*** Table 2
*** I can go into more details if youâd like
*** I asked him open-ended questionson how he felt it was going,
    and which components he was excited about tackling.
*** Handling Technical Questions
**** So when you get a hard question, donât panic.
     Just start talking aloud about how you would solve it.
*** Five Algorithm Approaches
**** I: EXAMPLIFY
**** II: PATTERN MATCHING
**** III: SIMPLIFY & GENERALIZE
**** IV: BASE CASE AND BUILD
**** V: DATA STRUCTURE BRAINSTORM
*** If what you want is to stay an engineer for life, then there is
    absolutely nothing wrong with that.
*** Top Ten Mistakes Candidates Make
    #+BEGIN_QUOTE
    Quality beats quantity
    #+END_QUOTE
    When asked a question, break your answer into three parts
    (Situation / Action / Response, Issue 1 / Issue 2 / Issue 3, etc)
    and speak for just a couple sentences about each. If I want more
    details, Iâll ask!
       
** Writing Idiomatic Python

*** Oftentimes,
    functions need to accept an arbitrary list of positional parameters
    and/or keyword parameters , use a subset of them, and forward the rest to
    another function.
*** Though this is explicitly mentioned in the Python tutorial,
    it nevertheless surprises even experienced developers.
*** Oftentimes, functions need to accept an arbitrary list of positional
    parameters and/or keyword parameters , use a subset of them, and forward
    the rest to another function. Using *args and **kwargs as parameters
    allows a function to accept an arbitrary list of positional and keyword
    arguments, respectively.
*** 
** Effective Python

*** Python3

**** bytes
     raw 8-bit values
**** str
     Unicode characters
*** Python2

**** str
     raw 8-bit values
**** Unicode
     Unicode characters
** Tutorial
   If you still don't understand how methods work, a look at the
   implementation can perhaps clarify matters.
   

* Enlarge Emacs toolbox 					      :Emacs:
** DONE Elpy
   [[http://elpy.readthedocs.org/en/latest/ide.html#documentation][Elpy]]
** DONE Update Emacs version up to 24.5
   - Package `emacs-24.4' is unavailable
   - Download from http://ftp.gnu.org/gnu/emacs/
   - tar -xf emacs*
   - sudo apt-get remove emacs
      remove old version
   - cd emacs* && ./configure && make
   - sudo checkinstall -D
      create .deb package
   - sudo apt-mark hold emacs
     to prevent unneccessary update with 14.04 core
** DONE OrgBullets
   https://github.com/sabof/org-bullets
** DONE YaSnippet
   [[http://capitaomorte.github.io/yasnippet/][YaSnippet]]
*** predefined snippets for PyMode
    ~/.emacs.d/elpa/elpy-1.10.0/snippets/python-mode/
** DONE OrgMode
   [[http://orgmode.org/orgcard.pdf][refCard]] <2016-01-18 Mon>
*** DONE Reveal OrgMode BaBel <2016-03-01 Tue> 
**** Intro
     http://orgmode.org/worg/org-contrib/babel/intro.html
**** Tutorial
     http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
**** Configure languages
     http://orgmode.org/worg/org-contrib/babel/languages.html#configure
**** Supported languages
     http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
**** shortcuts
     |----------+------------------|
     | Sequence | Expands to       |
     |----------+------------------|
     | <s       | #+BEGIN_SRC      |
     | <e       | #+BEGIN_EXAMPLE  |
     | <q       | #+BEGIN_QUOTE    |
     | <v       | #+BEGIN_VERSE    |
     | <V       | #+BEGIN_VERBATIM |
     | <c       | #+BEGIN_CENTER   |
     | <l       | #+BEGIN_LaTeX    |
     | <L       | #+LaTeX          |
     | <h       | #+BEGIN_HTML     |
     | <H       | #+HTML           |
     | <a       | #+BEGIN_ASCII    |
     | <A       | #+ASCII:         |
     | <i       | #+INDEX:         |
     | <I       | #+INCLUDE:       |
     |----------+------------------|



*** Dates <2016-02-03 Wed>
*** Tags <2016-02-04 Thu>
** DONE KeyChord
   [[http://www.emacswiki.org/emacs/key-chord.el][KeyChord]] <2016-01-18 Mon>
*** mkdir ~/.emacs.d/lisp/
**** put into it key-chord.el
**** and key-chord-map.el:
     (key-chord-define-global "hj"     'undo)
     (provide 'key-chord-map)
*** add into init.el:
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    (require 'key-chord)
    (key-chord-mode 1)
    (require 'key-chord-map)





This is a sample text to reveiw key-chords
How it works
** DONE ISpell
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling check]]
   DEADLINE: <2016-01-25 Mon>
** DONE Embedding Python source code into Org document
   Demands to install Org recent version 
*** This is the first and successful attempt			       :CODE:
    #+begin_src python :results output
      import sys
      print(sys.version)
      print("Hello, world!")
      print("This is a test")
      for i in range(4):
	  print(i)
    #+end_src python

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : Hello, world!
    : This is a test
    : 0
    : 1
    : 2
    : 3
*** Lets try to embed code snippet from outside
    #+BEGIN_SRC python
      print(sys.version)
          
    #+END_SRC

    #+RESULTS:

*** Examples from real world
    #+name: session_init
    #+begin_src python :results output :session test
      # Example from Slatkin's book
      a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
      print('First four:', a[:4])
      print('Last four: ', a[-4:])
      print('Middle two:', a[3:-3])
    #+end_src

    #+RESULTS: session_init
    : 
    : >>> First four: ['a', 'b', 'c', 'd']
    : Last four:  ['e', 'f', 'g', 'h']
    : Middle two: ['d', 'e']

    #+BEGIN_SRC python :results output :session test
      import sys
      # it's the session test
      print('This is a session variable a : ', a)
    #+END_SRC

    #+RESULTS:
    : 
    : ... This is a session variable a :  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

*** Session test
    #+BEGIN_SRC python :results output :session test 
      print(sys.version)
      print('How it might be possible!', a[2:5])
    #+END_SRC

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : How it might be possible! ['c', 'd', 'e']

*** Full-Fledged
    #+BEGIN_SRC python :results output
      # initialize data to be stored in files, pickles, shelves

      # records
      bob = {'name': 'Bob Smith', 'age': 42, 'pay': 30000, 'job': 'dev'}
      sue = {'name': 'Sue Jones', 'age': 45, 'pay': 40000, 'job': 'hdw'}
      tom = {'name': 'Tom',       'age': 50, 'pay': 0,     'job': None}

      # database
      db = {}
      db['bob'] = bob
      db['sue'] = sue
      db['tom'] = tom

      print('\n')
      for key in db:
          print(key, '=>\n  ', db[key])


    #+END_SRC

    #+RESULTS:
    : 
    : 
    : bob =>
    :    {'pay': 30000, 'job': 'dev', 'age': 42, 'name': 'Bob Smith'}
    : sue =>
    :    {'pay': 40000, 'job': 'hdw', 'age': 45, 'name': 'Sue Jones'}
    : tom =>
    :    {'pay': 0, 'job': None, 'age': 50, 'name': 'Tom'}

** TODO New shortcuts						       :keys:
*** General								:gen:
**** Switch buffer in the stack C-x Left/Right
**** Word spell check M-x $
**** M-x ispell
**** GoTo M-g g, M-g M-g
**** Help with keys C-h b, d, k, v(ariable)
**** Elisp evaluation
     M-x eval-buffer
**** Bookmarks (set/goto/list/del:
     C-x r m/b/l/M-x [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]]-delete
**** Some keys in â*Bookmark List*â:
     âaâ â show annotation for the current bookmark
     âAâ â show all annotations for your bookmarks
     âdâ â mark various entries for deletion (âxâ â to delete them)
     âeâ â edit the annotation for the current bookmark
     âmâ â mark various entries for display and other operations, (âvâ â to visit)
     âoâ â visit the current bookmark in another window, keeping the bookmark list open
     âC-oâ â switch to the current bookmark in another window
     ârâ â rename the current bookmark
**** Text accumulation
     [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Accumulating-Text.html][==>]]
***** M-x append-to:
      buffer, register or file
***** M-x prepend-to:
      buffer or register
**** Read-only mode
     C-x C-r RET (view-mode)
     C-x C-q read-only mode toggle
**** Nero browser					       :nero:browser:
     M-x nero
**** Lynx inside					       :lynx:browser:
     M-x ansi-term RET lynx
**** Replace new line
     C-q C-j
**** Move forward/backward sentence
     M-e/a
**** Delete word/character
     M/C-d
     M-DEL previous word
**** Delete sentence
     M-k next
     C-x DEL previous
**** Kill line
     C-k
     M-C-k from end of the line up to the cursor
**** DONE Manipulation with frames
     C-x 5 b switch to buffer other frame
**** Mark ring 16 items there
     C-u C-SPC Jump to last mark
**** Undo
     C-_
**** TODO CUA mode
**** Comment
     M-; region
**** Completion
     M-/
**** TODO Tags
     C-x C-i
     M-.
**** eShell
     C-x m
**** Indent the region
     C-M-\
**** Spell checking
     M-x flyspell-mode
**** TODO flymake-mode for Python
**** Long scroll in two windows
     M-x follow-mode
**** List of keys in the particular mode
     C-h m
**** Version control
***** Diff
      C-x v =
***** Undo
      C-x v u
***** Commit log
      C-x v l
      - f - visit particular rev
      - d - review particualr diff
***** Magit
      - status C-x g RET
      - main Git concept involves a conscious atomic committing Â® 
**** Shell
     - eshell fully-customizing eLisp 
**** TODO cSSh feature
     launch many tasks in parallel on the different hosts
**** DONE color-theme.el
**** M-x oddmuse-edit
**** M-x irc /join #emacs
**** Blog about Emacs
     [[http://planet.emacsen.org][blog]]
**** Pluralsight
     great resource with video tutorials 
*** Orgmode
**** Tags
     Set C-c C-q
**** Tables
***** |header|...
***** Table header closing
      C-c <RET>
**** Babel
***** Execute code in the current subtree
      C-c C-v s
***** Backward to higher level heading
      C-c C-u
***** Find tag
      C-c \
***** Build sparse tree
      C-c / <extra-key>
***** Exit out from sparse tree
      C-c C-c
** DONE MELPA installation
** DONE Helm-dictionary install and test it up
** DONE Embedding Git
   sudo apt-get install git-el
** DONE MaGit
*** Core features
    In Magit staging a hunk or even just part of a hunk is as trivial as
    staging all changes made to a file.
    That being said, many users
    have reported that using Magit was what finally taught them what Git
    is capable of and how to use it to its fullest.
    Magit wraps and in many cases improves upon at least the following Git
    porcelain commands:
**** add
     Add file contents to the index
**** am
     Apply a series of patches from a mailbox
**** bisect
     Use binary search to find the commit that introduced a bug
**** blame
     Show what revision and author last modified each line of a file
**** branch
     List, create, or delete branches
**** checkout
     Switch branches or restore working tree files
**** cherry
     Find commits not merged upstream
**** cherry-pick
     Apply the changes introduced by some existing commits
**** clean
     Remove untracked files from the working tree
**** clone
     Clone a repository into a new directory
**** commit
     Record changes to the repository
**** config
**** describe
     Describe a commit using the most recent tag reachable from it
**** diff
     Show changes between commits, commit and working tree, etc
**** fetch
     Download objects and refs from another repository
**** format-patch
     Prepare patches for e-mail submission
**** init
**** log
     Show commit logs
**** remote
     Manage set of tracked repositories
**** request-pull
     Generates a summary of pending changes
**** reset
     Reset current HEAD to the specified state
**** revert
     Revert some existing commits
**** rm
     Remove files from the working tree and from the index
**** show
     Show various types of objects
**** stash
     Stash the changes in a dirty working directory away
**** submodule
     Initialize, update or inspect submodules
**** tag
     Create, list, delete or verify a tag object signed with GPG

*** Installation
    M-x package-install RET magit RET
**** Upgrade Emacs version >24.4 (see above)
**** Upgrade Git version at the upmost
     - sudo add-apt-repository ppa:git-core/ppa
     - sudo apt-get update
     - sudo apt-get install git
*** Getting started
*** Interface concepts
*** Manipulating
*** Transferring
*** Miscellaneous
*** Customizing
*** Plumbing
* Dive deeper into Python programming language 			     :Python:

** in six months <2016-07-15 Wed> 
** with:

*** Python3++
**** DONE Install and test Python3 devEnv
     virtualenv -p /usr/bin/python3 yourenv
     source yourenv/bin/activate
     pip install ipython
     DEADLINE: <2016-01-19 Tue>
**** DONE Install into devEnv:
     DEADLINE: <2016-01-20 Wed>
***** numpy
      sudo apt-get install python3-dev
      pip install numpy
***** pandas
      pip install pandas
***** nltk
      pip install -U nltk
      
***** matplotlib
      sudo apt-get install libfreetype6-dev
      sudo apt-get install libxft-dev
      pip install matplotlib 

http://github.com/pydata/pydata-book

** by studying with slope to hone:

*** Python's Theory						     :theory:
**** Official Python documentation			      :documentation:
***** The Python Tutorial [100%]
****** DONE Whetting Your Appetite

****** DONE Using the Python Interpreter

******* Invoking the Interpreter

******** Argument Passing

******** Interactive Mode

******* The Interpreter and Its Environment

******** Source Code Encoding

****** DONE An Informal Introduction to Python

******* Using Python as a Calculator

******** Numbers
	 #+BEGIN_SRC python :results output :session intro
	   2 + 2
	   tax = 12.5 / 100
	   price = 100.50
	   price + _  # last result in interactive mode
	   round(_, 2)

	 #+END_SRC

	 #+RESULTS:
	 : 4
	 : >>> >>> 104.5
	 : 104.5

******** Strings
	 #+BEGIN_SRC python :results output :session intro
	   'spam eggs'  # single quotes
	   s = 'First line.\nSecond line.'  # \n means newline
	   s
	   print(s)
	 #+END_SRC

	 #+RESULTS:
	 : 'spam eggs'
	 : >>> 'First line.\nSecond line.'
	 : First line.
	 : Second line.

	 +---+---+---+---+---+---+
	 | P | y | t | h | o | n |
	 +---+---+---+---+---+---+
	 0   1   2   3   4   5   6
	-6  -5  -4  -3  -2  -1

	String Methods
	Strings Formatting
	printf-style String Formatting

******** Lists
	 #+BEGIN_QUOTE
	 Mutable, indexed and ordered sequence
	 #+END_QUOTE

	 + features
	   shallow copy [:]
	   slicing [n:m]
	   concatenation

******* First Steps Towards Programming
	    #+BEGIN_SRC python :results output
	      # Fibonacci series
              a, b = 0, 1
              while b < 10:
		  print(b, end=", ")
		  a, b = b, a + b
	    #+END_SRC

****** DONE More Control Flow Tools

******* "if" Statements
	#+BEGIN_EXAMPLE
    	    x = int(input("Please enter an integer: "))
	#+END_EXAMPLE
******* "for" Statements
	#+BEGIN_SRC python :results output
	  # Measure some strings:
	  words = ['cat', 'window', 'defenestrate']
	  for w in words:
	      print(w, len(w))
	  print('==============')
	  for w in words[:]:
	      if len(w) > 6:
		  words.insert(0, w)
	  print(words)

	#+END_SRC

	#+RESULTS:
	: cat 3
	: window 6
	: defenestrate 12
	: ==============
	: ['defenestrate', 'cat', 'window', 'defenestrate']

******* The "range()" Function
	    #+BEGIN_SRC python :results output
              for i in range(5):
		 print(i, end=", ")
              print('==============')
	    #+END_SRC

	    #+RESULTS:
	    : 0, 1, 2, 3, 4, ==============

******* "break" and "continue" Statements, and "else" Clauses on Loops
	    #+BEGIN_SRC python :results output
              for n in range(2, 10):
		  for x in range(2, n):
                      if n % x == 0:
			  print(n, 'equals', x, '*', n//x)
			  break
		  else:
		      # loop fell through without finding a factor
		      print(n, 'is a prime number')

	    #+END_SRC

	    #+RESULTS:
	    : 2 is a prime number
	    : 3 is a prime number
	    : 4 equals 2 * 2
	    : 5 is a prime number
	    : 6 equals 2 * 3
	    : 7 is a prime number
	    : 8 equals 2 * 4
	    : 9 equals 3 * 3

	    #+BEGIN_SRC python :results output
              # continue example
              for num in range(2, 10):
		  if num % 2 == 0:
                      print("Found an even number", num)
                      continue
		  print("Found a number", num)
	    #+END_SRC

	    #+RESULTS:
	    : Found an even number 2
	    : Found a number 3
	    : Found an even number 4
	    : Found a number 5
	    : Found an even number 6
	    : Found a number 7
	    : Found an even number 8
	    : Found a number 9

******* "pass" Statements
	    #+BEGIN_QUOTE
	    Does nothing
	    #+END_QUOTE

******* Defining Functions
	#+BEGIN_SRC python :results output
	  # example
	  def fib(n):    # write Fibonacci series up to n
	      """Print a Fibonacci series up to n."""
	      a, b = 0, 1
	      while a < n:
		  print(a, end=' ')
		  a, b = b, a+b
	      print()

	  # Now call the function we just defined:
	  fib(2000)
	#+END_SRC

	#+RESULTS:
	: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

	#+BEGIN_SRC python :results output
	  def fib2(n): # return Fibonacci series up to n
	      """Return a list containing the Fibonacci series up to n."""
	      result = []
	      a, b = 0, 1
	      while a < n:
		  result.append(a)    # see below
		  a, b = b, a+b
	      return result

	  f100 = fib2(100)    # call it
	  print(f100)                # write the result
	#+END_SRC

	#+RESULTS:
	: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
******* More on Defining Functions
******** Default Argument Values
	   The default value is evaluated only once.
	   #+BEGIN_SRC python :results output

	     def f(a, L=[]):
		 L.append(a)
		 return L

	     print(f(1))
	     print(f(2))
	     print(f(3))
	   #+END_SRC

	   #+RESULTS:
	   : [1]
	   : [1, 2]
	   : [1, 2, 3]

	   To prevent this behaviour:
	   #+BEGIN_SRC python :results output
	     def f(a, L=None):
		 if L is None:
		     L = []
		 L.append(a)
		 return L

	     print(f(1))
	     print(f(2))
	     print(f(3))
	   #+END_SRC

	   #+RESULTS:
	   : [1]
	   : [2]
	   : [3]

******** Keyword Arguments
	   #+BEGIN_SRC python :results output
	     def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
		 print("-- This parrot wouldn't", action, end=' ')
		 print("if you put", voltage, "volts through it.")
		 print("-- Lovely plumage, the", type)
		 print("-- It's", state, "!")

	     # this are correct usage
	     parrot(1000)                                          # 1 positional argument
	     parrot(voltage=1000)                                  # 1 keyword argument
	     parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
	     parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
	     parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
	     parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

	     # and this are incorrect -->
	     #parrot()                     # required argument missing
	     #parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
	     #parrot(110, voltage=220)     # duplicate value for the same argument
	     #parrot(actor='John Cleese')  # unknown keyword argument
	   #+END_SRC

	   #+RESULTS:
	   #+begin_example
	   -- This parrot wouldn't voom if you put 1000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't voom if you put 1000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't VOOOOOM if you put 1000000 volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's a stiff !
	   -- This parrot wouldn't jump if you put a million volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's bereft of life !
	   -- This parrot wouldn't voom if you put a thousand volts through it.
	   -- Lovely plumage, the Norwegian Blue
	   -- It's pushing up the daisies !
    #+end_example

******** Arbitrary Argument Lists
	 #+BEGIN_SRC python :results output
           def write_multiple_items(file, separator, *args):
               file.write(separator.join(args))


           def concat(*args, sep="/"):  # keyword-only might occur after
              return sep.join(args)

           print(concat("earth", "mars", "venus"))
           print('==============')
           print(concat("earth", "mars", "venus", sep="."))
	 #+END_SRC

	 #+RESULTS:
	 : earth/mars/venus
	 : ==============
	 : earth.mars.venus

******** Unpacking Argument Lists
	 #+BEGIN_SRC python :results output
           p = list(range(3, 6))            # normal call with separate arguments
           print(p)
           print('==============')
           args = [3, 6]
           q = list(range(*args))            # call with arguments unpacked from a list
           print(q)
	   print('==============')

           # same fashion, dictionaries can deliver keyword arguments with
           # the "**"-operator:

           def parrot(voltage, state='a stiff', action='voom'):
               print("-- This parrot wouldn't", action, end=' ')
               print("if you put", voltage, "volts through it.", end=' ')
               print("E's", state, "!")

           d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
           print(parrot(**d))
	 #+END_SRC

	 #+RESULTS:
	 : [3, 4, 5]
	 : ==============
	 : [3, 4, 5]
	 : ==============
	 : -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !
	 : None
	 #+BEGIN_SRC python :results output
           # test with argument passing
           def arg_test(*args, **kwargs):
               print('This is a first positional argument: %s' % (args[0],))
               print('This is artument value with key "last_name": %s' %
                     (kwargs['last_name'],))
               print('This is a second positional argument: %s' % (args[1],))

           # arg_test('Tony', last_name='Kosinov', 'WebDev')  # wrong
           arg_test('Tony', 'WebDev', last_name='Kosinov')
	 #+END_SRC

	 #+RESULTS:
	 : This is a first positional argument: Tony
	 : This is artument value with key "last_name": Kosinov
	 : This is a second positional argument: WebDev

******** Lambda Expressions
	 #+BEGIN_SRC python :results output
           def make_incrementor(n):
               return lambda x: x + n

           f = make_incrementor(42)
           print(f(0))
           print(f(1))
           print('==============')

           pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
           pairs.sort(key=lambda pair: pair[1])  # sort by second element in the tuple
           print(pairs)
           print('==============')

           mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
	 #+END_SRC

	 #+RESULTS:
	 : 42
	 : 43
	 : ==============
	 : [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
	 : ==============
	 #+BEGIN_SRC python :results output
           import sys

           summ = lambda x, y: x + y   #  def sum(x,y): return x + y
           out = lambda *x: sys.stdout.write(" ".join(map(str,x)))

           print(summ(4, 5))
           print(out("a", "b", "c", "D"))

	 #+END_SRC

	 #+RESULTS:
	 : 9
	 : a b c D7
	 #+NAME: jump_table
	 #+BEGIN_SRC python :results output
           # jump table implementation
           L = [lambda x: x ** 2,
                lambda x: x ** 3,
                lambda x: x ** 4]
           # Inline function definition
           # A list of three callable functions
           for f in L:
               print(f(2)) # Prints 4, 8, 16
           print(L[0](3)) # Prints 9

	 #+END_SRC

	 #+RESULTS: jump_table
	 : 4
	 : 8
	 : 16
	 : 9

******** Documentation Strings
	 #+BEGIN_SRC python :results output
           def my_function():
               """Do nothing, but document it.

               No, really, it doesn't do anything.
               """
               pass

           print(my_function.__doc__)

	 #+END_SRC

	 #+RESULTS:
	 : Do nothing, but document it.
	 : 
	 :     No, really, it doesn't do anything.
	 :     

******** Function Annotations
	 #+BEGIN_QUOTE
	 completely optional metadata information
	 about the types used by user-defined functions
	 #+END_QUOTE
	 
******* Intermezzo: Coding Style
	Making it easy for others to read your code
	is always a good idea, and adopting a nice coding style helps
	tremendously for that.
	+ Suggestions:
	  - When possible, put comments on a line of their own;
	  - Name your classes and functions consistently; the convention is to
	use "CamelCase" for classes and "lower_case_with_underscores" for
	functions and methods.

****** DONE Data Structures
******* Terse manual
******** list.append(x)
	  Add an item to the end of the list.
	  Equivalent to "a[len(a):] = [x]".
	  #+BEGIN_SRC python :results output :session lists
            a = [66.25, 333]
            a.append(333)
            print(a)
	  #+END_SRC

	  #+RESULTS:
	  : 
	  : >>> [66.25, 333, 333]

******** list.extend(L)
	 Extend the list by appending all the items in the given list.
	 Equivalent to "a[len(a):] = L".
	 #+BEGIN_SRC python :results output :session lists
	 b = [1, 1234.5]
	 a.extend(b)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> [66.25, 333, 333, 1, 1234.5]

******** list.insert(i, x)
	 Insert an item at a given position.  The first argument is the
	 index of the element before which to insert, so "a.insert(0, x)"
	 inserts at the front of the list, and "a.insert(len(a), x)" is
	 equivalent to "a.append(x)".
	 #+BEGIN_SRC python :results output :session lists
	 a.insert(2, -1)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [66.25, 333, -1, 333, 1, 1234.5]

******** list.remove(x)
	 Remove the first item from the list whose value is *x*.  It is an
	 error if there is no such item.
	 #+BEGIN_SRC python :results output :session lists
	 a.remove(66.25)
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 1, 1234.5]

******** list.pop([i])
	 Remove the item at the given position in the list, and return it.
	 If no index is specified, "a.pop()" removes and returns the last
	 item in the list.
	 #+BEGIN_SRC python :results output :session lists
	 a.pop(4)
	 a.pop()
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 1234.5
	 : 1
	 : [333, -1, 333]

******** list.clear()
	 Remove all items from the list.  Equivalent to "del a[:]".
******** list.index(x, [n])
	 Return the index in the list of the [n] item whose value is *x*.
	 It is an error if there is no such item.
	 #+BEGIN_SRC python :results output :session lists
	 a.index(333)
	 a.index(333, 2)
	 #+END_SRC

	 #+RESULTS:
	 : 0
	 : 2

******** list.count(x)
	 Return the number of times *x* appears in the list.
	 #+BEGIN_SRC python :results output :session lists
	 a.extend([2, 2, 2])
	 print(a)
	 a.count(333)
	 a.count(2)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 2, 2, 2, 2, 2, 2]
	 : 2
	 : 6

******** list.reverse()
	 Reverse the elements of the list in place.
	 #+BEGIN_SRC python :results output :session lists
	 a.reverse()
	 print(a)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : [333, -1, 333, 2, 2, 2, 2, 2, 2]

******** list.copy()
	 Return a shallow copy of the list. Equivalent to "a[:]".
******* More on Lists
******** Using Lists as Stacks
	 #+BEGIN_SRC python :results output :session stack
           stack = [3, 4, 5]
           stack.append(6)
           stack.append(7)
           stack
           '============='
           stack.pop()
           stack
           stack.pop()
           '============='
           stack.pop()
           '============='
           stack
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 >>> >>> [3, 4, 5, 6, 7]
	 '============='
	 7
	 [3, 4, 5, 6]
	 6
	 '============='
	 5
	 '============='
	 [3, 4]
#+end_example

******** Using Lists as Queues
	 #+NAME: Queue
	 #+BEGIN_SRC python :results output :session queue
           from collections import deque
           queue = deque(["Eric", "John", "Michael"])
           queue.append("Terry")           # Terry arrives
           queue.append("Graham")          # Graham arrives
           queue.popleft()                 # The first to arrive now leaves
           print('=============')
           queue.popleft()                 # The second to arrive now leaves
           print('=============')
           queue                           # Remaining queue in order of arrival
	 #+END_SRC

	 #+RESULTS: Queue
	 : 
	 : >>> >>> >>> 'Eric'
	 : =============
	 : 'John'
	 : =============
	 : deque(['Michael', 'Terry', 'Graham'])

******** List Comprehensions
	 #+BEGIN_QUOTE
	 provide a concise way to create lists.
	 #+END_QUOTE
	 #+BEGIN_SRC python :results output :session lists
           squares = list(map(lambda x: x**2, range(10)))
           squares_alt = [x**2 for x in range(10)]

           print(squares)
           print('=============')
           print(squares_alt)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> >>> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 : =============
	 : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	 #+NAME Recombination
	 #+BEGIN_SRC python :results output :session lists
	 [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
	 #+END_SRC

	 #+RESULTS:
	 : [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
	 #+BEGIN_SRC python :results output :session lists
           vec = [-4, -2, 0, 2, 4]
           # create a new list with the values doubled
           [x*2 for x in vec]
           print('=============')
           # filter the list to exclude negative numbers
           [x for x in vec if x >= 0]
           print('=============')
           # apply a function to all the elements
           [abs(x) for x in vec]
           print('=============')
           # call a method on each element
           freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
           [weapon.strip() for weapon in freshfruit]
           print('=============')
           # create a list of 2-tuples like (number, square)
           [(x, x**2) for x in range(6)]
           print('=============')
           # the tuple must be parenthesized, otherwise an error is raised
           ###!!! [x, x**2 for x in range(6)]
           # flatten a list using a listcomp with two 'for'
           vec = [[1,2,3], [4,5,6], [7,8,9]]
           [num for elem in vec for num in elem]
	 #+END_SRC

	 #+RESULTS:
	 #+begin_example

	 ... [-8, -4, 0, 4, 8]
	 =============
	 ... [0, 2, 4]
	 =============
	 ... [4, 2, 0, 2, 4]
	 =============
	 ... >>> ['banana', 'loganberry', 'passion fruit']
	 =============
	 ... [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
	 =============
	 ... ... ... >>> [1, 2, 3, 4, 5, 6, 7, 8, 9]
#+end_example


	 List comprehensions can contain complex expressions and nested
	 functions:

	 #+BEGIN_SRC python :results output :session lists
	 from math import pi
	 [str(round(pi, i)) for i in range(1, 6)]
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ['3.1', '3.14', '3.142', '3.1416', '3.14159']

******** Nested List Comprehensions			  :transposition:zip:
	 #+BEGIN_SRC python :results output :session lists
           matrix = [
               [1, 2, 3, 4],
               [5, 6, 7, 8],
               [9, 10, 11, 12],
           ]
           [[row[i] for row in matrix] for i in range(4)]
           # sinonym:
           list(zip(*matrix))
           # few zip() scrutiny
           list(zip(matrix[0], ['a', 'c', 'f'], [21, 22]))
	   print('=============')
	   # only two elements on output (smallest full-fledged number)
	   from itertools import zip_longest
	   list(zip_longest(matrix[0], ['a', 'c', 'f'], [21, 22]))
	   # four elements with None as tap on empty cells
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... >>> [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
	 : ... [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
	 : ... [(1, 'a', 21), (2, 'c', 22)]
	 : =============
	 : ... >>> [(1, 'a', 21), (2, 'c', 22), (3, 'f', None), (4, None, None)]

******* The "del" statement
	#+BEGIN_SRC python :results output :session lists
          a = [-1, 1, 66.25, 333, 333, 1234.5]
          del a[0]
          a
          print('=============')
          del a[2:4]
          a
          print('=============')
          del a[:]
          a
	#+END_SRC

	#+RESULTS:
	: 
	: >>> [1, 66.25, 333, 333, 1234.5]
	: =============
	: >>> [1, 66.25, 1234.5]
	: =============
	: >>> []

******* Tuples and Sequences
	A tuple consists of a number of values separated by commas
	#+BEGIN_SRC python :results output :session tuples
          t = 12345, 54321, 'hello!'
          t[0]
          print('=============')
          t
          print('=============')
          # Tuples may be nested:
          u = t, (1, 2, 3, 4, 5)
          u
          print('=============')
          # Tuples are immutable:
          # t[0] = 88888 !!
          # but they can contain mutable objects:
          v = ([1, 2, 3], [3, 2, 1])
          v
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>> >>> >>> 12345
	: =============
	: (12345, 54321, 'hello!')
	: =============
	: ... >>> ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
	: =============
	: ... ... ... >>> ([1, 2, 3], [3, 2, 1])
	#+BEGIN_SRC python :results output :session tuples
          empty = ()
	  # possible syntax
          singleton = 'hello',    # <-- note trailing comma
          len(empty)
          print('=============')
          len(singleton)
          print('=============')
          singleton
	  print('=============')
	  #sequence unpacking
          x, y, z = t  # equal num of arguments on both sides
	  print(x, y, z)
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> 0
	: =============
	: 1
	: =============
	: ('hello',)
	: =============
	: ... >>> 12345 54321 hello!

******* Sets
	A set is an unordered collection with no duplicate elements.
	Basic uses include membership testing and eliminating duplicate
	entries.
	#+BEGIN_SRC python :results output :session sets
          basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
          print(basket)                      # show that duplicates have been removed
          print('=============')
          'orange' in basket                 # fast membership testing
          print('=============')
          'crabgrass' in basket
	#+END_SRC

	#+RESULTS:
	: Type "help", "copyright", "credits" or "license" for more information.
	: >>> >>> >>> >>> {'orange', 'apple', 'pear', 'banana'}
	: =============
	: True
	: =============
	: False

	+ Set objects also support mathematical operations like:
	  union
	  intersection
	  difference
	  symmetric difference
	  #+BEGIN_SRC python :results output :session sets
            # Demonstrate set operations on unique letters from two words

            a = set('abracadabra')
            b = set('alacazam')
            print(a)                                  # unique letters in a
            print('======unique letters in a=====')
            a - b                              # letters in a but not in b
            print('======letters in a but not in b=======')
            a | b                              # letters in either a or b
            print('=======letters in either a or b======')
            a & b                              # letters in both a and b
            print('=======letters in both a and b======')
            a ^ b                              # letters in a or b but not both
            print('======letters in a or b but not both=======')

	  #+END_SRC

	  #+RESULTS:
	  #+begin_example

	  >>> >>> >>> {'r', 'a', 'c', 'b', 'd'}
	  ======unique letters in a=====
	  {'r', 'b', 'd'}
	  ======letters in a but not in b=======
	  {'r', 'a', 'd', 'b', 'm', 'z', 'c', 'l'}
	  =======letters in either a or b======
	  {'a', 'c'}
	  =======letters in both a and b======
	  {'r', 'd', 'z', 'm', 'b', 'l'}
	  ======letters in a or b but not both=======
#+end_example
	  #+NAME: set comprehensions
	  #+BEGIN_SRC python :results output :session sets
	  a = {x for x in 'abracadabra' if x not in 'abc'}
	  print(a)
	  #+END_SRC

	  #+RESULTS: set comprehensions
	  : 
	  : {'r', 'd'}

******* Dictionaries
	#+BEGIN_QUOTE
	Unlike
	sequences, which are indexed by a range of numbers, dictionaries are
	indexed by keys, which can be any immutable type; strings and
	numbers can always be keys.  Tuples can be used as keys if they
	contain only strings, numbers, or tuples; if a tuple contains any
	mutable object either directly or indirectly, it cannot be used as a
	key. You can't use lists as keys, since lists can be modified in place
	using index assignments, slice assignments, or methods like "append()"
	and "extend()".
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session dicts
          tel = {'jack': 4098, 'sape': 4139}
          tel['guido'] = 4127
          tel
          print('=============')
          tel['jack']

          del tel['sape']
          tel['irv'] = 4127
          tel
          print('=============')
          list(tel.keys())
          print('=============')
          sorted(tel.keys())
          print('=============')
          'guido' in tel
          print('=============')
          'jack' not in tel
	#+END_SRC
	#+BEGIN_SRC python :results output :session dicts
          # The "dict()" constructor builds dictionaries directly from sequences
          # of key-value pairs:

          dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
          print('=============')

          # In addition, dict comprehensions can be used to create dictionaries
          # from arbitrary key and value expressions:

          {x: x**2 for x in (2, 4, 6)}
          print('=============')

          # When the keys are simple strings, it is sometimes easier to specify
          # pairs using keyword arguments:

          dict(sape=4139, guido=4127, jack=4098)
	#+END_SRC

	#+RESULTS:
	: 
	: ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}
	: =============
	: >>> ... ... >>> {2: 4, 4: 16, 6: 36}
	: =============
	: >>> ... ... >>> {'sape': 4139, 'guido': 4127, 'jack': 4098}

******* Looping Techniques
	#+BEGIN_SRC python :results output :session
          knights = {'gallahad': 'the pure', 'robin': 'the brave'}
          for k, v in knights.items():
              print(k, v)

          for i, v in enumerate(['tic', 'tac', 'toe']):
              print(i, v)

          # To loop over two or more sequences at the same time, the entries can
          # be paired with the "zip()" function.

          questions = ['name', 'quest', 'favorite color']
          answers = ['lancelot', 'the holy grail', 'blue']
          for q, a in zip(questions, answers):
              print('What is your {0}?  It is {1}.'.format(q, a))

	#+END_SRC

	#+RESULTS:
	: 
	: ... ... robin the brave
	: gallahad the pure
	: ... ... 0 tic
	: 1 tac
	: 2 toe
	: ... ... >>> >>> >>> ... ... What is your name?  It is lancelot.
	: What is your quest?  It is the holy grail.
	: What is your favorite color?  It is blue.

	Sometimes it is tempting to iterate some sequences in their reverse
	order:
	#+BEGIN_SRC python :results output :session

          for i in reversed(range(1, 10, 2)):
              print(i)

          # To loop over a sequence in sorted order, use the "sorted()" function
          # which returns a new sorted list while leaving the source unaltered.

          basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
          for f in sorted(set(basket)):
              print(f)

	#+END_SRC

	#+RESULTS:
	#+begin_example

	... ... 9
	7
	5
	3
	1
	... ... >>> >>> ... ... apple
	banana
	orange
	pear
#+end_example

******* More on Conditions
	#+BEGIN_SRC python :results output :session
          string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
          non_null = string1 or string2 or string3
          print(non_null)
	#+END_SRC

	#+RESULTS:
	: 
	: >>> Trondheim

******* Comparing Sequences and Other Types
	#+BEGIN_QUOTE
	(1, 2, 3)              < (1, 2, 4)
	[1, 2, 3]              < [1, 2, 4]
	'ABC' < 'C' < 'Pascal' < 'Python'
	(1, 2, 3, 4)           < (1, 2, 4)
	(1, 2)                 < (1, 2, -1)
	(1, 2, 3)             == (1.0, 2.0, 3.0)
	(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
	#+END_QUOTE

****** DONE Modules
       #+BEGIN_SRC python :results output :session modules
         import fibo
         fibo.fib(1000)
         fibo.fib2(100)
         fibo.__name__
       #+END_SRC

       #+RESULTS:
       : Type "help", "copyright", "credits" or "license" for more information.
       : >>> >>> >>> >>> 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
       : [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
       : 'fibo'

******* More on Modules
	#+BEGIN_QUOTE
	Note: For efficiency reasons, each module is only imported once per
	interpreter session.  Therefore, if you change your modules, you
	must restart the interpreter -- or, if it's just one module you want
	to test interactively, use "importlib.reload()", e.g. "import
	importlib; importlib.reload(modulename)".
	#+END_QUOTE

******** Executing modules as scripts
******** The Module Search Path
******** "Compiled" Python files

******* Standard Modules
	#+BEGIN_SRC python :results output :session modules
          import sys
          for i, j in enumerate(sys.path):
              print(i, "::", j, end="\n")
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... 0 :: 
	: 1 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4
	: 2 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/plat-x86_64-linux-gnu
	: 3 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/lib-dynload
	: 4 :: /usr/lib/python3.4
	: 5 :: /usr/lib/python3.4/plat-x86_64-linux-gnu
	: 6 :: /home/antony/Desktop/DVCS/lib/Python/venv/lib/python3.4/site-packages

******* The "dir()" Function
	#+BEGIN_QUOTE
	The built-in function "dir()" is used to find out which names a module
	defines.  It returns a sorted list of strings.

	Without arguments, "dir()" lists the names you have defined currently.
	#+END_QUOTE

******* Packages
	#+BEGIN_QUOTE
	Packages are a way of structuring Python's module namespace by using
	"dotted module names".
	#+END_QUOTE
******** Importing * From a Package
	 For example, the file "sound/effects/__init__.py" could contain the
	 following code:
	 
	 __all__ = ["echo", "surround", "reverse"]
	 
	 This would mean that "from sound.effects import *" would import the
	 three named submodules of the "sound" package.

******** Intra-package References
	    from . import echo
	    from .. import formats
	    from ..filters import equalizer

******** Packages in Multiple Directories
	 ##
****** DONE Input and Output
******* Fancier Output Formatting
	#+BEGIN_SRC python :results output
          for x in range(1, 11):
              print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))

          for x in range(1, 11):
              print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
              # Note use of 'end' on previous line
              print(repr(x*x*x).rjust(4))
	#+END_SRC

	#+BEGIN_SRC python :results output
          # Basic usage of the "str.format()" method looks like this:
          print('We are the {} who say "{}!"'.format('knights', 'Ni'))
          print('=============')
          print('{0} and {1}'.format('spam', 'eggs'))

          print('{1} and {0}'.format('spam', 'eggs'))
          print('=============')

          # If keyword arguments are used in the "str.format()" method, their
          # values are referred to by using the name of the argument.

          print('This {food} is {adjective}.'.format(
                food='spam', adjective='absolutely horrible'))
          print('=============')

          # Positional and keyword arguments can be arbitrarily combined:

          print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                             other='Georg'))
          print('=============')

          # "'!a'" (apply "ascii()"), "'!s'" (apply "str()") and "'!r'" (apply
          # "repr()") can be used to convert the value before it is formatted:

          import math
          print('The value of PI is approximately {!a}.'.format(math.pi))

          print('The value of PI is approximately {!r}.'.format(math.pi))
          print('=============')

          # An optional "':'" and format specifier can follow the field name. This
          # allows greater control over how the value is formatted.  The following
          # example rounds Pi to three places after the decimal.

          import math
          print('The value of PI is approximately {0:.3f}.'.format(math.pi))
          print('=============')

          # Passing an integer after the "':'" will cause that field to be a
          # minimum number of characters wide.  This is useful for making tables
          # pretty.

          table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
          for name, phone in table.items():
              print('{0:10} ==> {1:10d}'.format(name, phone))
          print('=============')
          # If you have a really long format string that you don't want to split
          # up, it would be nice if you could reference the variables to be
          # formatted by name instead of by position.  This can be done by simply
          # passing the dict and using square brackets "'[]'" to access the keys

          table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
          print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; ''Dcab: {0[Dcab]:d}'.
                format(table))
          print('=============')

          # This could also be done by passing the table as keyword arguments with
          # the '**' notation.

          #    >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
          print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.
                format(**table))
          print('=============')

          # This is particularly useful in combination with the built-in function
          # "vars()", which returns a dictionary containing all local variables.
	#+END_SRC

	#+RESULTS:
	#+begin_example
	We are the knights who say "Ni!"
	=============
	spam and eggs
	eggs and spam
	=============
	This spam is absolutely horrible.
	=============
	The story of Bill, Manfred, and Georg.
	=============
	The value of PI is approximately 3.141592653589793.
	The value of PI is approximately 3.141592653589793.
	=============
	The value of PI is approximately 3.142.
	=============
	Jack       ==>       4098
	Sjoerd     ==>       4127
	Dcab       ==>       7678
	=============
	Jack: 4098; Sjoerd: 4127; Dcab: 8637678
	=============
	Jack: 4098; Sjoerd: 4127; Dcab: 8637678
	=============
#+end_example

******** Old string formatting
	 The "%" operator can also be used for string formatting.
	 #+BEGIN_SRC python :results output
           import math
           print('The value of PI is approximately %5.3f.' % math.pi)
	 #+END_SRC

	 #+RESULTS:
	 : The value of PI is approximately 3.142.

******* Reading and Writing Files
	#+BEGIN_QUOTE
	"open()" returns a *file object*, and is most commonly
	used with two arguments: "open(filename, mode)".

	>>> f = open('workfile', 'w')
	
	#+END_QUOTE

******** Methods of File Objects
	 #+BEGIN_QUOTE
	 It is good practice to use the "with" keyword when dealing with file
	 objects.  This has the advantage that the file is properly closed
	 after its suite finishes, even if an exception is raised on the way.
	 It is also much shorter than writing equivalent "try"-"finally"
	 blocks:
	 #+END_QUOTE
	 #+BEGIN_SRC python
           with open('workfile', 'r') as f:
               read_data = f.read()
           f.closed
	 #+END_SRC
******** Saving structured data with "json"
	 #+BEGIN_SRC python :results output :session json
	 import json
	 json.dumps([1, 'simple', 'list'])
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : >>> >>> >>> >>> '[1, "simple", "list"]'

****** DONE Errors and Exceptions
******* Syntax Errors
	Syntax errors, also known as parsing errors, are perhaps the most
	common kind of complaint you get while you are still learning Python
******* Exceptions
	Even if a statement or expression is syntactically correct, it may
	cause an error when an attempt is made to execute it. Errors detected
	during execution are called exceptions

******* Handling Exceptions
	#+BEGIN_SRC python :results output :session exeptions
          import sys

          try:
              f = open('myfile.txt')
              s = f.readline()
              i = int(s.strip())
          except OSError as err:
              print("OS error: {0}".format(err))
          except ValueError:
              print("Could not convert data to an integer.")
          except:
              print("Unexpected error:", sys.exc_info()[0])
              raise

	#+END_SRC

	#+RESULTS:
	: 
	: >>> ... ... ... ... ... ... ... ... ... ... ... OS error: [Errno 2] No such file or directory: 'myfile.txt'

	The "try" ... "except" statement has an optional *else clause*, which,
	when present, must follow all except clauses.  It is useful for code
	that must be executed if the try clause does not raise an exception.
	#+BEGIN_SRC python :results output :session exeptions
          for arg in sys.argv[1:]:
              try:
                  f = open(arg, 'r')
              except IOError:
                  print('cannot open', arg)
              else:
                  print(arg, 'has', len(f.readlines()), 'lines')
                  f.close()

	#+END_SRC

	#+RESULTS:

******* Raising Exceptions
	#+BEGIN_QUOTE
	The "raise" statement allows the programmer to force a specified
	exception to occur. For example:
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session exeptions
	raise NameError('HiThere')
	#+END_SRC

	#+RESULTS:
	: Traceback (most recent call last):
	:   File "<stdin>", line 1, in <module>
	: NameError: HiThere
	#+BEGIN_QUOTE
	If you need to determine whether an exception was raised but don't
	intend to handle it, a simpler form of the "raise" statement allows
	you to re-raise the exception:
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session exeptions
          try:
              raise NameError('HiThere')
          except NameError:
              print('An exception flew by!')
              raise
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... An exception flew by!
	: Traceback (most recent call last):
	:   File "<stdin>", line 2, in <module>
	: NameError: HiThere

******* User-defined Exceptions
	#+BEGIN_QUOTE
	Programs may name their own exceptions by creating a new exception
	class (see *Classes* for more about Python classes).  Exceptions
	should typically be derived from the "Exception" class, either
	directly or indirectly.  For example:
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session exeptions
          class MyError(Exception):
              def __init__(self, value):
                  self.value = value
              def __str__(self):
                  return repr(self.value)

          try:
              raise MyError(2*2)
          except MyError as e:
              print('My exception occurred, value:', e.value)

          raise MyError('oops!')
	#+END_SRC

	#+RESULTS:
	: 
	: ... ... ... ... >>> ... ... ... ... My exception occurred, value: 4
	: Traceback (most recent call last):
	:   File "<stdin>", line 1, in <module>
	: __main__.MyError: 'oops!'

******* Defining Clean-up Actions
	#+BEGIN_QUOTE
	A ~finally~ clause is always executed before leaving the "try"
	statement, whether an exception has occurred or not. When an exception
	has occurred in the "try" clause and has not been handled by an
	"except" clause (or it has occurred in an "except" or "else" clause),
	it is re-raised after the "finally" clause has been executed.  The
	"finally" clause is also executed "on the way out" when any other
	clause of the "try" statement is left via a "break", "continue" or
	"return" statement.
	#+END_QUOTE
	#+BEGIN_SRC python :results output :session exeptions
          def divide(x, y):
              try:
                  result = x / y
              except ZeroDivisionError:
                  print("division by zero!")
              else:
                  print("result is", result)
              finally:
                  print("executing finally clause")

          divide(2, 1)
          print('=============')
          divide(2, 0)
          print('=============')
          divide("2", "1")
	#+END_SRC

	#+RESULTS:
	#+begin_example

	... ... ... ... ... ... ... ... >>> result is 2.0
	executing finally clause
	=============
	division by zero!
	executing finally clause
	=============
	executing finally clause
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "<stdin>", line 3, in divide
	TypeError: unsupported operand type(s) for /: 'str' and 'str'
#+end_example

	In real world applications, the "finally" clause is useful for
	releasing external resources (such as files or network connections),
	regardless of whether the use of the resource was successful.

******* Predefined Clean-up Actions
	#+BEGIN_QUOTE
	The "with" statement allows objects
	like files to be used in a way that ensures they are always cleaned up
	promptly and correctly.	
	#+END_QUOTE
	#+BEGIN_SRC python
          with open("myfile.txt") as f:
              for line in f:
                  print(line, end="!")
	#+END_SRC

	After the statement is executed, the file ~f~ is always closed, even
	if a problem was encountered while processing the lines.

****** TODO Classes

******* A Word About Names and Objects
******* Python Scopes and Namespaces
******** Scopes and Namespaces Example
	 #+BEGIN_SRC python :results output :session classes
           def scope_test():
               def do_local():
                   spam = "local spam"
               def do_nonlocal():
                   nonlocal spam
                   spam = "nonlocal spam"
               def do_global():
                   global spam
                   spam = "global spam"
               spam = "test spam"
               do_local()
               print('\n')
               print("After local assignment:", spam)
               do_nonlocal()
               print("After nonlocal assignment:", spam)
               do_global()
               print("After global assignment:", spam)

           scope_test()
           print("In global scope:", spam)
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... >>> 
	 : 
	 : After local assignment: test spam
	 : After nonlocal assignment: nonlocal spam
	 : After global assignment: nonlocal spam
	 : In global scope: global spam

******* A First Look at Classes
******** Class Definition Syntax
******** Class Objects
	 Support two kinds of operations:
	 - attribute references
	   #+BEGIN_SRC python
             class MyClass:
                 """A simple example class"""
                 i = 12345
                 def f(self):
                     return 'hello world'
	   #+END_SRC
	 - instantiation
	   #+BEGIN_SRC python
	   x = MyClass()
	   #+END_SRC

******** Instance Objects
	 - Data attributes
	 - Methods

******** Method Objects

******** Class and Instance Variables
	 #+BEGIN_SRC python :results output :session classes
           class Dog:
               kind = 'canine'         # class variable shared by all instances
               def __init__(self, name):
                   self.name = name    # instance variable unique to each instance

           d = Dog('Fido')
           e = Dog('Buddy')
           d.kind                  # shared by all dogs
           print('=============')
           e.kind                  # shared by all dogs
           print('=============')
           d.name                  # unique to d
           print('=============')
           e.name                  # unique to e
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... >>> >>> >>> 'canine'
	 : =============
	 : 'canine'
	 : =============
	 : 'Fido'
	 : =============
	 : 'Buddy'

	 It is reasonable to avoid usage mutable objects as ~Class Instances~

	 #+BEGIN_SRC python :results output :session classes
           class Dog:
               tricks = []             # mistaken use of a class variable
               def __init__(self, name):
                   self.name = name
               def add_trick(self, trick):
                   self.tricks.append(trick)

           d = Dog('Fido')
           e = Dog('Buddy')
           d.add_trick('roll over')
           e.add_trick('play dead')
	   print('\n')
           d.tricks                # unexpectedly shared by all dogs
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... ... ... >>> >>> >>> >>> >>>
	 : ['roll over', 'play dead']

	 Correct design of the class should use an instance variable instead:

	 #+BEGIN_SRC python :results output :session classes
           class Dog:
               def __init__(self, name):
                   self.name = name
                   self.tricks = []    # creates a new empty list for each dog
               def add_trick(self, trick):
                   self.tricks.append(trick)

           d = Dog('Fido')
           e = Dog('Buddy')
           d.add_trick('roll over')
           e.add_trick('play dead')
           print('\n')
           d.tricks
           print('=============')
           e.tricks
	 #+END_SRC

	 #+RESULTS:
	 : 
	 : ... ... ... ... ... >>> >>> >>> >>> >>>
	 : ['roll over']
	 : =============
	 : ['play dead']

******* Random Remarks

******* Inheritance

******** Multiple Inheritance

******* Private Variables

******* Odds and Ends

******* Exceptions Are Classes Too

******* Iterators

******* Generators

******* Generator Expressions

****** TODO Brief Tour of the Standard Library

******* Operating System Interface

******* File Wildcards

******* Command Line Arguments

******* Error Output Redirection and Program Termination

******* String Pattern Matching

******* Mathematics

******* Internet Access

******* Dates and Times

******* Data Compression

******* Performance Measurement

******* Quality Control

******* Batteries Included

****** TODO Brief Tour of the Standard Library -- Part II

******* Output Formatting

******* Templating

******* Working with Binary Data Record Layouts

******* Multi-threading

******* Logging

******* Weak References

******* Tools for Working with Lists

******* Decimal Floating Point Arithmetic

****** TODO Virtual Environments and Packages

******* Introduction

******* Creating Virtual Environments

******* Managing Packages with pip

****** TODO What Now?

****** TODO Interactive Input Editing and History Substitution

******* Tab Completion and History Editing

******* Alternatives to the Interactive Interpreter

****** TODO Floating Point Arithmetic:  Issues and Limitations

******* Representation Error

****** TODO Appendix

******* Interactive Mode

******** Error Handling

******** Executable Python Scripts

******** The Interactive Startup File

******** The Customization Modules


********* Official documentation
	  http://docs.python.org
********* http://pypi.python.org/pypi
********* http://pyvideo.org

******** Programming Python 4th Edition				:programming:
********* [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
********* [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
******** Python Anti-Patterns				      :anti:patterns:
********* [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
********* [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
	  [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
********* [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
******** Fluent Python						     :fluent:
********* Preface
********** DONE [[https://docs.python.org/3.0/whatsnew/3.0.html][Whatâs N In Python 3.0]]
********** DONE [[https://docs.python.org/3/tutorial/][Python Tutorial]]
	   #+BEGIN_QUOTE
	   Premature abstraction is as bad as premature optimization.
	   #+END_QUOTE
******** Writing Idiomatic Python				     :idioma:

******** Effective Python					     :effect:

********* [[https://github.com/bslatkin/effectivepython][Git]]


******* Applied Python

******** NLP with Python
******** Python for Data Analyse
********* DONE Preliminaries
********* TODO Introductory Examples <2016-01-18 Mon>
********** collections pack
********* TODO IPython: An Interactive Computing and Development Environment
	  <2016-01-18 
      

***** Official documentation
      http://docs.python.org
***** http://pypi.python.org/pypi
***** http://pyvideo.org

**** Programming Python 4th Edition				:programming:
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
**** Python Anti-Patterns				      :anti:patterns:
**** 
***** [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
***** [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
      [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
***** [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
**** Python Beyond the Basics
***** Organizing Larger Programs
****** Packages
****** Imports From sys.path
****** Implementing Packages
****** Subpackages
****** Example A Full Program
****** Relative Imports
****** Controlling Imports With __all__
****** Namespace Packages
****** Executable Directories
****** Recommended Layout
****** Duck Tails Modules Are Singletons
****** Summary

***** Beyond Basic Function
****** Function Review
****** Callable Instances				      :socket:timeit:
	#+BEGIN_SRC python :results output :session functions
          import socket


          class Resolver:
              """Converts domain name into ip"""
              def __init__(self):
                  self._cache = {}
              def __call__(self, host):
                  if host not in self._cache:
                      self._cache[host] = socket.gethostbyname(host)
                  return self._cache[host]

          resolver = Resolver()
          resolver('north-west.com')
          print('=============')
          resolver._cache
          print('=============')
          resolver('sixty-north.com')
          resolver._cache
	#+END_SRC

	#+RESULTS:
	: 
	: >>> >>> >>> >>> >>> ... ... ... ... ... ... ... ... >>> >>> '208.73.211.70'
	: =============
	: {'north-west.com': '208.73.211.70'}
	: =============
	: '93.93.131.30'
	: {'north-west.com': '208.73.211.70', 'sixty-north.com': '93.93.131.30'}

	And check up how cache works:
	#+BEGIN_SRC python :results output :session functions
          from timeit import timeit
          timeit(setup="from __main__ import resolver", 
                 stmt="resolver('python.org')", number=1)
          print('=============')
          timeit(setup="from __main__ import resolver", 
                 stmt="resolver('python.org')", number=1)
          print('=============')
          # normalize output
          print("{:f}".format(_))
	#+END_SRC

	#+RESULTS:
	: 
	: ... 0.0024511199999324162
	: =============
	: ... 7.520000053773401e-06
	: =============
	: ... 0.000008

****** Classes Are Callable
       #+BEGIN_SRC python :results output :session functions
         import socket
         class Resolver:
             def __init__(self):
                 self._cache = {}
             def __call__(self, host):
                 if host not in self._cache:
                     self._cache[host] = socket.gethostbyname(host)
                 return self._cache[host]
             def clear(self):
                 self._cache.clear()
             def has_host(self, host):
                 return host in self._cache

         resolve = Resolver()
         resolve.has_host("pluralsight.com")
         print('=============')
         resolve("pluralsight.com")
         print('=============')
         resolve.has_host("pluralsight.com")
         print('=============')
         resolve.clear()
         print('=============')
         resolve.has_host("pluralsight.com")
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... ... ... ... ... ... ... >>> >>> False
       : =============
       : '54.201.37.215'
       : =============
       : True
       : =============
       : >>> =============
       : False

****** Conditional Expressions
       Old-fashion approach:
       #+BEGIN_SRC python :results output :session functions
         def sequence_class(immutable):
             if immutable:
                 cls = tuple
             else:
                 cls = list
             return cls

         seq = sequence_class(immutable=True)
         t = seq("Timbuktu")
         t
         print('=============')
         type(t)
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... >>> >>> >>> ('T', 'i', 'm', 'b', 'u', 'k', 't', 'u')
       : =============
       : <class 'tuple'>

       Much terse and dense solution:
       #+BEGIN_SRC python :results output :session functions
         def sequence_class(immutable):
             return tuple if immutable else list

         seq = sequence_class(immutable=False)
         s = seq("Nairobi")
         s
         type(s)
       #+END_SRC

       #+RESULTS:
       : 
       : ... >>> >>> >>> ['N', 'a', 'i', 'r', 'o', 'b', 'i']
       : <class 'list'>

****** Lambdas							     :pprint:
       #+BEGIN_SRC python :results output :session functions
         from pprint import pprint as pp

         scientists = ['Marie Curie', 'Albert Einstein', 'Niels Bohr', 'Isaac Newton',
                       'Dmitri Mendeleev', 'Antoine Lavoisier', 'Carl Linnaeus',
                       'Alfred Wegener', 'Charles Darwin']
         pp(sorted(scientists, key=lambda name: name.split()[-1]))
         print('=============')
         last_name = lambda name: name.split()[-1]
         last_name
         print('=============')
         print(last_name("Nikola Tesla"))
       #+END_SRC

       #+RESULTS:
       #+begin_example

       >>> ... ... >>> ['Niels Bohr',
	'Marie Curie',
	'Charles Darwin',
	'Albert Einstein',
	'Antoine Lavoisier',
	'Carl Linnaeus',
	'Dmitri Mendeleev',
	'Isaac Newton',
	'Alfred Wegener']
       =============
       >>> <function <lambda> at 0x7fb1eab84730>
       =============
       Tesla
#+end_example

       | Function                              | Lambda                             |
       |---------------------------------------+------------------------------------|
       | statement which defines a function    | expression which evaluates to      |
       | and binds it to a name                | a function                         |
       |---------------------------------------+------------------------------------|
       | Must have a name                      | Anonymous                          |
       |---------------------------------------+------------------------------------|
       | Arguments delimited by parentheses,   | Argument list terminated by colon  |
       | separated by commas                   | separated by commas                |
       |---------------------------------------+------------------------------------|
       | Zero or more arguments supported -    | Zero or more arguments supported - |
       | zero arguments => empty parentheses   | zero arguments => lambda:          |
       |---------------------------------------+------------------------------------|
       | Body is intended block of statements  | Body is a single expression        |
       |---------------------------------------+------------------------------------|
       | A return statement required to return | The return value is given by the   |
       | anything other than None              | body expression. No return         |
       |                                       | statement is permitted.            |
       |---------------------------------------+------------------------------------|
       | Regular functions can have docstrings | Lambdas cannot have docstrings     |
     
****** Detecting Callable Objects
       #+BEGIN_SRC python :results output :session functions
         def is_even(x):
             return x % 2 == 0


         callable(is_even)
         print('=============')
         is_odd = lambda x: x % 2 == 1
         callable(is_odd)
         print('=============')
         callable(list)
         callable(list.append)
         class CallMe:
             def __call__(self):
                 print("Called!")

         call_me = CallMe()
         callable(call_me)
         print('=============')
         callable("This is not callable")
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... >>> >>> True
       =============
       >>> True
       =============
       True
       True
       ... ... ... >>> >>> True
       =============
       False
#+end_example

****** Extended Formal Argument Syntax
       Passing arbitrary number of arguments to particular function:
       #+BEGIN_SRC python :results output :session functions
         def hipervolume(*args):
             print(args)
             print(type(args))

         hipervolume(3, 4)
         print('=============')
         hipervolume(5, 6, 7)
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> ... ... ... >>> (3, 4)
       : <class 'tuple'>
       : =============
       : (5, 6, 7)
       : <class 'tuple'>
       Iterate these arguments:
       #+BEGIN_SRC python :results output :session functions
         def hypervolume(*lenghts):
             i = iter(lenghts)
             v = next(i)  # first arg
             for lenght in i:
                 v *= lenght
             return v

         print(hypervolume(2, 4))
         print('=============')
         print(hypervolume(2, 4, 6, 8))
         print(hypervolume(1))
         print('=============')
         print(hypervolume())
       #+END_SRC

       #+RESULTS:
       #+begin_example

       ... ... ... ... ... >>> 8
       =============
       384
       1
       =============
       Traceback (most recent call last):
	 File "<stdin>", line 1, in <module>
	 File "<stdin>", line 3, in hypervolume
       StopIteration
#+end_example

       Passing dictionary as argument:
       #+BEGIN_SRC python :results output :session functions
         def tag(name, **kwargs):
             print(name)
             print(kwargs)
             print(type(kwargs))

         tag('img', src="monet.jpg", alt="Sunrise by Claude Monet", border=1)
         print('=============')
         # lets iterate arguments

         def tag(name, **attributes):
             result = '<' + name
             for key, value in attributes.items():
                 result += ' {k}="{v}"'. format(k=key, v=str(value))
             result += '>'
             return result

         print(tag('img', src="monet.jpg", alt="Sunrise by Claude Monet", border=1))
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... >>> img
       : {'border': 1, 'src': 'monet.jpg', 'alt': 'Sunrise by Claude Monet'}
       : <class 'dict'>
       : =============
       : ... >>> ... ... ... ... ... ... >>> <img border="1" src="monet.jpg" alt="Sunrise by Claude Monet">

****** Extended Call Syntax
       Usually it is solved as:
       #+BEGIN_SRC python
       def extended(*args, **kwargs):
       #+END_SRC
       Examples:
       #+BEGIN_SRC python :results output :session functions
         def print_args(arg1, arg2, *args):
             print(arg1)
             print(arg2)
             print(args)

         t = (11, 12, 14, 15)
         # print_args(t) NOT WORKS BUT
         print_args(*t)  # works well
         print('=============')

         # And in the same way for dicts:

         def color(red, green, blue, **kwargs):
             print("r =", red)
             print("g =", green)
             print("b =", blue)
             print(kwargs)

         k = {'red':21, 'green':68, 'blue':120, 'alpha':52}
         color(**k)
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... >>> >>> ... 11
       : 12
       : (14, 15)
       : =============
       : >>> ... >>> ... ... ... ... ... >>> >>> r = 21
       : g = 68
       : b = 120
       : {'alpha': 52}
       
****** Forwarding Arguments
       #+BEGIN_SRC python :results output :session functions
         def trace(f, *args, **kwargs):
             print("args =", args)
             print("kwargs =", kwargs)
             result = f(*args, **kwargs)
             print("result =", result)
             return result

         print(int("ff", base=16))
         print('=============')
         trace(int, "ff", base=16)
       #+END_SRC

       #+RESULTS:
       : 
       : ... ... ... ... ... >>> 255
       : =============
       : args = ('ff',)
       : kwargs = {'base': 16}
       : result = 255
       : 255
       
****** Duck Tail Transposing Tables
       #+BEGIN_SRC python :results output :session functions
         from pprint import pprint as pp

         sunday = [11, 12, 14, 15, 17, 22]
         monday = [13, 14, 16, 20, 20, 21]
         tuesday = [2, 2, 3, 7, 9, 10]

         daily = [sunday, monday, tuesday]
         pp(daily)
         for i in zip(*daily):
             print(i)

         transposed = list(zip(*daily))
         pp(transposed)
       #+END_SRC

       #+RESULTS:
       : 
       : >>> >>> >>> >>> >>> >>> [[11, 12, 14, 15, 17, 22], [13, 14, 16, 20, 20, 21], [2, 2, 3, 7, 9, 10]]
       : ... ... (11, 13, 2)
       : (12, 14, 2)
       : (14, 16, 3)
       : (15, 20, 7)
       : (17, 20, 9)
       : (22, 21, 10)
       : >>> [(11, 13, 2), (12, 14, 2), (14, 16, 3), (15, 20, 7), (17, 20, 9), (22, 21, 10)]

****** Summary

***** Closures and Decorators
****** Local Functions
****** Returning Functions From Functions
****** Closures and Nested Scopes
****** Function Factories
****** The Nonlocal Keyword
****** Function Decorators
****** A First Decorator Example
****** What Can Be a Decorator
****** Instances as Decorators
****** Multiple Decorators
****** Decorating Methods
****** functools.wraps()
****** Duck Tails Validating Arguments
****** Summary

***** Properties and Class Methods
****** Class Attributes
****** Static Methods
****** Class Methods
****** Static Methods With Inheritance
****** Class Methods With Inheritance
****** Properties
****** Properties and Inheritance
****** Duck Tail The Template Method Pattern
****** Summary

***** Strings and Representations
***** Numeric and Scalar Types
***** Iterables and Iteration
***** Inheritance and Subtype Polymorphism
***** Implementing Collections
***** Exceptions and Errors
***** Defining Context Managers
***** Introspection

**** Fluent Python						     :fluent:
***** Preface
****** TODO [[https://docs.python.org/3.0/whatsnew/3.0.html][Whatâs N In Python 3.0]]
****** TODO [[https://docs.python.org/3/tutorial/][Python Tutorial]]
       #+BEGIN_QUOTE
       Premature abstraction is as bad as premature optimization.
       #+END_QUOTE
**** Writing Idiomatic Python					     :idioma:
***** 1 Control Structures and Functions
****** 1.1 If Statements
******* 1.1.1 Avoid comparing directly to True , False , or None
	#+BEGIN_SRC python :results output
          def raise_shields():
              return True

          def number_of_evil_robots_attacking():
              return 10

          def should_raise_shields():
              # "We only raise Shields when one or more giant robots attack,
              # so I can just return that value..."
              return number_of_evil_robots_attacking()
          # if should_raise_shields():  # idiomatic approach
          if should_raise_shields() == True:
              raise_shields()
              print ('Shields raised')
          else:
              print("Safe! No giant robots attacking")
	#+END_SRC

	#+RESULTS:
	: Safe! No giant robots attacking
******* 1.1.2 Avoid repeating variable name in compound if statement
       #+BEGIN_SRC python :results output
         is_generic_name = False
         name = 'Tom'
         if name == 'Tom' or name == 'Dick' or name == 'Harry':
             is_generic_name = True

         # Idiomatic
         name = 'Tom'
         is_generic_name = name in ('Tom', 'Dick', 'Harry')
         print(is_generic_name)
       #+END_SRC

       #+RESULTS:
       : True
******* 1.1.3 Avoid placing conditional branch code on the same line as
       the colon
       #+BEGIN_SRC python :results output
         name = 'Jeff'
         address = 'New York, NY'
         if name: print (name)
         print (address)
         # Idiomatic
         if name:
             print (name)
         print (address)
       #+END_SRC

       #+RESULTS:
       : Jeff
       : New York, NY
       : Jeff
       : New York, NY

****** 1.2 For loops       
******* 1.2.1 Use the enumerate function in loops instead of creating an âindexâ variable
	#+BEGIN_SRC python :results output
          my_container = ['Larry', 'Moe', 'Curly']
          for index, element in enumerate(my_container):
              print ('{} {}'.format(index, element))
	#+END_SRC

	#+RESULTS:
	: 0 Larry
	: 1 Moe
	: 2 Curly

******* 1.2.2 Use the in keyword to iterate over an iterable
	#+BEGIN_SRC python :results output
          my_list = ['Larry', 'Moe', 'Curly']
          for element in my_list:
              print (element)
	#+END_SRC

	#+RESULTS:
	: Larry
	: Moe
	: Curly

******* 1.2.3 Use else to execute code after a for loop concludes
	#+BEGIN_SRC python
          for user in get_all_users():
              print ('Checking {}'.format(user))
              for email_address in user.get_all_email_addresses():
                  if email_is_malformed(email_address):
                      print ('Has a malformed email address!')
                      break
              else:  # for loop successfully iterated all items
                  print ('All email addresses are valid!')
	#+END_SRC

	#+RESULTS:

****** 1.3 Functions
******* 1.3.1 Avoid using '' , [] , and {} as default parameters to functions
	#+BEGIN_SRC python :results output
          # The default value [of a function] is evaluated only once.
          # This makes a difference when the default is a mutable object
          # such as a list, dictionary, or instances of most classes. For
          # example, the following function accumulates the arguments
          # passed to it on subsequent calls.
          def f(a, L=[]):
              L.append(a)
              return L
          print (f(1))
          print (f(2))
          print (f(3))
          print('=============')

          # Idiomatic
          # 
          # 
          # If you don't want the default to be shared between subsequent
          # calls, you can write the function like this instead:
          def f(a, L=None):
              if L is None:
                  L = []
              L.append(a)
              return L
          print (f(1))
          print (f(2))
          print (f(3))
	#+END_SRC
******* 1.3.2 Use *args and **kwargs to accept arbitrary arguments
	#+BEGIN_SRC python
          def make_api_call(foo, bar, baz, *args, **kwargs):
              # Now I can accept any type and number of arguments
              # without worrying about breaking existing code.
              baz_coefficient = kwargs['the_baz']
              # I can even forward my args to a different function without
              # knowing their contents!
              return baz_coefficient in new_function(args)
	#+END_SRC
***** 2 Working with Data
****** 2.1 Lists
****** 2.1.1 Use a list comprehension to create a transformed version
       of an existing list
       #+BEGIN_SRC python :results output
         # Harmful

         some_other_list = range(10)
         some_list = list()
         for element in some_other_list:
             if is_prime(element):
                 some_list.append(element + 5)

         # Idiomatic               

         some_other_list = range(10)
         some_list = [element + 5 for
                      element in some_other_list if
                      is_prime(element)]
       #+END_SRC
****** 2.1.2 Use the * operator to represent the ârestâ of a list
****** 2.2 Dictionaries
       2.2.1 Use the default parameter of dict.get to provide default
       values
       2.2.2 Use a dict comprehension to build a dict clearly and
       efficiently
****** 2.3 Strings
       2.3.1 Prefer the format function for formatting strings
       2.3.2 Use ''.join when creating a single string for list elements
       2.3.3 Chain string functions to make a simple series of transfor-
       mations more clear
****** 2.4 Classes
       2.4.1 Use underscores in function and variable names to help mark
       âprivateâ data
       2.4.2 Define __str__ in a class to show a human-readable repre-
       sentation
****** 2.5 Sets
       2.5.1 Use sets to eliminate duplicate entries from Iterable con-
       tainers
       2.5.2 Use a set comprehension to generate sets concisely
       2.5.3 Understand and use the mathematical set operations
****** 2.6 Generators
       2.6.1 Use a generator to lazily load infinite sequences
       2.6.2 Prefer a generator expression to a list comprehension
       for simple iteration
****** 2.7. Context Managers
       2.7.1 Use a context manager to ensure resources are properly
       managed
****** 2.8. Tuples
       2.8.1 Use tuples to unpack data
       2.8.2 Use _ as a placeholder for data in a tuple that should be
       ignored
****** 2.9 Variables
       2.9.1 Avoid using a temporary variable when performing a swap
       of two values
***** 3 Organizing Your Code
****** 3.1 Modules and Packages
       3.1.1 Use modules for encapsulation where other languages would
       use Objects
****** 3.2 Formatting
       3.2.1 Use all capital letters when declaring global constant values
       3.2.2 Avoid placing multiple statements on a single line
       3.2.3 Format your code according to PEP8
****** 3.3. Executable Scripts
       3.3.1 Use sys.exit in your script to return proper error codes
       3.3.2 Use the if __name__ == '__main__' pattern to allow a
       file to be both imported and run directly
****** 3.4 Imports
       3.4.1 Prefer absolute imports to relative imports
       3.4.2 Do not use from foo import * to import the contents of a
       module.
       3.4.3 Arrange your import statements in a standard order
***** 4 General Advice
****** 4.1 Avoid Reinventing the Wheel
       4.1.1 Learn the Contents of the Python Standard Library
       4.1.2 Get to know PyPI (the Python Package Index)
****** 4.2 Modules of Note
       4.2.1 Learn the contents of the itertools module
       4.2.2 Use functions in the os.path module when working with
       directory paths

**** Effective Python						     :effect:

***** [[https://github.com/bslatkin/effectivepython][Git]]


*** Applied Python						   :practice:

**** TODO Python HOWTOs

***** Porting Python 2 Code to Python 3

****** The Short Explanation

****** Details

******* Drop support for Python 2.6 and older

******* Make sure you specify the proper version support in your
           "setup.py" file

******* Have good test coverage

******* Learn the differences between Python 2 & 3

******* Update your code

******** Division

******** Text versus binary data

******* Prevent compatibility regressions

******* Check which dependencies block your transition

******* Update your "setup.py" file to denote Python 3 compatibility

******* Use continuous integration to stay compatible

****** Dropping Python 2 support completely

***** Porting Extension Modules to Python 3

****** Conditional compilation

****** Changes to Object APIs

******* str/unicode Unification

******* long/int Unification

****** Module initialization and state

****** CObject replaced with Capsule

****** Other options

***** Curses Programming with Python

****** What is curses?

******* The Python curses module

****** Starting and ending a curses application

****** Windows and Pads

****** Displaying Text

******* Attributes and Color

****** User Input

****** For More Information

***** Descriptor HowTo Guide

****** Abstract

****** Definition and Introduction

****** Descriptor Protocol

****** Invoking Descriptors

****** Descriptor Example

****** Properties

****** Functions and Methods

****** Static Methods and Class Methods

***** Functional Programming HOWTO

****** Introduction

******* Formal provability

******* Modularity

******* Ease of debugging and testing

******* Composability

****** Iterators

******* Data Types That Support Iterators

****** Generator expressions and list comprehensions

****** Generators

******* Passing values into a generator

****** Built-in functions

****** The itertools module

******* Creating new iterators

******* Calling functions on elements

******* Selecting elements

******* Combinatoric functions

******* Grouping elements

****** The functools module

******* The operator module

****** Small functions and the lambda expression

****** Revision History and Acknowledgements

****** References

******* General

******* Python-specific

******* Python documentation

***** Logging HOWTO

****** Basic Logging Tutorial

******* When to use logging

******* A simple example

******* Logging to a file

******* Logging from multiple modules

******* Logging variable data

******* Changing the format of displayed messages

******* Displaying the date/time in messages

******* Next Steps

****** Advanced Logging Tutorial

******* Logging Flow

******* Loggers

******* Handlers

******* Formatters

******* Configuring Logging

******* What happens if no configuration is provided

******* Configuring Logging for a Library

****** Logging Levels

******* Custom Levels

****** Useful Handlers

****** Exceptions raised during logging

****** Using arbitrary objects as messages

****** Optimization

***** Logging Cookbook

****** Using logging in multiple modules

****** Multiple handlers and formatters

****** Logging to multiple destinations

****** Configuration server example

****** Dealing with handlers that block

****** Sending and receiving logging events across a network

****** Adding contextual information to your logging output

******* Using LoggerAdapters to impart contextual information

******** Using objects other than dicts to pass contextual
             information

******* Using Filters to impart contextual information

****** Logging to a single file from multiple processes

****** Using file rotation

****** Use of alternative formatting styles

****** Customizing "LogRecord"

****** Subclassing QueueHandler - a ZeroMQ example

****** Subclassing QueueListener - a ZeroMQ example

****** An example dictionary-based configuration

****** Using a rotator and namer to customize log rotation processing

****** A more elaborate multiprocessing example

****** Inserting a BOM into messages sent to a SysLogHandler

****** Implementing structured logging

****** Customizing handlers with "dictConfig()"

****** Using particular formatting styles throughout your application

******* Using LogRecord factories

******* Using custom message objects

****** Configuring filters with "dictConfig()"

****** Customized exception formatting

****** Speaking logging messages

****** Buffering logging messages and outputting them conditionally

****** Formatting times using UTC (GMT) via configuration

***** Regular Expression HOWTO

****** Introduction

****** Simple Patterns

******* Matching Characters

******* Repeating Things

****** Using Regular Expressions

******* Compiling Regular Expressions

******* The Backslash Plague

******* Performing Matches

******* Module-Level Functions

******* Compilation Flags

****** More Pattern Power

******* More Metacharacters

******* Grouping

******* Non-capturing and Named Groups

******* Lookahead Assertions

****** Modifying Strings

******* Splitting Strings

******* Search and Replace

****** Common Problems

******* Use String Methods

******* match() versus search()

******* Greedy versus Non-Greedy

******* Using re.VERBOSE

****** Feedback

***** Socket Programming HOWTO

****** Sockets

******* History

****** Creating a Socket

******* IPC

****** Using a Socket

******* Binary Data

****** Disconnecting

******* When Sockets Die

****** Non-blocking Sockets

***** Sorting HOW TO

****** Sorting Basics

****** Key Functions

****** Operator Module Functions

****** Ascending and Descending

****** Sort Stability and Complex Sorts

****** The Old Way Using Decorate-Sort-Undecorate

****** The Old Way Using the *cmp* Parameter

****** Odd and Ends

***** Unicode HOWTO

****** Introduction to Unicode

******* History of Character Codes

******* Definitions

******* Encodings

******* References

****** Python's Unicode Support

******* The String Type

******* Converting to Bytes

******* Unicode Literals in Python Source Code

******* Unicode Properties

******* Unicode Regular Expressions

******* References

****** Reading and Writing Unicode Data

******* Unicode filenames

******* Tips for Writing Unicode-aware Programs

******** Converting Between File Encodings

******** Files in an Unknown Encoding

******* References

****** Acknowledgements

***** HOWTO Fetch Internet Resources Using The urllib Package

****** Introduction

****** Fetching URLs

******* Data

******* Headers

****** Handling Exceptions

******* URLError

******* HTTPError

******** Error Codes

******* Wrapping it Up

******** Number 1

******** Number 2

****** info and geturl

****** Openers and Handlers

****** Basic Authentication

****** Proxies

****** Sockets and Layers

****** Footnotes

***** HOWTO Use Python in the web

****** The Low-Level View

******* Common Gateway Interface

******** Simple script for testing CGI

******** Setting up CGI on your own server

******** Common problems with CGI scripts

******* mod_python

******* FastCGI and SCGI

******** Setting up FastCGI

******* mod_wsgi

****** Step back: WSGI

******* WSGI Servers

******* Case study: MoinMoin

****** Model-View-Controller

****** Ingredients for Websites

******* Templates

******* Data persistence

****** Frameworks

******* Some notable frameworks

******** Django

******** TurboGears

******** Zope

******** Other notable frameworks

***** Argparse Tutorial

****** Concepts

****** The basics

****** Introducing Positional arguments

****** Introducing Optional arguments

******* Short options

****** Combining Positional and Optional arguments

****** Getting a little more advanced

******* Conflicting options

****** Conclusion

***** An introduction to the ipaddress module

****** Creating Address/Network/Interface objects

******* A Note on IP Versions

******* IP Host Addresses

******* Defining Networks

******* Host Interfaces

****** Inspecting Address/Network/Interface Objects

****** Networks as lists of Addresses

****** Comparisons

****** Using IP Addresses with other modules

****** Getting more detail when instance creation fails

***** Argument Clinic How-To

****** The Goals Of Argument Clinic

****** Basic Concepts And Usage

****** Converting Your First Function

****** Advanced Topics

******* Symbolic default values

******* Renaming the C functions and variables generated by Argument
           Clinic

******* Converting functions using PyArg_UnpackTuple

******* Optional Groups

******* Using real Argument Clinic converters, instead of "legacy
           converters"

******* Py_buffer

******* Advanced converters

******* Parameter default values

******* The "NULL" default value

******* Expressions specified as default values

******* Using a return converter

******* Cloning existing functions

******* Calling Python code

******* Using a "self converter"

******* Writing a custom converter

******* Writing a custom return converter

******* METH_O and METH_NOARGS

******* tp_new and tp_init functions

******* Changing and redirecting Clinic's output

******* The #ifdef trick

******* Using Argument Clinic in Python files

**** NLP with Python
**** Python for Data Analyse
***** DONE Preliminaries
***** TODO Introductory Examples <2016-01-18 Mon>
****** collections pack
***** TODO IPython: An Interactive Computing and Development Environment
      <2016-01-18 
      
* Enhance general coding grit
** [[https://drive.google.com/file/d/0BzoOGnxA0v1FSkFNSXg4MWVpTkE/view?usp%3Dsharing][Crack Coding Interview]]
*** [[http://careercup.com/][Additional information]] on website
** [[https://www.hackerrank.com/feed][HackerRank.com]] exercises

* Discover Git workflow subtleties
** Fork useful projects

*** DONE EffectivePython
*** DONE Python-Patterns
** Evaluate it in educational purposes
** Open pull request
* OpenSource contributing
  https://github.com/milkypostman/melpa
