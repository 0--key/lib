
* Knowledge is power ©				      :True:InitialPostulate:
** it is product of education;					       :True:

*** TODO reading;

*** TODO thinking;

*** TODO practicing;

** all knowledges reside in the memory;

*** they require repetition;

*** the spaced repetition is the best approach;
   
* Enhance English
** TODO Grammar
*** Tutorial
    [[http://learnenglish.britishcouncil.org/en/book-english-grammar][British Council]]
**** TODO Pronouns
***** DONE Personal pronouns
***** it and there
***** possessive pronouns (see possessives:- pronouns)
***** this, that, these and those
***** one and ones
***** questions
***** reflexive pronouns
***** reciprocal pronouns: each other and one another
***** indefinite pronouns
***** relative pronouns
**** TODO Determiners and quantifiers
***** interrogative determiners: which and what
***** indefinite article: a and an
***** definite article: the
***** quantifiers
** TODO Pronounce
** TODO Vocabulary
   example [[http://www.manythings.org/sentences/words/][sentences]] of real English with new words
   [[http://tatoeba.org/eng/downloads][Tatoeba]] dataset {sentences with their translation}

* Jargon & definition
** PP4E
*** Let’s step back for a moment and consider how far ’ve come.

**** 

*** If you’ve already studied Python in any sort of depth,
    you probably already know that this is where its OOP support begins
    to become attractive:

    Structure
    With OOP,  can naturally associate processing logic with record data—classes
    provide both a program unit that combines logic and data in a single package and
    a hierarchy that allows code to be easily factored to avoid redundancy.

    Encapsulation
    With OOP,  can also wrap up details such as name processing and pay increases
    behind method functions—i.e.,  are free to change method implementations
    without breaking their users.

    Customization
    And with OOP,  have a natural growth path. Classes can be extended and cus-
    tomized by coding n subclasses, without changing or breaking already working
    code.

** PfDA
*** Munge/Munging/Wrangling
    Describes the overall process of manipulating unstructured and/or messy data
    into a structured or clean form. The word has snuck its way into the jargon
    of many modern day data hackers. Munge rhymes with “lunge”.

*** Interacting with the outside world
    Reading and writing with a variety of file formats and databases.

*** Preparation
    Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis.

*** Transformation
    Applying mathematical and statistical operations to groups of data sets to
    derive new data sets. For example, aggregating a large table by group variables.

*** Modeling and computation
    Connecting your data to statistical models, machine learning algorithms, or other
    computational tools

*** Presentation
    Creating interactive or static graphical visualizations or textual summaries

** OrgMode
*** Curious thought
    #+BEGIN_QUOTE
        Let us change our traditional attitude to the construction of
	programs: Instead of imagining that our main task is to instruct
	a computer what to do, let us concentrate rather on explaining
	to human beings what we want a computer to do.

	The practitioner of literate programming can be regarded as an
	essayist, whose main concern is with exposition and excellence of
	style. Such an author, with thesaurus in hand, chooses the names
	of variables carefully and explains what each variable means.
	He or she strives for a program that is comprehensible because
	its concepts have been introduced in an order that is best for
	human understanding, using a mixture of formal and informal
	methods that reinforce each other.

    – Donald Knuth
    #+END_QUOTE
** Cracking Interview
*** A hiring committee typically wants to see one interviewer
    who is an "enthusiastic endorser"
*** Be ready to code on a whiteboard and make sure all of your
    thoughts are clearly communicated
*** Well, I may be embellishing a little, but hear me out.
*** I am not exaggerating to say that I did not understand
    a single answer she gave during the interview p.16
*** One of the most important messages that you, as a candidate,
    can convey in your intervi is hiring me will make your lives easier
*** It was a real mess; we'd inherited a nasty ball of spaghetti,
    and we needed people who could jump in, figure things out,
    and be part of the solution.
*** Sometimes, I don’t have a very good attention to detail.
    While that’s good because it lets me execute quickly, it also means
    that I sometimes make careless mistakes. Because of that, I make
    sure to always have someone else double check my work.
*** Table 1
*** Table 2
*** I can go into more details if you’d like
*** I asked him open-ended questionson how he felt it was going,
    and which components he was excited about tackling.
*** Handling Technical Questions
**** So when you get a hard question, don’t panic.
     Just start talking aloud about how you would solve it.
*** Five Algorithm Approaches
**** I: EXAMPLIFY
**** II: PATTERN MATCHING
**** III: SIMPLIFY & GENERALIZE
**** IV: BASE CASE AND BUILD
**** V: DATA STRUCTURE BRAINSTORM
*** If what you want is to stay an engineer for life, then there is
    absolutely nothing wrong with that.
*** Top Ten Mistakes Candidates Make
    #+BEGIN_QUOTE
    Quality beats quantity
    #+END_QUOTE
    When asked a question, break your answer into three parts
    (Situation / Action / Response, Issue 1 / Issue 2 / Issue 3, etc)
    and speak for just a couple sentences about each. If I want more
    details, I’ll ask!
    
    
** Writing Idiomatic Python

*** Oftentimes,
    functions need to accept an arbitrary list of positional parameters
    and/or keyword parameters , use a subset of them, and forward the rest to
    another function.

** Effective Python

*** Python3

**** bytes
     raw 8-bit values
**** str
     Unicode characters
*** Python2

**** str
     raw 8-bit values
**** Unicode
     Unicode characters
*** 
* Enlarge Emacs toolbox
** DONE Elpy
   [[http://elpy.readthedocs.org/en/latest/ide.html#documentation][Elpy]]
** DONE YaSnippet
   [[http://capitaomorte.github.io/yasnippet/][YaSnippet]]
*** predefined snippets for PyMode
    ~/.emacs.d/elpa/elpy-1.10.0/snippets/python-mode/
** DONE OrgMode
   [[http://orgmode.org/orgcard.pdf][refCard]] <2016-01-18 Mon>
*** DONE Reveal OrgMode BaBel <2016-03-01 Tue> 
**** Intro
     http://orgmode.org/worg/org-contrib/babel/intro.html
**** Tutorial
     http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code
**** Configure languages
     http://orgmode.org/worg/org-contrib/babel/languages.html#configure
**** Supported languages
     http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
**** shortcuts
     |----------+------------------|
     | Sequence | Expands to       |
     |----------+------------------|
     | <s       | #+BEGIN_SRC      |
     | <e       | #+BEGIN_EXAMPLE  |
     | <q       | #+BEGIN_QUOTE    |
     | <v       | #+BEGIN_VERSE    |
     | <V       | #+BEGIN_VERBATIM |
     | <c       | #+BEGIN_CENTER   |
     | <l       | #+BEGIN_LaTeX    |
     | <L       | #+LaTeX          |
     | <h       | #+BEGIN_HTML     |
     | <H       | #+HTML           |
     | <a       | #+BEGIN_ASCII    |
     | <A       | #+ASCII:         |
     | <i       | #+INDEX:         |
     | <I       | #+INCLUDE:       |
     |----------+------------------|



*** Dates <2016-02-03 Wed>
*** Tags <2016-02-04 Thu>
** DONE KeyChord
   [[http://www.emacswiki.org/emacs/key-chord.el][KeyChord]] <2016-01-18 Mon>
*** mkdir ~/.emacs.d/lisp/
**** put into it key-chord.el
**** and key-chord-map.el:
     (key-chord-define-global "hj"     'undo)
     (provide 'key-chord-map)
*** add into init.el:
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    (require 'key-chord)
    (key-chord-mode 1)
    (require 'key-chord-map)





This is a sample text to reveiw key-chords
How it works
** DONE ISpell
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling check]]
   DEADLINE: <2016-01-25 Mon>
** DONE Embedding Python source code into Org document
   Demands to install Org recent version 
*** This is the first and successful attempt			       :CODE:
    #+begin_src python :results output
      import sys
      print(sys.version)
      print("Hello, world!")
      print("This is a test")
      for i in range(4):
	  print(i)
    #+end_src python

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : Hello, world!
    : This is a test
    : 0
    : 1
    : 2
    : 3
*** Lets try to embed code snippet from outside
    #+BEGIN_SRC python
      print(sys.version)
          
    #+END_SRC

    #+RESULTS:

*** Examples from real world
    #+name: session_init
    #+begin_src python :results output :session test
      # Example from Slatkin's book
      a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
      print('First four:', a[:4])
      print('Last four: ', a[-4:])
      print('Middle two:', a[3:-3])
    #+end_src

    #+RESULTS: session_init
    : 
    : >>> First four: ['a', 'b', 'c', 'd']
    : Last four:  ['e', 'f', 'g', 'h']
    : Middle two: ['d', 'e']

    #+BEGIN_SRC python :results output :session test
      import sys
      # it's the session test
      print('This is a session variable a : ', a)
    #+END_SRC

    #+RESULTS:
    : 
    : ... This is a session variable a :  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

*** Session test
    #+BEGIN_SRC python :results output :session test 
      print(sys.version)
      print('How it might be possible!', a[2:5])
    #+END_SRC

    #+RESULTS:
    : 3.4.3 (default, Oct 14 2015, 20:33:09) 
    : [GCC 4.8.4]
    : How it might be possible! ['c', 'd', 'e']

*** Full-Fledged
    #+BEGIN_SRC python :results output
      # initialize data to be stored in files, pickles, shelves

      # records
      bob = {'name': 'Bob Smith', 'age': 42, 'pay': 30000, 'job': 'dev'}
      sue = {'name': 'Sue Jones', 'age': 45, 'pay': 40000, 'job': 'hdw'}
      tom = {'name': 'Tom',       'age': 50, 'pay': 0,     'job': None}

      # database
      db = {}
      db['bob'] = bob
      db['sue'] = sue
      db['tom'] = tom

      print('\n')
      for key in db:
          print(key, '=>\n  ', db[key])


    #+END_SRC

    #+RESULTS:
    : 
    : 
    : bob =>
    :    {'pay': 30000, 'job': 'dev', 'age': 42, 'name': 'Bob Smith'}
    : sue =>
    :    {'pay': 40000, 'job': 'hdw', 'age': 45, 'name': 'Sue Jones'}
    : tom =>
    :    {'pay': 0, 'job': None, 'age': 50, 'name': 'Tom'}

** TODO New shortcuts
*** General
**** Switch buffer in the stack C-x Left/Right
**** Word spell check M-x $
**** M-x ispell
**** GoTo M-g g, M-g M-g
**** Help with keys C-h b, d, k, v(ariable)
**** Elisp evaluation
     M-x eval-buffer
**** Bookmarks (set/goto/list/del:
     C-x r m/b/l/M-x [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]]-delete
**** Some keys in ‘*Bookmark List*’:
     ‘a’ – show annotation for the current bookmark
     ‘A’ – show all annotations for your bookmarks
     ‘d’ – mark various entries for deletion (‘x’ – to delete them)
     ‘e’ – edit the annotation for the current bookmark
     ‘m’ – mark various entries for display and other operations, (‘v’ – to visit)
     ‘o’ – visit the current bookmark in another window, keeping the bookmark list open
     ‘C-o’ – switch to the current bookmark in another window
     ‘r’ – rename the current bookmark
**** Text accumulation
     [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Accumulating-Text.html][==>]]
***** append to:
      buffer, register or file
***** prepend to:
      buffer or register
**** 

*** Python-mode


** TODO Git and Emacs synthesis
   [[https://github.com/tsgates/git-emacs][Emacs+Git]]
   DEADLINE: <2016-02-28 Sun>
* Dive deeper into Python programming language

** in six months <2016-06-15 Wed> 
** with:

*** Python3++
**** DONE Install and test Python3 devEnv
     virtualenv -p /usr/bin/python3 yourenv
     source yourenv/bin/activate
     pip install ipython
     DEADLINE: <2016-01-19 Tue>
**** DONE Install into devEnv:
     DEADLINE: <2016-01-20 Wed>
***** numpy
      sudo apt-get install python3-dev
      pip install numpy
***** pandas
      pip install pandas
***** nltk
      pip install -U nltk
      
***** matplotlib
      sudo apt-get install libfreetype6-dev
      sudo apt-get install libxft-dev
      pip install matplotlib 

http://github.com/pydata/pydata-book

** by studying with slope to hone:

*** Python's Theory
**** Official Python documentation

***** Official tutorial
      https://docs.python.org/3/tutorial/
****** DONE 1. Whetting Your Appetite
****** DONE 2. Using the Python Interpreter
        2.1. Invoking the Interpreter
            2.1.1. Argument Passing
            2.1.2. Interactive Mode
        2.2. The Interpreter and Its Environment
            2.2.1. Source Code Encoding
****** TODO 3. An Informal Introduction to Python
        3.1. Using Python as a Calculator
            3.1.1. Numbers
	    #+BEGIN_SRC python :results output :session intro
	    2 + 2
	    
	    #+END_SRC

	    #+RESULTS:
	    : 4

	    
            3.1.2. Strings
            3.1.3. Lists
        3.2. First Steps Towards Programming
****** 4. More Control Flow Tools
        4.1. if Statements
        4.2. for Statements
        4.3. The range() Function
        4.4. break and continue Statements, and else Clauses on Loops
        4.5. pass Statements
        4.6. Defining Functions
        4.7. More on Defining Functions
            4.7.1. Default Argument Values
            4.7.2. Keyword Arguments
            4.7.3. Arbitrary Argument Lists
            4.7.4. Unpacking Argument Lists
            4.7.5. Lambda Expressions
            4.7.6. Documentation Strings
            4.7.7. Function Annotations
        4.8. Intermezzo: Coding Style
****** 5. Data Structures
        5.1. More on Lists
            5.1.1. Using Lists as Stacks
            5.1.2. Using Lists as Queues
            5.1.3. List Comprehensions
            5.1.4. Nested List Comprehensions
        5.2. The del statement
        5.3. Tuples and Sequences
        5.4. Sets
        5.5. Dictionaries
        5.6. Looping Techniques
        5.7. More on Conditions
        5.8. Comparing Sequences and Other Types
****** 6. Modules
        6.1. More on Modules
            6.1.1. Executing modules as scripts
            6.1.2. The Module Search Path
            6.1.3. “Compiled” Python files
        6.2. Standard Modules
        6.3. The dir() Function
        6.4. Packages
            6.4.1. Importing * From a Package
            6.4.2. Intra-package References
            6.4.3. Packages in Multiple Directories
****** 7. Input and Output
        7.1. Fancier Output Formatting
            7.1.1. Old string formatting
        7.2. Reading and Writing Files
            7.2.1. Methods of File Objects
            7.2.2. Saving structured data with json
****** 8. Errors and Exceptions
        8.1. Syntax Errors
        8.2. Exceptions
        8.3. Handling Exceptions
        8.4. Raising Exceptions
        8.5. User-defined Exceptions
        8.6. Defining Clean-up Actions
        8.7. Predefined Clean-up Actions
****** 9. Classes
        9.1. A Word About Names and Objects
        9.2. Python Scopes and Namespaces
            9.2.1. Scopes and Namespaces Example
        9.3. A First Look at Classes
            9.3.1. Class Definition Syntax
            9.3.2. Class Objects
            9.3.3. Instance Objects
            9.3.4. Method Objects
            9.3.5. Class and Instance Variables
        9.4. Random Remarks
        9.5. Inheritance
            9.5.1. Multiple Inheritance
        9.6. Private Variables
        9.7. Odds and Ends
        9.8. Exceptions Are Classes Too
        9.9. Iterators
        9.10. Generators
        9.11. Generator Expressions
****** 10. Brief Tour of the Standard Library
        10.1. Operating System Interface
        10.2. File Wildcards
        10.3. Command Line Arguments
        10.4. Error Output Redirection and Program Termination
        10.5. String Pattern Matching
        10.6. Mathematics
        10.7. Internet Access
        10.8. Dates and Times
        10.9. Data Compression
        10.10. Performance Measurement
        10.11. Quality Control
        10.12. Batteries Included
****** 11. Brief Tour of the Standard Library – Part II
        11.1. Output Formatting
        11.2. Templating
        11.3. Working with Binary Data Record Layouts
        11.4. Multi-threading
        11.5. Logging
        11.6. Weak References
        11.7. Tools for Working with Lists
        11.8. Decimal Floating Point Arithmetic
****** 12. Virtual Environments and Packages
        12.1. Introduction
        12.2. Creating Virtual Environments
        12.3. Managing Packages with pip
****** 13. What Now?
****** 14. Interactive Input Editing and History Substitution
        14.1. Tab Completion and History Editing
        14.2. Alternatives to the Interactive Interpreter
****** 15. Floating Point Arithmetic: Issues and Limitations
        15.1. Representation Error
****** 16. Appendix
        16.1. Interactive Mode
            16.1.1. Error Handling
            16.1.2. Executable Python Scripts
            16.1.3. The Interactive Startup File
            16.1.4. The Customization Modules

***** Official documentation
      http://docs.python.org
***** http://pypi.python.org/pypi
***** http://pyvideo.org

**** Programming Python 4th Edition
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_file.py][File as DB]]
***** [[/usr/local/share/DVCS/lib/Python/edu/PP4E/I%20The%20Begining/make_db_pickle.py][Pickle file as DB]]
**** Python Anti-Patterns
***** [[https://www.quantifiedcode.com/knowledge-base/][Python Knowledge Base]]
***** [[http://docs.quantifiedcode.com/python-anti-patterns/][The Little Book of Python Anti-Patterns]]
      [[https://github.com/quantifiedcode/python-anti-patterns][Git]] for this book
***** [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python]]
**** Fluent Python
***** Preface
****** TODO [[https://docs.python.org/3.0/whatsnew/3.0.html][What’s N In Python 3.0]]
****** TODO [[https://docs.python.org/3/tutorial/][Python Tutorial]]
       #+BEGIN_QUOTE
       Premature abstraction is as bad as premature optimization.
       #+END_QUOTE
**** Writing Idiomatic Python

**** Effective Python

***** [[https://github.com/bslatkin/effectivepython][Git]]


*** Applied Python

**** NLP with Python
**** Python for Data Analyse
***** DONE Preliminaries
***** TODO Introductory Examples <2016-01-18 Mon>
****** collections pack
***** TODO IPython: An Interactive Computing and Development Environment
      <2016-01-18 
      

* Enhance general coding grit
** [[https://drive.google.com/file/d/0BzoOGnxA0v1FSkFNSXg4MWVpTkE/view?usp%3Dsharing][Crack Coding Interview]]
*** [[http://careercup.com/][Additional information]] on website
** [[https://www.hackerrank.com/feed][HackerRank.com]] exercises

* Discover Git workflow subtleties

** Fork useful projects

*** DONE EffectivePython
*** DONE Python-Patterns
** Evaluate it in educational purposes
** Open pull request
